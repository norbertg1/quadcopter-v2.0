   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"diskio.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.comm	I2C_Variable,4,4
  19              		.comm	uart_data,1,1
  20              		.comm	adc_data,60,4
  21              		.comm	Kp,4,4
  22              		.comm	Kd,4,4
  23              		.comm	Ki,4,4
  24              		.comm	zKp,4,4
  25              		.comm	zKd,4,4
  26              		.comm	basepower,4,4
  27              		.comm	setpoint_x,4,4
  28              		.comm	setpoint_y,4,4
  29              		.comm	setpoint_z,4,4
  30              		.comm	setpoint_alt,4,4
  31              		.comm	batt1_vol,4,4
  32              		.comm	batt2_vol,4,4
  33              		.comm	batt3_vol,4,4
  34              		.comm	BATT_VOLT,4,4
  35              		.comm	FatFs,560,4
  36              		.comm	fil,548,4
  37              		.comm	GYRO_XOUT_OFFSET,2,2
  38              		.comm	GYRO_YOUT_OFFSET,2,2
  39              		.comm	GYRO_ZOUT_OFFSET,2,2
  40              		.comm	ACCEL_XOUT_OFFSET,2,2
  41              		.comm	ACCEL_YOUT_OFFSET,2,2
  42              		.comm	ACCEL_ZOUT_OFFSET,2,2
  43              		.comm	GYRO_XANGLE,4,4
  44              		.comm	GYRO_YANGLE,4,4
  45              		.comm	GYRO_ZANGLE,4,4
  46              		.comm	GYRO_XOUT,2,2
  47              		.comm	GYRO_YOUT,2,2
  48              		.comm	GYRO_ZOUT,2,2
  49              		.comm	ACCEL_XOUT,2,2
  50              		.comm	ACCEL_YOUT,2,2
  51              		.comm	ACCEL_ZOUT,2,2
  52              		.comm	ACCEL_Gx,4,4
  53              		.comm	ACCEL_Gy,4,4
  54              		.comm	ACCEL_Gz,4,4
  55              		.comm	ACCEL,8,8
  56              		.comm	GYRO_XRATE,4,4
  57              		.comm	GYRO_YRATE,4,4
  58              		.comm	GYRO_ZRATE,4,4
  59              		.comm	ACCEL_XANGLE,4,4
  60              		.comm	ACCEL_YANGLE,4,4
  61              		.comm	gyro_xsensitivity,4,4
  62              		.comm	gyro_ysensitivity,4,4
  63              		.comm	gyro_zsensitivity,4,4
  64              		.comm	a,4,4
  65              		.comm	dt,4,4
  66              		.comm	COMPLEMENTARY_XANGLE,4,4
  67              		.comm	COMPLEMENTARY_YANGLE,4,4
  68              		.comm	filter_xterm,12,4
  69              		.comm	filter_yterm,12,4
  70              		.comm	XANGLE_OFFSET,4,4
  71              		.comm	YANGLE_OFFSET,4,4
  72              		.comm	TEMP,4,4
  73              		.comm	timeConstant,4,4
  74              		.comm	MPU_6050_buffer,14,4
  75              		.comm	AC1,2,2
  76              		.comm	AC2,2,2
  77              		.comm	AC3,2,2
  78              		.comm	B1,2,2
  79              		.comm	B2,2,2
  80              		.comm	MB,2,2
  81              		.comm	MC,2,2
  82              		.comm	MD,2,2
  83              		.comm	AC4,2,2
  84              		.comm	AC5,2,2
  85              		.comm	AC6,2,2
  86              		.comm	T,4,4
  87              		.comm	absolute_altittude,4,4
  88              		.comm	start_altittude,4,4
  89              		.comm	relative_altittude,4,4
  90              		.comm	P,4,4
  91              		.align	2
  92              		.thumb
  93              		.thumb_func
  95              	wait_ready:
  96              	.LFB0:
  97              		.file 1 "../Sources/ff10b/src/diskio.c"
   1:../Sources/ff10b/src/diskio.c **** /*-----------------------------------------------------------------------*/
   2:../Sources/ff10b/src/diskio.c **** /* Low level disk I/O module skeleton for FatFs     (C)ChaN, 2013        */
   3:../Sources/ff10b/src/diskio.c **** /*-----------------------------------------------------------------------*/
   4:../Sources/ff10b/src/diskio.c **** /* If a working storage control module is available, it should be        */
   5:../Sources/ff10b/src/diskio.c **** /* attached to the FatFs via a glue function rather than modifying it.   */
   6:../Sources/ff10b/src/diskio.c **** /* This is an example of glue functions to attach various exsisting      */
   7:../Sources/ff10b/src/diskio.c **** /* storage control module to the FatFs module with a defined API.        */
   8:../Sources/ff10b/src/diskio.c **** /*-----------------------------------------------------------------------*/
   9:../Sources/ff10b/src/diskio.c **** 
  10:../Sources/ff10b/src/diskio.c **** #include "diskio.h"		/* FatFs lower layer API */
  11:../Sources/ff10b/src/diskio.c **** //#include "usbdisk.h"	/* Example: USB drive control */
  12:../Sources/ff10b/src/diskio.c **** //#include "atadrive.h"	/* Example: ATA drive control */
  13:../Sources/ff10b/src/diskio.c **** //#include "derivative.h" /* include peripheral declarations */
  14:../Sources/ff10b/src/diskio.c **** #include "init.h"
  15:../Sources/ff10b/src/diskio.c **** 
  16:../Sources/ff10b/src/diskio.c **** /* Definitions of physical drive number for each media */
  17:../Sources/ff10b/src/diskio.c **** #define ATA		0
  18:../Sources/ff10b/src/diskio.c **** #define MMC		1
  19:../Sources/ff10b/src/diskio.c **** #define USB		2
  20:../Sources/ff10b/src/diskio.c **** 
  21:../Sources/ff10b/src/diskio.c **** 
  22:../Sources/ff10b/src/diskio.c **** 
  23:../Sources/ff10b/src/diskio.c **** 
  24:../Sources/ff10b/src/diskio.c **** 
  25:../Sources/ff10b/src/diskio.c **** /*-----------------------------------------------------------------------*/
  26:../Sources/ff10b/src/diskio.c **** /* Wait for card ready                                                   */
  27:../Sources/ff10b/src/diskio.c **** /*-----------------------------------------------------------------------*/
  28:../Sources/ff10b/src/diskio.c **** 
  29:../Sources/ff10b/src/diskio.c **** static
  30:../Sources/ff10b/src/diskio.c **** int wait_ready (	/* 1:Ready, 0:Timeout */
  31:../Sources/ff10b/src/diskio.c **** 	UINT wt			/* Timeout [ms] */
  32:../Sources/ff10b/src/diskio.c **** )
  33:../Sources/ff10b/src/diskio.c **** {
  98              		.loc 1 33 0
  99              		.cfi_startproc
 100              		@ args = 0, pretend = 0, frame = 16
 101              		@ frame_needed = 1, uses_anonymous_args = 0
 102 0000 80B5     		push	{r7, lr}
 103              	.LCFI0:
 104              		.cfi_def_cfa_offset 8
 105              		.cfi_offset 7, -8
 106              		.cfi_offset 14, -4
 107 0002 84B0     		sub	sp, sp, #16
 108              	.LCFI1:
 109              		.cfi_def_cfa_offset 24
 110 0004 00AF     		add	r7, sp, #0
 111              	.LCFI2:
 112              		.cfi_def_cfa_register 7
 113 0006 7860     		str	r0, [r7, #4]
  34:../Sources/ff10b/src/diskio.c **** 	BYTE d;
  35:../Sources/ff10b/src/diskio.c **** 
  36:../Sources/ff10b/src/diskio.c **** 
  37:../Sources/ff10b/src/diskio.c **** 	wt = wt / 10;
 114              		.loc 1 37 0
 115 0008 7A68     		ldr	r2, [r7, #4]
 116 000a 4CF6CD43 		movw	r3, #52429
 117 000e CCF6CC43 		movt	r3, 52428
 118 0012 A3FB0213 		umull	r1, r3, r3, r2
 119 0016 4FEAD303 		lsr	r3, r3, #3
 120 001a 7B60     		str	r3, [r7, #4]
 121              	.L3:
  38:../Sources/ff10b/src/diskio.c **** 	do{
  39:../Sources/ff10b/src/diskio.c **** 		//Delay_mS(10);
  40:../Sources/ff10b/src/diskio.c **** 		wt--;
 122              		.loc 1 40 0 discriminator 1
 123 001c 7B68     		ldr	r3, [r7, #4]
 124 001e 03F1FF33 		add	r3, r3, #-1
 125 0022 7B60     		str	r3, [r7, #4]
  41:../Sources/ff10b/src/diskio.c **** 		d = spi_send(0xFF);
 126              		.loc 1 41 0 discriminator 1
 127 0024 4FF0FF00 		mov	r0, #255
 128 0028 FFF7FEFF 		bl	spi_send
 129 002c 0346     		mov	r3, r0
 130 002e FB73     		strb	r3, [r7, #15]
  42:../Sources/ff10b/src/diskio.c **** 	}while (d != 0xFF && wt);
 131              		.loc 1 42 0 discriminator 1
 132 0030 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 133 0032 FF2B     		cmp	r3, #255
 134 0034 02D0     		beq	.L2
 135 0036 7B68     		ldr	r3, [r7, #4]
 136 0038 002B     		cmp	r3, #0
 137 003a EFD1     		bne	.L3
 138              	.L2:
  43:../Sources/ff10b/src/diskio.c **** 	
  44:../Sources/ff10b/src/diskio.c **** 	return (d == 0xFF) ? 1 : 0;
 139              		.loc 1 44 0
 140 003c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 141 003e FF2B     		cmp	r3, #255
 142 0040 14BF     		ite	ne
 143 0042 0023     		movne	r3, #0
 144 0044 0123     		moveq	r3, #1
 145 0046 DBB2     		uxtb	r3, r3
  45:../Sources/ff10b/src/diskio.c **** }
 146              		.loc 1 45 0
 147 0048 1846     		mov	r0, r3
 148 004a 07F11007 		add	r7, r7, #16
 149 004e BD46     		mov	sp, r7
 150 0050 80BD     		pop	{r7, pc}
 151              		.cfi_endproc
 152              	.LFE0:
 154 0052 00BF     		.align	2
 155              		.thumb
 156              		.thumb_func
 158              	deselect:
 159              	.LFB1:
  46:../Sources/ff10b/src/diskio.c **** 
  47:../Sources/ff10b/src/diskio.c **** 
  48:../Sources/ff10b/src/diskio.c **** 
  49:../Sources/ff10b/src/diskio.c **** /*-----------------------------------------------------------------------*/
  50:../Sources/ff10b/src/diskio.c **** /* Deselect the card and release SPI bus                                 */
  51:../Sources/ff10b/src/diskio.c **** /*-----------------------------------------------------------------------*/
  52:../Sources/ff10b/src/diskio.c **** 
  53:../Sources/ff10b/src/diskio.c **** static
  54:../Sources/ff10b/src/diskio.c **** void deselect (void)
  55:../Sources/ff10b/src/diskio.c **** {
 160              		.loc 1 55 0
 161              		.cfi_startproc
 162              		@ args = 0, pretend = 0, frame = 0
 163              		@ frame_needed = 1, uses_anonymous_args = 0
 164 0054 80B5     		push	{r7, lr}
 165              	.LCFI3:
 166              		.cfi_def_cfa_offset 8
 167              		.cfi_offset 7, -8
 168              		.cfi_offset 14, -4
 169 0056 00AF     		add	r7, sp, #0
 170              	.LCFI4:
 171              		.cfi_def_cfa_register 7
  56:../Sources/ff10b/src/diskio.c **** 	CS_HIGH;
 172              		.loc 1 56 0
 173 0058 4FF28003 		movw	r3, #61568
 174 005c C4F20F03 		movt	r3, 16399
 175 0060 4FF28002 		movw	r2, #61568
 176 0064 C4F20F02 		movt	r2, 16399
 177 0068 5268     		ldr	r2, [r2, #4]
 178 006a 42F48052 		orr	r2, r2, #4096
 179 006e 5A60     		str	r2, [r3, #4]
  57:../Sources/ff10b/src/diskio.c **** 	spi_send(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 180              		.loc 1 57 0
 181 0070 4FF0FF00 		mov	r0, #255
 182 0074 FFF7FEFF 		bl	spi_send
  58:../Sources/ff10b/src/diskio.c **** }
 183              		.loc 1 58 0
 184 0078 80BD     		pop	{r7, pc}
 185              		.cfi_endproc
 186              	.LFE1:
 188 007a 00BF     		.align	2
 189              		.thumb
 190              		.thumb_func
 192              	select:
 193              	.LFB2:
  59:../Sources/ff10b/src/diskio.c **** 
  60:../Sources/ff10b/src/diskio.c **** 
  61:../Sources/ff10b/src/diskio.c **** 
  62:../Sources/ff10b/src/diskio.c **** /*-----------------------------------------------------------------------*/
  63:../Sources/ff10b/src/diskio.c **** /* Select the card and wait for ready                                    */
  64:../Sources/ff10b/src/diskio.c **** /*-----------------------------------------------------------------------*/
  65:../Sources/ff10b/src/diskio.c **** 
  66:../Sources/ff10b/src/diskio.c **** static
  67:../Sources/ff10b/src/diskio.c **** int select (void)	/* 1:Successful, 0:Timeout */
  68:../Sources/ff10b/src/diskio.c **** {
 194              		.loc 1 68 0
 195              		.cfi_startproc
 196              		@ args = 0, pretend = 0, frame = 0
 197              		@ frame_needed = 1, uses_anonymous_args = 0
 198 007c 80B5     		push	{r7, lr}
 199              	.LCFI5:
 200              		.cfi_def_cfa_offset 8
 201              		.cfi_offset 7, -8
 202              		.cfi_offset 14, -4
 203 007e 00AF     		add	r7, sp, #0
 204              	.LCFI6:
 205              		.cfi_def_cfa_register 7
  69:../Sources/ff10b/src/diskio.c **** 	CS_LOW;
 206              		.loc 1 69 0
 207 0080 4FF28003 		movw	r3, #61568
 208 0084 C4F20F03 		movt	r3, 16399
 209 0088 4FF28002 		movw	r2, #61568
 210 008c C4F20F02 		movt	r2, 16399
 211 0090 9268     		ldr	r2, [r2, #8]
 212 0092 42F48052 		orr	r2, r2, #4096
 213 0096 9A60     		str	r2, [r3, #8]
  70:../Sources/ff10b/src/diskio.c **** 	spi_send(0xFF);	/* Dummy clock (force DO enabled) */
 214              		.loc 1 70 0
 215 0098 4FF0FF00 		mov	r0, #255
 216 009c FFF7FEFF 		bl	spi_send
  71:../Sources/ff10b/src/diskio.c **** 
  72:../Sources/ff10b/src/diskio.c **** 	if (wait_ready(500)) return 1;	/* OK */
 217              		.loc 1 72 0
 218 00a0 4FF4FA70 		mov	r0, #500
 219 00a4 FFF7ACFF 		bl	wait_ready
 220 00a8 0346     		mov	r3, r0
 221 00aa 002B     		cmp	r3, #0
 222 00ac 02D0     		beq	.L7
 223              		.loc 1 72 0 is_stmt 0 discriminator 1
 224 00ae 4FF00103 		mov	r3, #1
 225 00b2 03E0     		b	.L8
 226              	.L7:
  73:../Sources/ff10b/src/diskio.c **** 	deselect();
 227              		.loc 1 73 0 is_stmt 1
 228 00b4 FFF7CEFF 		bl	deselect
  74:../Sources/ff10b/src/diskio.c **** 	return 0;	/* Timeout */
 229              		.loc 1 74 0
 230 00b8 4FF00003 		mov	r3, #0
 231              	.L8:
  75:../Sources/ff10b/src/diskio.c **** }
 232              		.loc 1 75 0
 233 00bc 1846     		mov	r0, r3
 234 00be 80BD     		pop	{r7, pc}
 235              		.cfi_endproc
 236              	.LFE2:
 238              		.align	2
 239              		.global	disk_initialize
 240              		.thumb
 241              		.thumb_func
 243              	disk_initialize:
 244              	.LFB3:
  76:../Sources/ff10b/src/diskio.c **** 
  77:../Sources/ff10b/src/diskio.c **** 
  78:../Sources/ff10b/src/diskio.c **** 
  79:../Sources/ff10b/src/diskio.c **** 
  80:../Sources/ff10b/src/diskio.c **** /*-----------------------------------------------------------------------*/
  81:../Sources/ff10b/src/diskio.c **** /* Inidialize a Drive                                                    */
  82:../Sources/ff10b/src/diskio.c **** /*-----------------------------------------------------------------------*/
  83:../Sources/ff10b/src/diskio.c **** 
  84:../Sources/ff10b/src/diskio.c **** DSTATUS disk_initialize (
  85:../Sources/ff10b/src/diskio.c **** 	BYTE pdrv				/* Physical drive nmuber (0..) */
  86:../Sources/ff10b/src/diskio.c **** )
  87:../Sources/ff10b/src/diskio.c **** {
 245              		.loc 1 87 0
 246              		.cfi_startproc
 247              		@ args = 0, pretend = 0, frame = 8
 248              		@ frame_needed = 1, uses_anonymous_args = 0
 249 00c0 80B5     		push	{r7, lr}
 250              	.LCFI7:
 251              		.cfi_def_cfa_offset 8
 252              		.cfi_offset 7, -8
 253              		.cfi_offset 14, -4
 254 00c2 82B0     		sub	sp, sp, #8
 255              	.LCFI8:
 256              		.cfi_def_cfa_offset 16
 257 00c4 00AF     		add	r7, sp, #0
 258              	.LCFI9:
 259              		.cfi_def_cfa_register 7
 260 00c6 0346     		mov	r3, r0
 261 00c8 FB71     		strb	r3, [r7, #7]
  88:../Sources/ff10b/src/diskio.c **** 
  89:../Sources/ff10b/src/diskio.c **** /*
  90:../Sources/ff10b/src/diskio.c **** 	switch (pdrv) {
  91:../Sources/ff10b/src/diskio.c **** 	case ATA :
  92:../Sources/ff10b/src/diskio.c **** 		result = ATA_disk_initialize();
  93:../Sources/ff10b/src/diskio.c **** 
  94:../Sources/ff10b/src/diskio.c **** 		// translate the reslut code here
  95:../Sources/ff10b/src/diskio.c **** 
  96:../Sources/ff10b/src/diskio.c **** 		return stat;
  97:../Sources/ff10b/src/diskio.c **** 
  98:../Sources/ff10b/src/diskio.c **** 	case MMC :
  99:../Sources/ff10b/src/diskio.c **** 		result = MMC_disk_initialize();
 100:../Sources/ff10b/src/diskio.c **** 
 101:../Sources/ff10b/src/diskio.c **** 		// translate the reslut code here
 102:../Sources/ff10b/src/diskio.c **** 
 103:../Sources/ff10b/src/diskio.c **** 		return stat;
 104:../Sources/ff10b/src/diskio.c **** 
 105:../Sources/ff10b/src/diskio.c **** 	case USB :
 106:../Sources/ff10b/src/diskio.c **** 		result = USB_disk_initialize();
 107:../Sources/ff10b/src/diskio.c **** 
 108:../Sources/ff10b/src/diskio.c **** 		// translate the reslut code here
 109:../Sources/ff10b/src/diskio.c **** 
 110:../Sources/ff10b/src/diskio.c **** 		return stat;
 111:../Sources/ff10b/src/diskio.c **** 	}
 112:../Sources/ff10b/src/diskio.c **** */
 113:../Sources/ff10b/src/diskio.c **** 	if(init_SDcard()) return 0;
 262              		.loc 1 113 0
 263 00ca FFF7FEFF 		bl	init_SDcard
 264 00ce 0346     		mov	r3, r0
 265 00d0 002B     		cmp	r3, #0
 266 00d2 02D0     		beq	.L10
 267              		.loc 1 113 0 is_stmt 0 discriminator 1
 268 00d4 4FF00003 		mov	r3, #0
 269 00d8 01E0     		b	.L11
 270              	.L10:
 114:../Sources/ff10b/src/diskio.c **** 	return STA_NOINIT;
 271              		.loc 1 114 0 is_stmt 1
 272 00da 4FF00103 		mov	r3, #1
 273              	.L11:
 115:../Sources/ff10b/src/diskio.c **** }
 274              		.loc 1 115 0
 275 00de 1846     		mov	r0, r3
 276 00e0 07F10807 		add	r7, r7, #8
 277 00e4 BD46     		mov	sp, r7
 278 00e6 80BD     		pop	{r7, pc}
 279              		.cfi_endproc
 280              	.LFE3:
 282              		.align	2
 283              		.global	disk_status
 284              		.thumb
 285              		.thumb_func
 287              	disk_status:
 288              	.LFB4:
 116:../Sources/ff10b/src/diskio.c **** 
 117:../Sources/ff10b/src/diskio.c **** 
 118:../Sources/ff10b/src/diskio.c **** 
 119:../Sources/ff10b/src/diskio.c **** /*-----------------------------------------------------------------------*/
 120:../Sources/ff10b/src/diskio.c **** /* Get Disk Status                                                       */
 121:../Sources/ff10b/src/diskio.c **** /*-----------------------------------------------------------------------*/
 122:../Sources/ff10b/src/diskio.c **** 
 123:../Sources/ff10b/src/diskio.c **** DSTATUS disk_status (
 124:../Sources/ff10b/src/diskio.c **** 	BYTE pdrv		/* Physical drive nmuber (0..) */
 125:../Sources/ff10b/src/diskio.c **** )
 126:../Sources/ff10b/src/diskio.c **** {
 289              		.loc 1 126 0
 290              		.cfi_startproc
 291              		@ args = 0, pretend = 0, frame = 8
 292              		@ frame_needed = 1, uses_anonymous_args = 0
 293              		@ link register save eliminated.
 294 00e8 80B4     		push	{r7}
 295              	.LCFI10:
 296              		.cfi_def_cfa_offset 4
 297              		.cfi_offset 7, -4
 298 00ea 83B0     		sub	sp, sp, #12
 299              	.LCFI11:
 300              		.cfi_def_cfa_offset 16
 301 00ec 00AF     		add	r7, sp, #0
 302              	.LCFI12:
 303              		.cfi_def_cfa_register 7
 304 00ee 0346     		mov	r3, r0
 305 00f0 FB71     		strb	r3, [r7, #7]
 127:../Sources/ff10b/src/diskio.c **** 	
 128:../Sources/ff10b/src/diskio.c **** /*
 129:../Sources/ff10b/src/diskio.c **** 	switch (pdrv) {
 130:../Sources/ff10b/src/diskio.c **** 	case ATA :
 131:../Sources/ff10b/src/diskio.c **** 		result = ATA_disk_status();
 132:../Sources/ff10b/src/diskio.c **** 
 133:../Sources/ff10b/src/diskio.c **** 		// translate the reslut code here
 134:../Sources/ff10b/src/diskio.c **** 
 135:../Sources/ff10b/src/diskio.c **** 		return stat;
 136:../Sources/ff10b/src/diskio.c **** 
 137:../Sources/ff10b/src/diskio.c **** 	case MMC :
 138:../Sources/ff10b/src/diskio.c **** 		result = MMC_disk_status();
 139:../Sources/ff10b/src/diskio.c **** 
 140:../Sources/ff10b/src/diskio.c **** 		// translate the reslut code here
 141:../Sources/ff10b/src/diskio.c **** 
 142:../Sources/ff10b/src/diskio.c **** 		return stat;
 143:../Sources/ff10b/src/diskio.c **** 
 144:../Sources/ff10b/src/diskio.c **** 	case USB :
 145:../Sources/ff10b/src/diskio.c **** 		result = USB_disk_status();
 146:../Sources/ff10b/src/diskio.c **** 
 147:../Sources/ff10b/src/diskio.c **** 		// translate the reslut code here
 148:../Sources/ff10b/src/diskio.c **** 
 149:../Sources/ff10b/src/diskio.c **** 		return stat;
 150:../Sources/ff10b/src/diskio.c **** 	}
 151:../Sources/ff10b/src/diskio.c **** */
 152:../Sources/ff10b/src/diskio.c **** //	if (pdrv) return STA_NOINIT();
 153:../Sources/ff10b/src/diskio.c **** //	return STA_NOINIT;
 154:../Sources/ff10b/src/diskio.c **** 	return 0;
 306              		.loc 1 154 0
 307 00f2 4FF00003 		mov	r3, #0
 155:../Sources/ff10b/src/diskio.c **** }
 308              		.loc 1 155 0
 309 00f6 1846     		mov	r0, r3
 310 00f8 07F10C07 		add	r7, r7, #12
 311 00fc BD46     		mov	sp, r7
 312 00fe 80BC     		pop	{r7}
 313 0100 7047     		bx	lr
 314              		.cfi_endproc
 315              	.LFE4:
 317 0102 00BF     		.align	2
 318              		.global	disk_read
 319              		.thumb
 320              		.thumb_func
 322              	disk_read:
 323              	.LFB5:
 156:../Sources/ff10b/src/diskio.c **** 
 157:../Sources/ff10b/src/diskio.c **** 
 158:../Sources/ff10b/src/diskio.c **** 
 159:../Sources/ff10b/src/diskio.c **** /*-----------------------------------------------------------------------*/
 160:../Sources/ff10b/src/diskio.c **** /* Read Sector(s)                                                        */
 161:../Sources/ff10b/src/diskio.c **** /*-----------------------------------------------------------------------*/
 162:../Sources/ff10b/src/diskio.c **** 
 163:../Sources/ff10b/src/diskio.c **** DRESULT disk_read (
 164:../Sources/ff10b/src/diskio.c **** 	BYTE pdrv,		/* Physical drive nmuber (0..) */
 165:../Sources/ff10b/src/diskio.c **** 	BYTE *buff,		/* Data buffer to store read data */
 166:../Sources/ff10b/src/diskio.c **** 	DWORD sector,	/* Sector address (LBA) */
 167:../Sources/ff10b/src/diskio.c **** 	UINT count		/* Number of sectors to read (1..128) */
 168:../Sources/ff10b/src/diskio.c **** )
 169:../Sources/ff10b/src/diskio.c **** {
 324              		.loc 1 169 0
 325              		.cfi_startproc
 326              		@ args = 0, pretend = 0, frame = 24
 327              		@ frame_needed = 1, uses_anonymous_args = 0
 328 0104 80B5     		push	{r7, lr}
 329              	.LCFI13:
 330              		.cfi_def_cfa_offset 8
 331              		.cfi_offset 7, -8
 332              		.cfi_offset 14, -4
 333 0106 86B0     		sub	sp, sp, #24
 334              	.LCFI14:
 335              		.cfi_def_cfa_offset 32
 336 0108 00AF     		add	r7, sp, #0
 337              	.LCFI15:
 338              		.cfi_def_cfa_register 7
 339 010a B960     		str	r1, [r7, #8]
 340 010c 7A60     		str	r2, [r7, #4]
 341 010e 3B60     		str	r3, [r7, #0]
 342 0110 0346     		mov	r3, r0
 343 0112 FB73     		strb	r3, [r7, #15]
 170:../Sources/ff10b/src/diskio.c **** 	
 171:../Sources/ff10b/src/diskio.c **** 	BYTE cmd;
 172:../Sources/ff10b/src/diskio.c **** 
 173:../Sources/ff10b/src/diskio.c **** 
 174:../Sources/ff10b/src/diskio.c **** 	if (pdrv || !count) return RES_PARERR;
 344              		.loc 1 174 0
 345 0114 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 346 0116 002B     		cmp	r3, #0
 347 0118 02D1     		bne	.L15
 348              		.loc 1 174 0 is_stmt 0 discriminator 2
 349 011a 3B68     		ldr	r3, [r7, #0]
 350 011c 002B     		cmp	r3, #0
 351 011e 02D1     		bne	.L16
 352              	.L15:
 353              		.loc 1 174 0 discriminator 1
 354 0120 4FF00403 		mov	r3, #4
 355 0124 39E0     		b	.L17
 356              	.L16:
 175:../Sources/ff10b/src/diskio.c **** //	if (Stat & STA_NOINIT) return RES_NOTRDY;
 176:../Sources/ff10b/src/diskio.c **** 
 177:../Sources/ff10b/src/diskio.c **** 	sector *= 512;	/* Convert to byte address if needed if (!(CardType & CT_BLOCK)) sector *= 512; */
 357              		.loc 1 177 0 is_stmt 1
 358 0126 7B68     		ldr	r3, [r7, #4]
 359 0128 4FEA4323 		lsl	r3, r3, #9
 360 012c 7B60     		str	r3, [r7, #4]
 178:../Sources/ff10b/src/diskio.c **** 
 179:../Sources/ff10b/src/diskio.c **** 	cmd = count > 1 ? SD1_CMD18 : SD1_CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
 361              		.loc 1 179 0
 362 012e 3B68     		ldr	r3, [r7, #0]
 363 0130 012B     		cmp	r3, #1
 364 0132 02D9     		bls	.L18
 365              		.loc 1 179 0 is_stmt 0 discriminator 1
 366 0134 4FF05203 		mov	r3, #82
 367 0138 01E0     		b	.L19
 368              	.L18:
 369              		.loc 1 179 0 discriminator 2
 370 013a 4FF05103 		mov	r3, #81
 371              	.L19:
 372              		.loc 1 179 0 discriminator 3
 373 013e FB75     		strb	r3, [r7, #23]
 180:../Sources/ff10b/src/diskio.c **** 	if (command(cmd, sector) == 0) {
 374              		.loc 1 180 0 is_stmt 1 discriminator 3
 375 0140 7B68     		ldr	r3, [r7, #4]
 376 0142 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 377 0144 1046     		mov	r0, r2
 378 0146 1946     		mov	r1, r3
 379 0148 FFF7FEFF 		bl	command
 380 014c 0346     		mov	r3, r0
 381 014e 002B     		cmp	r3, #0
 382 0150 1DD1     		bne	.L20
 383              	.L23:
 181:../Sources/ff10b/src/diskio.c **** 		do {
 182:../Sources/ff10b/src/diskio.c **** 			if (!read(buff, 512)) break;
 384              		.loc 1 182 0
 385 0152 B868     		ldr	r0, [r7, #8]
 386 0154 4FF40071 		mov	r1, #512
 387 0158 FFF7FEFF 		bl	read
 388 015c 0346     		mov	r3, r0
 389 015e 002B     		cmp	r3, #0
 390 0160 0BD0     		beq	.L24
 391              	.L21:
 183:../Sources/ff10b/src/diskio.c **** 			buff += 512;
 392              		.loc 1 183 0
 393 0162 BB68     		ldr	r3, [r7, #8]
 394 0164 03F50073 		add	r3, r3, #512
 395 0168 BB60     		str	r3, [r7, #8]
 184:../Sources/ff10b/src/diskio.c **** 		} while (--count);
 396              		.loc 1 184 0
 397 016a 3B68     		ldr	r3, [r7, #0]
 398 016c 03F1FF33 		add	r3, r3, #-1
 399 0170 3B60     		str	r3, [r7, #0]
 400 0172 3B68     		ldr	r3, [r7, #0]
 401 0174 002B     		cmp	r3, #0
 402 0176 ECD1     		bne	.L23
 403 0178 00E0     		b	.L22
 404              	.L24:
 182:../Sources/ff10b/src/diskio.c **** 			if (!read(buff, 512)) break;
 405              		.loc 1 182 0
 406 017a 00BF     		nop
 407              	.L22:
 185:../Sources/ff10b/src/diskio.c **** 		if (cmd == SD1_CMD18) command(SD1_CMD12, 0);	/* STOP_TRANSMISSION */
 408              		.loc 1 185 0
 409 017c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 410 017e 522B     		cmp	r3, #82
 411 0180 05D1     		bne	.L20
 412              		.loc 1 185 0 is_stmt 0 discriminator 1
 413 0182 4FF04C00 		mov	r0, #76
 414 0186 4FF00001 		mov	r1, #0
 415 018a FFF7FEFF 		bl	command
 416              	.L20:
 186:../Sources/ff10b/src/diskio.c **** 	}
 187:../Sources/ff10b/src/diskio.c **** //	deselect();
 188:../Sources/ff10b/src/diskio.c **** 
 189:../Sources/ff10b/src/diskio.c **** 	return count ? RES_ERROR : RES_OK;
 417              		.loc 1 189 0 is_stmt 1
 418 018e 3B68     		ldr	r3, [r7, #0]
 419 0190 002B     		cmp	r3, #0
 420 0192 0CBF     		ite	eq
 421 0194 0023     		moveq	r3, #0
 422 0196 0123     		movne	r3, #1
 423 0198 DBB2     		uxtb	r3, r3
 424              	.L17:
 190:../Sources/ff10b/src/diskio.c **** 
 191:../Sources/ff10b/src/diskio.c **** /*
 192:../Sources/ff10b/src/diskio.c **** 	switch (pdrv) {
 193:../Sources/ff10b/src/diskio.c **** 	case ATA :
 194:../Sources/ff10b/src/diskio.c **** 		// translate the arguments here
 195:../Sources/ff10b/src/diskio.c **** 
 196:../Sources/ff10b/src/diskio.c **** 		result = ATA_disk_read(buff, sector, count);
 197:../Sources/ff10b/src/diskio.c **** 
 198:../Sources/ff10b/src/diskio.c **** 		// translate the reslut code here
 199:../Sources/ff10b/src/diskio.c **** 
 200:../Sources/ff10b/src/diskio.c **** 		return res;
 201:../Sources/ff10b/src/diskio.c **** 
 202:../Sources/ff10b/src/diskio.c **** 	case MMC :
 203:../Sources/ff10b/src/diskio.c **** 		// translate the arguments here
 204:../Sources/ff10b/src/diskio.c **** 
 205:../Sources/ff10b/src/diskio.c **** 		result = MMC_disk_read(buff, sector, count);
 206:../Sources/ff10b/src/diskio.c **** 
 207:../Sources/ff10b/src/diskio.c **** 		// translate the reslut code here
 208:../Sources/ff10b/src/diskio.c **** 
 209:../Sources/ff10b/src/diskio.c **** 		return res;
 210:../Sources/ff10b/src/diskio.c **** 
 211:../Sources/ff10b/src/diskio.c **** 	case USB :
 212:../Sources/ff10b/src/diskio.c **** 		// translate the arguments here
 213:../Sources/ff10b/src/diskio.c **** 
 214:../Sources/ff10b/src/diskio.c **** 		result = USB_disk_read(buff, sector, count);
 215:../Sources/ff10b/src/diskio.c **** 
 216:../Sources/ff10b/src/diskio.c **** 		// translate the reslut code here
 217:../Sources/ff10b/src/diskio.c **** 
 218:../Sources/ff10b/src/diskio.c **** 		return res;
 219:../Sources/ff10b/src/diskio.c **** 	}
 220:../Sources/ff10b/src/diskio.c **** */
 221:../Sources/ff10b/src/diskio.c **** 	return RES_PARERR;
 222:../Sources/ff10b/src/diskio.c **** }
 425              		.loc 1 222 0
 426 019a 1846     		mov	r0, r3
 427 019c 07F11807 		add	r7, r7, #24
 428 01a0 BD46     		mov	sp, r7
 429 01a2 80BD     		pop	{r7, pc}
 430              		.cfi_endproc
 431              	.LFE5:
 433              		.align	2
 434              		.global	disk_write
 435              		.thumb
 436              		.thumb_func
 438              	disk_write:
 439              	.LFB6:
 223:../Sources/ff10b/src/diskio.c **** 
 224:../Sources/ff10b/src/diskio.c **** 
 225:../Sources/ff10b/src/diskio.c **** 
 226:../Sources/ff10b/src/diskio.c **** /*-----------------------------------------------------------------------*/
 227:../Sources/ff10b/src/diskio.c **** /* Write Sector(s)                                                       */
 228:../Sources/ff10b/src/diskio.c **** /*-----------------------------------------------------------------------*/
 229:../Sources/ff10b/src/diskio.c **** 
 230:../Sources/ff10b/src/diskio.c **** #if _USE_WRITE
 231:../Sources/ff10b/src/diskio.c **** DRESULT disk_write (
 232:../Sources/ff10b/src/diskio.c **** 	BYTE pdrv,			/* Physical drive nmuber (0..) */
 233:../Sources/ff10b/src/diskio.c **** 	const BYTE *buff,	/* Data to be written */
 234:../Sources/ff10b/src/diskio.c **** 	DWORD sector,		/* Sector address (LBA) */
 235:../Sources/ff10b/src/diskio.c **** 	UINT count			/* Number of sectors to write (1..128) */
 236:../Sources/ff10b/src/diskio.c **** )
 237:../Sources/ff10b/src/diskio.c **** {
 440              		.loc 1 237 0
 441              		.cfi_startproc
 442              		@ args = 0, pretend = 0, frame = 16
 443              		@ frame_needed = 1, uses_anonymous_args = 0
 444 01a4 80B5     		push	{r7, lr}
 445              	.LCFI16:
 446              		.cfi_def_cfa_offset 8
 447              		.cfi_offset 7, -8
 448              		.cfi_offset 14, -4
 449 01a6 84B0     		sub	sp, sp, #16
 450              	.LCFI17:
 451              		.cfi_def_cfa_offset 24
 452 01a8 00AF     		add	r7, sp, #0
 453              	.LCFI18:
 454              		.cfi_def_cfa_register 7
 455 01aa B960     		str	r1, [r7, #8]
 456 01ac 7A60     		str	r2, [r7, #4]
 457 01ae 3B60     		str	r3, [r7, #0]
 458 01b0 0346     		mov	r3, r0
 459 01b2 FB73     		strb	r3, [r7, #15]
 238:../Sources/ff10b/src/diskio.c **** 
 239:../Sources/ff10b/src/diskio.c **** 
 240:../Sources/ff10b/src/diskio.c **** 	if (pdrv || !count) return RES_PARERR;
 460              		.loc 1 240 0
 461 01b4 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 462 01b6 002B     		cmp	r3, #0
 463 01b8 02D1     		bne	.L26
 464              		.loc 1 240 0 is_stmt 0 discriminator 2
 465 01ba 3B68     		ldr	r3, [r7, #0]
 466 01bc 002B     		cmp	r3, #0
 467 01be 02D1     		bne	.L27
 468              	.L26:
 469              		.loc 1 240 0 discriminator 1
 470 01c0 4FF00403 		mov	r3, #4
 471 01c4 53E0     		b	.L28
 472              	.L27:
 241:../Sources/ff10b/src/diskio.c **** //	if (Stat & STA_NOINIT) return RES_NOTRDY;
 242:../Sources/ff10b/src/diskio.c **** //	if (Stat & STA_PROTECT) return RES_WRPRT;
 243:../Sources/ff10b/src/diskio.c **** 
 244:../Sources/ff10b/src/diskio.c **** 	sector *= 512;	/* Convert to byte address if needed if (!(CardType & CT_BLOCK)) sector *= 512; */
 473              		.loc 1 244 0 is_stmt 1
 474 01c6 7B68     		ldr	r3, [r7, #4]
 475 01c8 4FEA4323 		lsl	r3, r3, #9
 476 01cc 7B60     		str	r3, [r7, #4]
 245:../Sources/ff10b/src/diskio.c **** 
 246:../Sources/ff10b/src/diskio.c **** 	if (count == 1) {	/* Single block write */
 477              		.loc 1 246 0
 478 01ce 3B68     		ldr	r3, [r7, #0]
 479 01d0 012B     		cmp	r3, #1
 480 01d2 14D1     		bne	.L29
 247:../Sources/ff10b/src/diskio.c **** 		if ((command(SD1_CMD24, sector) == 0)	/* WRITE_BLOCK */
 481              		.loc 1 247 0
 482 01d4 7B68     		ldr	r3, [r7, #4]
 483 01d6 4FF05800 		mov	r0, #88
 484 01da 1946     		mov	r1, r3
 485 01dc FFF7FEFF 		bl	command
 486 01e0 0346     		mov	r3, r0
 487 01e2 002B     		cmp	r3, #0
 488 01e4 3BD1     		bne	.L30
 248:../Sources/ff10b/src/diskio.c **** 			&& write(buff, 0xFE))
 489              		.loc 1 248 0
 490 01e6 B868     		ldr	r0, [r7, #8]
 491 01e8 4FF0FE01 		mov	r1, #254
 492 01ec FFF7FEFF 		bl	write
 493 01f0 0346     		mov	r3, r0
 494 01f2 002B     		cmp	r3, #0
 495 01f4 33D0     		beq	.L30
 249:../Sources/ff10b/src/diskio.c **** 			count = 0;
 496              		.loc 1 249 0
 497 01f6 4FF00003 		mov	r3, #0
 498 01fa 3B60     		str	r3, [r7, #0]
 499 01fc 2FE0     		b	.L30
 500              	.L29:
 250:../Sources/ff10b/src/diskio.c **** 	}
 251:../Sources/ff10b/src/diskio.c **** 	else {				/* Multiple block write */
 252:../Sources/ff10b/src/diskio.c **** 		command(SD1_ACMD23, count);	//		if (CardType & CT_SDC) send_cmd(ACMD23, count);
 501              		.loc 1 252 0
 502 01fe 3B68     		ldr	r3, [r7, #0]
 503 0200 4FF05700 		mov	r0, #87
 504 0204 1946     		mov	r1, r3
 505 0206 FFF7FEFF 		bl	command
 253:../Sources/ff10b/src/diskio.c **** 		if (command(SD1_CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 506              		.loc 1 253 0
 507 020a 7B68     		ldr	r3, [r7, #4]
 508 020c 4FF05900 		mov	r0, #89
 509 0210 1946     		mov	r1, r3
 510 0212 FFF7FEFF 		bl	command
 511 0216 0346     		mov	r3, r0
 512 0218 002B     		cmp	r3, #0
 513 021a 20D1     		bne	.L30
 514              	.L33:
 254:../Sources/ff10b/src/diskio.c **** 			do {
 255:../Sources/ff10b/src/diskio.c **** 				if (!write(buff, 0xFC)) break;
 515              		.loc 1 255 0
 516 021c B868     		ldr	r0, [r7, #8]
 517 021e 4FF0FC01 		mov	r1, #252
 518 0222 FFF7FEFF 		bl	write
 519 0226 0346     		mov	r3, r0
 520 0228 002B     		cmp	r3, #0
 521 022a 0BD0     		beq	.L34
 522              	.L31:
 256:../Sources/ff10b/src/diskio.c **** 				buff += 512;
 523              		.loc 1 256 0
 524 022c BB68     		ldr	r3, [r7, #8]
 525 022e 03F50073 		add	r3, r3, #512
 526 0232 BB60     		str	r3, [r7, #8]
 257:../Sources/ff10b/src/diskio.c **** 			} while (--count);
 527              		.loc 1 257 0
 528 0234 3B68     		ldr	r3, [r7, #0]
 529 0236 03F1FF33 		add	r3, r3, #-1
 530 023a 3B60     		str	r3, [r7, #0]
 531 023c 3B68     		ldr	r3, [r7, #0]
 532 023e 002B     		cmp	r3, #0
 533 0240 ECD1     		bne	.L33
 534 0242 00E0     		b	.L32
 535              	.L34:
 255:../Sources/ff10b/src/diskio.c **** 				if (!write(buff, 0xFC)) break;
 536              		.loc 1 255 0
 537 0244 00BF     		nop
 538              	.L32:
 258:../Sources/ff10b/src/diskio.c **** 			if (!write(0, 0xFD))	/* STOP_TRAN token */
 539              		.loc 1 258 0
 540 0246 4FF00000 		mov	r0, #0
 541 024a 4FF0FD01 		mov	r1, #253
 542 024e FFF7FEFF 		bl	write
 543 0252 0346     		mov	r3, r0
 544 0254 002B     		cmp	r3, #0
 545 0256 02D1     		bne	.L30
 259:../Sources/ff10b/src/diskio.c **** 				count = 1;
 546              		.loc 1 259 0
 547 0258 4FF00103 		mov	r3, #1
 548 025c 3B60     		str	r3, [r7, #0]
 549              	.L30:
 260:../Sources/ff10b/src/diskio.c **** 		}
 261:../Sources/ff10b/src/diskio.c **** 	}
 262:../Sources/ff10b/src/diskio.c **** 	deselect();
 550              		.loc 1 262 0
 551 025e FFF7F9FE 		bl	deselect
 263:../Sources/ff10b/src/diskio.c **** 
 264:../Sources/ff10b/src/diskio.c **** 	return count ? RES_ERROR : RES_OK;
 552              		.loc 1 264 0
 553 0262 3B68     		ldr	r3, [r7, #0]
 554 0264 002B     		cmp	r3, #0
 555 0266 0CBF     		ite	eq
 556 0268 0023     		moveq	r3, #0
 557 026a 0123     		movne	r3, #1
 558 026c DBB2     		uxtb	r3, r3
 559              	.L28:
 265:../Sources/ff10b/src/diskio.c **** }
 560              		.loc 1 265 0
 561 026e 1846     		mov	r0, r3
 562 0270 07F11007 		add	r7, r7, #16
 563 0274 BD46     		mov	sp, r7
 564 0276 80BD     		pop	{r7, pc}
 565              		.cfi_endproc
 566              	.LFE6:
 568              		.align	2
 569              		.global	disk_ioctl
 570              		.thumb
 571              		.thumb_func
 573              	disk_ioctl:
 574              	.LFB7:
 266:../Sources/ff10b/src/diskio.c **** /*
 267:../Sources/ff10b/src/diskio.c **** 	switch (pdrv) {
 268:../Sources/ff10b/src/diskio.c **** 	case ATA :
 269:../Sources/ff10b/src/diskio.c **** 		// translate the arguments here
 270:../Sources/ff10b/src/diskio.c **** 
 271:../Sources/ff10b/src/diskio.c **** 		result = ATA_disk_write(buff, sector, count);
 272:../Sources/ff10b/src/diskio.c **** 
 273:../Sources/ff10b/src/diskio.c **** 		// translate the reslut code here
 274:../Sources/ff10b/src/diskio.c **** 
 275:../Sources/ff10b/src/diskio.c **** 		return res;
 276:../Sources/ff10b/src/diskio.c **** 
 277:../Sources/ff10b/src/diskio.c **** 	case MMC :
 278:../Sources/ff10b/src/diskio.c **** 		// translate the arguments here
 279:../Sources/ff10b/src/diskio.c **** 
 280:../Sources/ff10b/src/diskio.c **** 		result = MMC_disk_write(buff, sector, count);
 281:../Sources/ff10b/src/diskio.c **** 
 282:../Sources/ff10b/src/diskio.c **** 		// translate the reslut code here
 283:../Sources/ff10b/src/diskio.c **** 
 284:../Sources/ff10b/src/diskio.c **** 		return res;
 285:../Sources/ff10b/src/diskio.c **** 
 286:../Sources/ff10b/src/diskio.c **** 	case USB :
 287:../Sources/ff10b/src/diskio.c **** 		// translate the argume nts here
 288:../Sources/ff10b/src/diskio.c **** 
 289:../Sources/ff10b/src/diskio.c **** 		result = USB_disk_write(buff, sector, count);
 290:../Sources/ff10b/src/diskio.c **** 
 291:../Sources/ff10b/src/diskio.c **** 		// translate the reslut code here
 292:../Sources/ff10b/src/diskio.c **** 
 293:../Sources/ff10b/src/diskio.c **** 		return res;
 294:../Sources/ff10b/src/diskio.c **** 	}
 295:../Sources/ff10b/src/diskio.c **** */
 296:../Sources/ff10b/src/diskio.c **** //	return RES_PARERR;
 297:../Sources/ff10b/src/diskio.c **** //}
 298:../Sources/ff10b/src/diskio.c **** #endif
 299:../Sources/ff10b/src/diskio.c **** 
 300:../Sources/ff10b/src/diskio.c **** 
 301:../Sources/ff10b/src/diskio.c **** /*-----------------------------------------------------------------------*/
 302:../Sources/ff10b/src/diskio.c **** /* Miscellaneous Functions                                               */
 303:../Sources/ff10b/src/diskio.c **** /*-----------------------------------------------------------------------*/
 304:../Sources/ff10b/src/diskio.c **** 
 305:../Sources/ff10b/src/diskio.c **** #if _USE_IOCTL
 306:../Sources/ff10b/src/diskio.c **** DRESULT disk_ioctl (
 307:../Sources/ff10b/src/diskio.c **** 	BYTE pdrv,		/* Physical drive nmuber (0..) */
 308:../Sources/ff10b/src/diskio.c **** 	BYTE cmd,		/* Control code */
 309:../Sources/ff10b/src/diskio.c **** 	void *buff		/* Buffer to send/receive control data */
 310:../Sources/ff10b/src/diskio.c **** )
 311:../Sources/ff10b/src/diskio.c **** {
 575              		.loc 1 311 0
 576              		.cfi_startproc
 577              		@ args = 0, pretend = 0, frame = 32
 578              		@ frame_needed = 1, uses_anonymous_args = 0
 579 0278 80B5     		push	{r7, lr}
 580              	.LCFI19:
 581              		.cfi_def_cfa_offset 8
 582              		.cfi_offset 7, -8
 583              		.cfi_offset 14, -4
 584 027a 88B0     		sub	sp, sp, #32
 585              	.LCFI20:
 586              		.cfi_def_cfa_offset 40
 587 027c 00AF     		add	r7, sp, #0
 588              	.LCFI21:
 589              		.cfi_def_cfa_register 7
 590 027e 0B46     		mov	r3, r1
 591 0280 3A60     		str	r2, [r7, #0]
 592 0282 0246     		mov	r2, r0
 593 0284 FA71     		strb	r2, [r7, #7]
 594 0286 BB71     		strb	r3, [r7, #6]
 312:../Sources/ff10b/src/diskio.c **** 
 313:../Sources/ff10b/src/diskio.c **** 
 314:../Sources/ff10b/src/diskio.c **** 	DRESULT res;
 315:../Sources/ff10b/src/diskio.c **** 	BYTE n, csd[16];
 316:../Sources/ff10b/src/diskio.c **** 	DWORD csize;
 317:../Sources/ff10b/src/diskio.c **** 
 318:../Sources/ff10b/src/diskio.c **** 
 319:../Sources/ff10b/src/diskio.c **** 	if (pdrv) return RES_PARERR;
 595              		.loc 1 319 0
 596 0288 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 597 028a 002B     		cmp	r3, #0
 598 028c 02D0     		beq	.L36
 599              		.loc 1 319 0 is_stmt 0 discriminator 1
 600 028e 4FF00403 		mov	r3, #4
 601 0292 B9E0     		b	.L50
 602              	.L36:
 320:../Sources/ff10b/src/diskio.c **** 
 321:../Sources/ff10b/src/diskio.c **** 	res = RES_ERROR;
 603              		.loc 1 321 0 is_stmt 1
 604 0294 4FF00103 		mov	r3, #1
 605 0298 FB77     		strb	r3, [r7, #31]
 322:../Sources/ff10b/src/diskio.c **** 
 323:../Sources/ff10b/src/diskio.c **** //	if (Stat & STA_NOINIT) return RES_NOTRDY;
 324:../Sources/ff10b/src/diskio.c **** 
 325:../Sources/ff10b/src/diskio.c **** 	switch (cmd) {
 606              		.loc 1 325 0
 607 029a BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 608 029c 012B     		cmp	r3, #1
 609 029e 0ED0     		beq	.L40
 610 02a0 032B     		cmp	r3, #3
 611 02a2 71D0     		beq	.L41
 612 02a4 002B     		cmp	r3, #0
 613 02a6 40F0A380 		bne	.L51
 614              	.L39:
 326:../Sources/ff10b/src/diskio.c **** 	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector
 327:../Sources/ff10b/src/diskio.c **** 		if (select()) res = RES_OK;
 615              		.loc 1 327 0
 616 02aa FFF7E7FE 		bl	select
 617 02ae 0346     		mov	r3, r0
 618 02b0 002B     		cmp	r3, #0
 619 02b2 00F0A180 		beq	.L52
 620              		.loc 1 327 0 is_stmt 0 discriminator 1
 621 02b6 4FF00003 		mov	r3, #0
 622 02ba FB77     		strb	r3, [r7, #31]
 328:../Sources/ff10b/src/diskio.c **** 		break;
 623              		.loc 1 328 0 is_stmt 1 discriminator 1
 624 02bc 9CE0     		b	.L52
 625              	.L40:
 329:../Sources/ff10b/src/diskio.c **** 
 330:../Sources/ff10b/src/diskio.c **** 	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
 331:../Sources/ff10b/src/diskio.c **** 		if ((command(SD1_CMD9, 0) == 0) && read(csd, 16)) {
 626              		.loc 1 331 0
 627 02be 4FF04900 		mov	r0, #73
 628 02c2 4FF00001 		mov	r1, #0
 629 02c6 FFF7FEFF 		bl	command
 630 02ca 0346     		mov	r3, r0
 631 02cc 002B     		cmp	r3, #0
 632 02ce 40F09580 		bne	.L53
 633              		.loc 1 331 0 is_stmt 0 discriminator 1
 634 02d2 07F10803 		add	r3, r7, #8
 635 02d6 1846     		mov	r0, r3
 636 02d8 4FF01001 		mov	r1, #16
 637 02dc FFF7FEFF 		bl	read
 638 02e0 0346     		mov	r3, r0
 639 02e2 002B     		cmp	r3, #0
 640 02e4 00F08A80 		beq	.L53
 332:../Sources/ff10b/src/diskio.c **** 			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 641              		.loc 1 332 0 is_stmt 1
 642 02e8 3B7A     		ldrb	r3, [r7, #8]	@ zero_extendqisi2
 643 02ea 4FEA9313 		lsr	r3, r3, #6
 644 02ee DBB2     		uxtb	r3, r3
 645 02f0 012B     		cmp	r3, #1
 646 02f2 15D1     		bne	.L45
 333:../Sources/ff10b/src/diskio.c **** 				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 647              		.loc 1 333 0
 648 02f4 7B7C     		ldrb	r3, [r7, #17]	@ zero_extendqisi2
 649 02f6 1A46     		mov	r2, r3
 650 02f8 3B7C     		ldrb	r3, [r7, #16]	@ zero_extendqisi2
 651 02fa 4FEA0323 		lsl	r3, r3, #8
 652 02fe D318     		adds	r3, r2, r3
 653 0300 1A46     		mov	r2, r3
 654 0302 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 655 0304 03F03F03 		and	r3, r3, #63
 656 0308 4FEA0343 		lsl	r3, r3, #16
 657 030c D318     		adds	r3, r2, r3
 658 030e 03F10103 		add	r3, r3, #1
 659 0312 BB61     		str	r3, [r7, #24]
 334:../Sources/ff10b/src/diskio.c **** 				*(DWORD*)buff = csize << 10;
 660              		.loc 1 334 0
 661 0314 BB69     		ldr	r3, [r7, #24]
 662 0316 4FEA8322 		lsl	r2, r3, #10
 663 031a 3B68     		ldr	r3, [r7, #0]
 664 031c 1A60     		str	r2, [r3, #0]
 665 031e 2FE0     		b	.L46
 666              	.L45:
 335:../Sources/ff10b/src/diskio.c **** 			} else {					/* SDC ver 1.XX or MMC*/
 336:../Sources/ff10b/src/diskio.c **** 				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 667              		.loc 1 336 0
 668 0320 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 669 0322 03F00F03 		and	r3, r3, #15
 670 0326 DAB2     		uxtb	r2, r3
 671 0328 BB7C     		ldrb	r3, [r7, #18]	@ zero_extendqisi2
 672 032a 4FEAD313 		lsr	r3, r3, #7
 673 032e DBB2     		uxtb	r3, r3
 674 0330 D318     		adds	r3, r2, r3
 675 0332 DAB2     		uxtb	r2, r3
 676 0334 7B7C     		ldrb	r3, [r7, #17]	@ zero_extendqisi2
 677 0336 03F00303 		and	r3, r3, #3
 678 033a DBB2     		uxtb	r3, r3
 679 033c 4FEA4303 		lsl	r3, r3, #1
 680 0340 DBB2     		uxtb	r3, r3
 681 0342 D318     		adds	r3, r2, r3
 682 0344 DBB2     		uxtb	r3, r3
 683 0346 03F10203 		add	r3, r3, #2
 684 034a BB77     		strb	r3, [r7, #30]
 337:../Sources/ff10b/src/diskio.c **** 				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 685              		.loc 1 337 0
 686 034c 3B7C     		ldrb	r3, [r7, #16]	@ zero_extendqisi2
 687 034e 4FEA9313 		lsr	r3, r3, #6
 688 0352 DBB2     		uxtb	r3, r3
 689 0354 1A46     		mov	r2, r3
 690 0356 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 691 0358 4FEA8303 		lsl	r3, r3, #2
 692 035c D218     		adds	r2, r2, r3
 693 035e BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 694 0360 03F00303 		and	r3, r3, #3
 695 0364 4FEA8323 		lsl	r3, r3, #10
 696 0368 D318     		adds	r3, r2, r3
 697 036a 03F10103 		add	r3, r3, #1
 698 036e BB61     		str	r3, [r7, #24]
 338:../Sources/ff10b/src/diskio.c **** 				*(DWORD*)buff = csize << (n - 9);
 699              		.loc 1 338 0
 700 0370 BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 701 0372 A3F10903 		sub	r3, r3, #9
 702 0376 BA69     		ldr	r2, [r7, #24]
 703 0378 02FA03F2 		lsl	r2, r2, r3
 704 037c 3B68     		ldr	r3, [r7, #0]
 705 037e 1A60     		str	r2, [r3, #0]
 706              	.L46:
 339:../Sources/ff10b/src/diskio.c **** 			}
 340:../Sources/ff10b/src/diskio.c **** 			res = RES_OK;
 707              		.loc 1 340 0
 708 0380 4FF00003 		mov	r3, #0
 709 0384 FB77     		strb	r3, [r7, #31]
 341:../Sources/ff10b/src/diskio.c **** 		}
 342:../Sources/ff10b/src/diskio.c **** 		break;
 710              		.loc 1 342 0
 711 0386 39E0     		b	.L53
 712              	.L41:
 343:../Sources/ff10b/src/diskio.c **** 
 344:../Sources/ff10b/src/diskio.c **** 	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
 345:../Sources/ff10b/src/diskio.c **** 		if (1) {	/* SDv2? if (CardType & CT_SD2) { */
 346:../Sources/ff10b/src/diskio.c **** 			if (command(SD1_ACMD13, 0) == 0) {	/* Read SD status */
 713              		.loc 1 346 0
 714 0388 4FF04D00 		mov	r0, #77
 715 038c 4FF00001 		mov	r1, #0
 716 0390 FFF7FEFF 		bl	command
 717 0394 0346     		mov	r3, r0
 718 0396 002B     		cmp	r3, #0
 719 0398 32D1     		bne	.L54
 347:../Sources/ff10b/src/diskio.c **** 				spi_send(0xFF);
 720              		.loc 1 347 0
 721 039a 4FF0FF00 		mov	r0, #255
 722 039e FFF7FEFF 		bl	spi_send
 348:../Sources/ff10b/src/diskio.c **** 				if (read(csd, 16)) {				/* Read partial block */
 723              		.loc 1 348 0
 724 03a2 07F10803 		add	r3, r7, #8
 725 03a6 1846     		mov	r0, r3
 726 03a8 4FF01001 		mov	r1, #16
 727 03ac FFF7FEFF 		bl	read
 728 03b0 0346     		mov	r3, r0
 729 03b2 002B     		cmp	r3, #0
 730 03b4 24D0     		beq	.L54
 349:../Sources/ff10b/src/diskio.c **** 					for (n = 64 - 16; n; n--) spi_send(0xFF);	/* Purge trailing data */
 731              		.loc 1 349 0
 732 03b6 4FF03003 		mov	r3, #48
 733 03ba BB77     		strb	r3, [r7, #30]
 734 03bc 07E0     		b	.L48
 735              	.L49:
 736              		.loc 1 349 0 is_stmt 0 discriminator 2
 737 03be 4FF0FF00 		mov	r0, #255
 738 03c2 FFF7FEFF 		bl	spi_send
 739 03c6 BB7F     		ldrb	r3, [r7, #30]
 740 03c8 03F1FF33 		add	r3, r3, #-1
 741 03cc BB77     		strb	r3, [r7, #30]
 742              	.L48:
 743              		.loc 1 349 0 discriminator 1
 744 03ce BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 745 03d0 002B     		cmp	r3, #0
 746 03d2 F4D1     		bne	.L49
 350:../Sources/ff10b/src/diskio.c **** 					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 747              		.loc 1 350 0 is_stmt 1
 748 03d4 BB7C     		ldrb	r3, [r7, #18]	@ zero_extendqisi2
 749 03d6 4FEA1313 		lsr	r3, r3, #4
 750 03da DBB2     		uxtb	r3, r3
 751 03dc 4FF01002 		mov	r2, #16
 752 03e0 02FA03F2 		lsl	r2, r2, r3
 753 03e4 3B68     		ldr	r3, [r7, #0]
 754 03e6 1A60     		str	r2, [r3, #0]
 351:../Sources/ff10b/src/diskio.c **** 					res = RES_OK;
 755              		.loc 1 351 0
 756 03e8 4FF00003 		mov	r3, #0
 757 03ec FB77     		strb	r3, [r7, #31]
 352:../Sources/ff10b/src/diskio.c **** 				}
 353:../Sources/ff10b/src/diskio.c **** 			}
 354:../Sources/ff10b/src/diskio.c **** 		} else {					/* SDv1 or MMCv3 */
 355:../Sources/ff10b/src/diskio.c **** 			if ((command(SD1_CMD9, 0) == 0) && read(csd, 16)) {	/* Read CSD */
 356:../Sources/ff10b/src/diskio.c **** 				if (0) {	/* SDv1 if (CardType & CT_SD1) { */
 357:../Sources/ff10b/src/diskio.c **** 					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) 
 358:../Sources/ff10b/src/diskio.c **** 				} else {					/* MMCv3 */
 359:../Sources/ff10b/src/diskio.c **** 					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) 
 360:../Sources/ff10b/src/diskio.c **** 				}
 361:../Sources/ff10b/src/diskio.c **** 				res = RES_OK;
 362:../Sources/ff10b/src/diskio.c **** 			}
 363:../Sources/ff10b/src/diskio.c **** 		}
 364:../Sources/ff10b/src/diskio.c **** 		break;
 758              		.loc 1 364 0
 759 03ee 07E0     		b	.L54
 760              	.L51:
 365:../Sources/ff10b/src/diskio.c **** 
 366:../Sources/ff10b/src/diskio.c **** 	/* Following commands are never used by FatFs module */
 367:../Sources/ff10b/src/diskio.c **** 
 368:../Sources/ff10b/src/diskio.c **** 
 369:../Sources/ff10b/src/diskio.c **** 
 370:../Sources/ff10b/src/diskio.c **** 
 371:../Sources/ff10b/src/diskio.c **** 
 372:../Sources/ff10b/src/diskio.c **** 
 373:../Sources/ff10b/src/diskio.c **** 
 374:../Sources/ff10b/src/diskio.c **** 	default:
 375:../Sources/ff10b/src/diskio.c **** 		res = RES_PARERR;
 761              		.loc 1 375 0
 762 03f0 4FF00403 		mov	r3, #4
 763 03f4 FB77     		strb	r3, [r7, #31]
 764 03f6 04E0     		b	.L43
 765              	.L52:
 328:../Sources/ff10b/src/diskio.c **** 		break;
 766              		.loc 1 328 0
 767 03f8 00BF     		nop
 768 03fa 02E0     		b	.L43
 769              	.L53:
 342:../Sources/ff10b/src/diskio.c **** 		break;
 770              		.loc 1 342 0
 771 03fc 00BF     		nop
 772 03fe 00E0     		b	.L43
 773              	.L54:
 364:../Sources/ff10b/src/diskio.c **** 		break;
 774              		.loc 1 364 0
 775 0400 00BF     		nop
 776              	.L43:
 376:../Sources/ff10b/src/diskio.c **** 	}
 377:../Sources/ff10b/src/diskio.c **** 
 378:../Sources/ff10b/src/diskio.c **** 	deselect();
 777              		.loc 1 378 0
 778 0402 FFF727FE 		bl	deselect
 379:../Sources/ff10b/src/diskio.c **** 
 380:../Sources/ff10b/src/diskio.c **** 	return res;
 779              		.loc 1 380 0
 780 0406 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 781              	.L50:
 381:../Sources/ff10b/src/diskio.c **** 
 382:../Sources/ff10b/src/diskio.c **** 
 383:../Sources/ff10b/src/diskio.c **** /*
 384:../Sources/ff10b/src/diskio.c **** 	switch (pdrv) {
 385:../Sources/ff10b/src/diskio.c **** 	case ATA :
 386:../Sources/ff10b/src/diskio.c **** 		// pre-process here
 387:../Sources/ff10b/src/diskio.c **** 
 388:../Sources/ff10b/src/diskio.c **** 		result = ATA_disk_ioctl(cmd, buff);
 389:../Sources/ff10b/src/diskio.c **** 
 390:../Sources/ff10b/src/diskio.c **** 		// post-process here
 391:../Sources/ff10b/src/diskio.c **** 
 392:../Sources/ff10b/src/diskio.c **** 		return res;
 393:../Sources/ff10b/src/diskio.c **** 
 394:../Sources/ff10b/src/diskio.c **** 	case MMC :
 395:../Sources/ff10b/src/diskio.c **** 		// pre-process here
 396:../Sources/ff10b/src/diskio.c **** 
 397:../Sources/ff10b/src/diskio.c **** 		result = MMC_disk_ioctl(cmd, buff);
 398:../Sources/ff10b/src/diskio.c **** 
 399:../Sources/ff10b/src/diskio.c **** 		// post-process here
 400:../Sources/ff10b/src/diskio.c **** 
 401:../Sources/ff10b/src/diskio.c **** 		return res;
 402:../Sources/ff10b/src/diskio.c **** 
 403:../Sources/ff10b/src/diskio.c **** 	case USB :
 404:../Sources/ff10b/src/diskio.c **** 		// pre-process here
 405:../Sources/ff10b/src/diskio.c **** 
 406:../Sources/ff10b/src/diskio.c **** 		result = USB_disk_ioctl(cmd, buff);
 407:../Sources/ff10b/src/diskio.c **** 
 408:../Sources/ff10b/src/diskio.c **** 		// post-process here
 409:../Sources/ff10b/src/diskio.c **** 
 410:../Sources/ff10b/src/diskio.c **** 		return res;
 411:../Sources/ff10b/src/diskio.c **** 	}
 412:../Sources/ff10b/src/diskio.c **** */
 413:../Sources/ff10b/src/diskio.c **** 
 414:../Sources/ff10b/src/diskio.c **** 	return RES_PARERR;
 415:../Sources/ff10b/src/diskio.c **** }
 782              		.loc 1 415 0
 783 0408 1846     		mov	r0, r3
 784 040a 07F12007 		add	r7, r7, #32
 785 040e BD46     		mov	sp, r7
 786 0410 80BD     		pop	{r7, pc}
 787              		.cfi_endproc
 788              	.LFE7:
 790              	.Letext0:
 791              		.file 2 "../Sources/ff10b/src/integer.h"
 792              		.file 3 "../Sources/ff10b/src/diskio.h"
 793              		.file 4 "c:\\freescale\\cw mcu v10.6\\cross_tools\\arm-none-eabi-gcc-4_7_3\\bin\\../lib/gcc/arm-no
 794              		.file 5 "E:/saj\341t/quadcopter/quadcopter v2.0/Project_Headers/processor_specific_functions\\K40\
 795              		.file 6 "E:/saj\341t/quadcopter/quadcopter v2.0/Sources/ff10b/src/ff.h"
 796              		.file 7 "E:/saj\341t/quadcopter/quadcopter v2.0/Project_Headers/processor_specific_functions/K40/i
 797              		.file 8 "E:/saj\341t/quadcopter/quadcopter v2.0/Project_Headers/processor_specific_functions/K40/d
 798              		.file 9 "E:/saj\341t/quadcopter/quadcopter v2.0/Project_Headers/interrupts.h"
 799              		.file 10 "E:/saj\341t/quadcopter/quadcopter v2.0/Project_Headers/SDcard.h"
 800              		.file 11 "E:/saj\341t/quadcopter/quadcopter v2.0/Project_Headers/MPU6050.h"
 801              		.file 12 "E:/saj\341t/quadcopter/quadcopter v2.0/Project_Headers/BMP180.h"
DEFINED SYMBOLS
                            *ABS*:00000000 diskio.c
                            *COM*:00000004 I2C_Variable
                            *COM*:00000001 uart_data
                            *COM*:0000003c adc_data
                            *COM*:00000004 Kp
                            *COM*:00000004 Kd
                            *COM*:00000004 Ki
                            *COM*:00000004 zKp
                            *COM*:00000004 zKd
                            *COM*:00000004 basepower
                            *COM*:00000004 setpoint_x
                            *COM*:00000004 setpoint_y
                            *COM*:00000004 setpoint_z
                            *COM*:00000004 setpoint_alt
                            *COM*:00000004 batt1_vol
                            *COM*:00000004 batt2_vol
                            *COM*:00000004 batt3_vol
                            *COM*:00000004 BATT_VOLT
                            *COM*:00000230 FatFs
                            *COM*:00000224 fil
                            *COM*:00000002 GYRO_XOUT_OFFSET
                            *COM*:00000002 GYRO_YOUT_OFFSET
                            *COM*:00000002 GYRO_ZOUT_OFFSET
                            *COM*:00000002 ACCEL_XOUT_OFFSET
                            *COM*:00000002 ACCEL_YOUT_OFFSET
                            *COM*:00000002 ACCEL_ZOUT_OFFSET
                            *COM*:00000004 GYRO_XANGLE
                            *COM*:00000004 GYRO_YANGLE
                            *COM*:00000004 GYRO_ZANGLE
                            *COM*:00000002 GYRO_XOUT
                            *COM*:00000002 GYRO_YOUT
                            *COM*:00000002 GYRO_ZOUT
                            *COM*:00000002 ACCEL_XOUT
                            *COM*:00000002 ACCEL_YOUT
                            *COM*:00000002 ACCEL_ZOUT
                            *COM*:00000004 ACCEL_Gx
                            *COM*:00000004 ACCEL_Gy
                            *COM*:00000004 ACCEL_Gz
                            *COM*:00000008 ACCEL
                            *COM*:00000004 GYRO_XRATE
                            *COM*:00000004 GYRO_YRATE
                            *COM*:00000004 GYRO_ZRATE
                            *COM*:00000004 ACCEL_XANGLE
                            *COM*:00000004 ACCEL_YANGLE
                            *COM*:00000004 gyro_xsensitivity
                            *COM*:00000004 gyro_ysensitivity
                            *COM*:00000004 gyro_zsensitivity
                            *COM*:00000004 a
                            *COM*:00000004 dt
                            *COM*:00000004 COMPLEMENTARY_XANGLE
                            *COM*:00000004 COMPLEMENTARY_YANGLE
                            *COM*:0000000c filter_xterm
                            *COM*:0000000c filter_yterm
                            *COM*:00000004 XANGLE_OFFSET
                            *COM*:00000004 YANGLE_OFFSET
                            *COM*:00000004 TEMP
                            *COM*:00000004 timeConstant
                            *COM*:0000000e MPU_6050_buffer
                            *COM*:00000002 AC1
                            *COM*:00000002 AC2
                            *COM*:00000002 AC3
                            *COM*:00000002 B1
                            *COM*:00000002 B2
                            *COM*:00000002 MB
                            *COM*:00000002 MC
                            *COM*:00000002 MD
                            *COM*:00000002 AC4
                            *COM*:00000002 AC5
                            *COM*:00000002 AC6
                            *COM*:00000004 T
                            *COM*:00000004 absolute_altittude
                            *COM*:00000004 start_altittude
                            *COM*:00000004 relative_altittude
                            *COM*:00000004 P
C:\Users\Norbert\AppData\Local\Temp\cced0I6d.s:91     .text:00000000 $t
C:\Users\Norbert\AppData\Local\Temp\cced0I6d.s:95     .text:00000000 wait_ready
C:\Users\Norbert\AppData\Local\Temp\cced0I6d.s:158    .text:00000054 deselect
C:\Users\Norbert\AppData\Local\Temp\cced0I6d.s:192    .text:0000007c select
C:\Users\Norbert\AppData\Local\Temp\cced0I6d.s:243    .text:000000c0 disk_initialize
C:\Users\Norbert\AppData\Local\Temp\cced0I6d.s:287    .text:000000e8 disk_status
C:\Users\Norbert\AppData\Local\Temp\cced0I6d.s:322    .text:00000104 disk_read
C:\Users\Norbert\AppData\Local\Temp\cced0I6d.s:438    .text:000001a4 disk_write
C:\Users\Norbert\AppData\Local\Temp\cced0I6d.s:573    .text:00000278 disk_ioctl
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.6111752e1bd0a440bd5209819217ec83
                           .group:00000000 wm4.diskio.h.6.8da7330f9b93c43e88f440080fbc00d0
                           .group:00000000 wm4.diskio.h.44.ac23cefcb8014553b02c72363d13065d
                           .group:00000000 wm4.init.h.9.6215b16d96e0eb787ba872245cf7290f
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.95dee4059009fe3ab635a191bb73dc66
                           .group:00000000 wm4.stdio.h.31.f48311dde756a2aec27351b58a280fb9
                           .group:00000000 wm4.stddef.h.187.9e651b6b8b16e149c1353259404973ea
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4._default_types.h.6.1dbd2e581fd590860c7c17f21d147e91
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:00000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:00000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:00000000 wm4.stddef.h.40.cf962ebbec441b3ac67502735f0765db
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.80.1f2c84c0d57dd52dd9936095d9ac218e
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.63.dfdea6580b080784d08faace69b6ed76
                           .group:00000000 wm4.stdarg.h.31.fa591a4b1df9e413e9f5b8097f9ae89d
                           .group:00000000 wm4.string.h.8.ef946ad0bc9ad5c970c365dcd1fc4b0a
                           .group:00000000 wm4.stddef.h.161.e50ff8a9d5d1abbc15641da28ac571bf
                           .group:00000000 wm4.string.h.86.d5c872ff52e2712c985b588a0ef39f3c
                           .group:00000000 wm4.math.h.35.07c7797db9e98c6f49a07908290b45ed
                           .group:00000000 wm4.arm_cm4.h.9.78faaf62d86eb97a647af1ebafb07a11
                           .group:00000000 wm4.SysTick.h.3.6f4da7f8fb96288ed4bbb4cee119df1f
                           .group:00000000 wm4.Clock.h.3.a53d5ed3b11823f56a6aca141130352b
                           .group:00000000 wm4.MK40X256VMD100.h.96.72dc045102cc699ba440f8fa0b280550
                           .group:00000000 wm4.i2c.h.1.3f1b2e4dcc6bdba977be59d8a51e893b
                           .group:00000000 wm4.misc.h.9.baaf43d8702a540222c668d182f75475
                           .group:00000000 wm4.PWM.h.9.e42d58c40ee648255e53f4e4738007a9
                           .group:00000000 wm4.SPI.h.9.60f1cb4029034538da62861db028322d
                           .group:00000000 wm4.ADC.h.9.e7a31df2daef26f2c286655e5d3c10dd
                           .group:00000000 wm4.dma.h.9.96660ff1bef0aa806d84c8ba8408982d
                           .group:00000000 wm4.main.h.9.81396d5b502c9a6873858dab1b488864
                           .group:00000000 wm4.ffconf.h.6.276819a3a49a7ae37f54890eecb94e63
                           .group:00000000 wm4.ff.h.45.a981520ef44c98f5ccd354741039de67
                           .group:00000000 wm4.SDcard.h.13.e5067f919396cc348c323ee4b231e5ee
                           .group:00000000 wm4.MPU6050.h.9.b96a5ef9f24cf228b62beca78b916cfc
                           .group:00000000 wm4.BMP180.h.9.1e786092deac7b246665fc1406fb0f7b

UNDEFINED SYMBOLS
spi_send
init_SDcard
command
read
write
