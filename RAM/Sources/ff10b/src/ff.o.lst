   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"ff.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.bss
  19              		.align	2
  20              	FatFs:
  21 0000 00000000 		.space	4
  22              		.align	1
  23              	Fsid:
  24 0004 0000     		.space	2
  25 0006 0000     		.text
  26              		.align	2
  27              		.thumb
  28              		.thumb_func
  30              	mem_cpy:
  31              	.LFB0:
  32              		.file 1 "../Sources/ff10b/src/ff.c"
   1:../Sources/ff10b/src/ff.c **** /*----------------------------------------------------------------------------/
   2:../Sources/ff10b/src/ff.c **** /  FatFs - FAT file system module  R0.10b                (C)ChaN, 2014
   3:../Sources/ff10b/src/ff.c **** /-----------------------------------------------------------------------------/
   4:../Sources/ff10b/src/ff.c **** / FatFs module is a generic FAT file system module for small embedded systems.
   5:../Sources/ff10b/src/ff.c **** / This is a free software that opened for education, research and commercial
   6:../Sources/ff10b/src/ff.c **** / developments under license policy of following terms.
   7:../Sources/ff10b/src/ff.c **** /
   8:../Sources/ff10b/src/ff.c **** /  Copyright (C) 2014, ChaN, all right reserved.
   9:../Sources/ff10b/src/ff.c **** /
  10:../Sources/ff10b/src/ff.c **** / * The FatFs module is a free software and there is NO WARRANTY.
  11:../Sources/ff10b/src/ff.c **** / * No restriction on use. You can use, modify and redistribute it for
  12:../Sources/ff10b/src/ff.c **** /   personal, non-profit or commercial products UNDER YOUR RESPONSIBILITY.
  13:../Sources/ff10b/src/ff.c **** / * Redistributions of source code must retain the above copyright notice.
  14:../Sources/ff10b/src/ff.c **** /
  15:../Sources/ff10b/src/ff.c **** /-----------------------------------------------------------------------------/
  16:../Sources/ff10b/src/ff.c **** / Feb 26,'06 R0.00  Prototype.
  17:../Sources/ff10b/src/ff.c **** /
  18:../Sources/ff10b/src/ff.c **** / Apr 29,'06 R0.01  First stable version.
  19:../Sources/ff10b/src/ff.c **** /
  20:../Sources/ff10b/src/ff.c **** / Jun 01,'06 R0.02  Added FAT12 support.
  21:../Sources/ff10b/src/ff.c **** /                   Removed unbuffered mode.
  22:../Sources/ff10b/src/ff.c **** /                   Fixed a problem on small (<32M) partition.
  23:../Sources/ff10b/src/ff.c **** / Jun 10,'06 R0.02a Added a configuration option (_FS_MINIMUM).
  24:../Sources/ff10b/src/ff.c **** /
  25:../Sources/ff10b/src/ff.c **** / Sep 22,'06 R0.03  Added f_rename().
  26:../Sources/ff10b/src/ff.c **** /                   Changed option _FS_MINIMUM to _FS_MINIMIZE.
  27:../Sources/ff10b/src/ff.c **** / Dec 11,'06 R0.03a Improved cluster scan algorithm to write files fast.
  28:../Sources/ff10b/src/ff.c **** /                   Fixed f_mkdir() creates incorrect directory on FAT32.
  29:../Sources/ff10b/src/ff.c **** /
  30:../Sources/ff10b/src/ff.c **** / Feb 04,'07 R0.04  Supported multiple drive system.
  31:../Sources/ff10b/src/ff.c **** /                   Changed some interfaces for multiple drive system.
  32:../Sources/ff10b/src/ff.c **** /                   Changed f_mountdrv() to f_mount().
  33:../Sources/ff10b/src/ff.c **** /                   Added f_mkfs().
  34:../Sources/ff10b/src/ff.c **** / Apr 01,'07 R0.04a Supported multiple partitions on a physical drive.
  35:../Sources/ff10b/src/ff.c **** /                   Added a capability of extending file size to f_lseek().
  36:../Sources/ff10b/src/ff.c **** /                   Added minimization level 3.
  37:../Sources/ff10b/src/ff.c **** /                   Fixed an endian sensitive code in f_mkfs().
  38:../Sources/ff10b/src/ff.c **** / May 05,'07 R0.04b Added a configuration option _USE_NTFLAG.
  39:../Sources/ff10b/src/ff.c **** /                   Added FSINFO support.
  40:../Sources/ff10b/src/ff.c **** /                   Fixed DBCS name can result FR_INVALID_NAME.
  41:../Sources/ff10b/src/ff.c **** /                   Fixed short seek (<= csize) collapses the file object.
  42:../Sources/ff10b/src/ff.c **** /
  43:../Sources/ff10b/src/ff.c **** / Aug 25,'07 R0.05  Changed arguments of f_read(), f_write() and f_mkfs().
  44:../Sources/ff10b/src/ff.c **** /                   Fixed f_mkfs() on FAT32 creates incorrect FSINFO.
  45:../Sources/ff10b/src/ff.c **** /                   Fixed f_mkdir() on FAT32 creates incorrect directory.
  46:../Sources/ff10b/src/ff.c **** / Feb 03,'08 R0.05a Added f_truncate() and f_utime().
  47:../Sources/ff10b/src/ff.c **** /                   Fixed off by one error at FAT sub-type determination.
  48:../Sources/ff10b/src/ff.c **** /                   Fixed btr in f_read() can be mistruncated.
  49:../Sources/ff10b/src/ff.c **** /                   Fixed cached sector is not flushed when create and close without write.
  50:../Sources/ff10b/src/ff.c **** /
  51:../Sources/ff10b/src/ff.c **** / Apr 01,'08 R0.06  Added fputc(), fputs(), fprintf() and fgets().
  52:../Sources/ff10b/src/ff.c **** /                   Improved performance of f_lseek() on moving to the same or following cluster.
  53:../Sources/ff10b/src/ff.c **** /
  54:../Sources/ff10b/src/ff.c **** / Apr 01,'09 R0.07  Merged Tiny-FatFs as a configuration option. (_FS_TINY)
  55:../Sources/ff10b/src/ff.c **** /                   Added long file name feature.
  56:../Sources/ff10b/src/ff.c **** /                   Added multiple code page feature.
  57:../Sources/ff10b/src/ff.c **** /                   Added re-entrancy for multitask operation.
  58:../Sources/ff10b/src/ff.c **** /                   Added auto cluster size selection to f_mkfs().
  59:../Sources/ff10b/src/ff.c **** /                   Added rewind option to f_readdir().
  60:../Sources/ff10b/src/ff.c **** /                   Changed result code of critical errors.
  61:../Sources/ff10b/src/ff.c **** /                   Renamed string functions to avoid name collision.
  62:../Sources/ff10b/src/ff.c **** / Apr 14,'09 R0.07a Separated out OS dependent code on reentrant cfg.
  63:../Sources/ff10b/src/ff.c **** /                   Added multiple sector size feature.
  64:../Sources/ff10b/src/ff.c **** / Jun 21,'09 R0.07c Fixed f_unlink() can return FR_OK on error.
  65:../Sources/ff10b/src/ff.c **** /                   Fixed wrong cache control in f_lseek().
  66:../Sources/ff10b/src/ff.c **** /                   Added relative path feature.
  67:../Sources/ff10b/src/ff.c **** /                   Added f_chdir() and f_chdrive().
  68:../Sources/ff10b/src/ff.c **** /                   Added proper case conversion to extended character.
  69:../Sources/ff10b/src/ff.c **** / Nov 03,'09 R0.07e Separated out configuration options from ff.h to ffconf.h.
  70:../Sources/ff10b/src/ff.c **** /                   Fixed f_unlink() fails to remove a sub-directory on _FS_RPATH.
  71:../Sources/ff10b/src/ff.c **** /                   Fixed name matching error on the 13 character boundary.
  72:../Sources/ff10b/src/ff.c **** /                   Added a configuration option, _LFN_UNICODE.
  73:../Sources/ff10b/src/ff.c **** /                   Changed f_readdir() to return the SFN with always upper case on non-LFN cfg.
  74:../Sources/ff10b/src/ff.c **** /
  75:../Sources/ff10b/src/ff.c **** / May 15,'10 R0.08  Added a memory configuration option. (_USE_LFN = 3)
  76:../Sources/ff10b/src/ff.c **** /                   Added file lock feature. (_FS_SHARE)
  77:../Sources/ff10b/src/ff.c **** /                   Added fast seek feature. (_USE_FASTSEEK)
  78:../Sources/ff10b/src/ff.c **** /                   Changed some types on the API, XCHAR->TCHAR.
  79:../Sources/ff10b/src/ff.c **** /                   Changed .fname in the FILINFO structure on Unicode cfg.
  80:../Sources/ff10b/src/ff.c **** /                   String functions support UTF-8 encoding files on Unicode cfg.
  81:../Sources/ff10b/src/ff.c **** / Aug 16,'10 R0.08a Added f_getcwd().
  82:../Sources/ff10b/src/ff.c **** /                   Added sector erase feature. (_USE_ERASE)
  83:../Sources/ff10b/src/ff.c **** /                   Moved file lock semaphore table from fs object to the bss.
  84:../Sources/ff10b/src/ff.c **** /                   Fixed a wrong directory entry is created on non-LFN cfg when the given name con
  85:../Sources/ff10b/src/ff.c **** /                   Fixed f_mkfs() creates wrong FAT32 volume.
  86:../Sources/ff10b/src/ff.c **** / Jan 15,'11 R0.08b Fast seek feature is also applied to f_read() and f_write().
  87:../Sources/ff10b/src/ff.c **** /                   f_lseek() reports required table size on creating CLMP.
  88:../Sources/ff10b/src/ff.c **** /                   Extended format syntax of f_printf().
  89:../Sources/ff10b/src/ff.c **** /                   Ignores duplicated directory separators in given path name.
  90:../Sources/ff10b/src/ff.c **** /
  91:../Sources/ff10b/src/ff.c **** / Sep 06,'11 R0.09  f_mkfs() supports multiple partition to complete the multiple partition feature
  92:../Sources/ff10b/src/ff.c **** /                   Added f_fdisk().
  93:../Sources/ff10b/src/ff.c **** / Aug 27,'12 R0.09a Changed f_open() and f_opendir() reject null object pointer to avoid crash.
  94:../Sources/ff10b/src/ff.c **** /                   Changed option name _FS_SHARE to _FS_LOCK.
  95:../Sources/ff10b/src/ff.c **** /                   Fixed assertion failure due to OS/2 EA on FAT12/16 volume.
  96:../Sources/ff10b/src/ff.c **** / Jan 24,'13 R0.09b Added f_setlabel() and f_getlabel().
  97:../Sources/ff10b/src/ff.c **** /
  98:../Sources/ff10b/src/ff.c **** / Oct 02,'13 R0.10  Added selection of character encoding on the file. (_STRF_ENCODE)
  99:../Sources/ff10b/src/ff.c **** /                   Added f_closedir().
 100:../Sources/ff10b/src/ff.c **** /                   Added forced full FAT scan for f_getfree(). (_FS_NOFSINFO)
 101:../Sources/ff10b/src/ff.c **** /                   Added forced mount feature with changes of f_mount().
 102:../Sources/ff10b/src/ff.c **** /                   Improved behavior of volume auto detection.
 103:../Sources/ff10b/src/ff.c **** /                   Improved write throughput of f_puts() and f_printf().
 104:../Sources/ff10b/src/ff.c **** /                   Changed argument of f_chdrive(), f_mkfs(), disk_read() and disk_write().
 105:../Sources/ff10b/src/ff.c **** /                   Fixed f_write() can be truncated when the file size is close to 4GB.
 106:../Sources/ff10b/src/ff.c **** /                   Fixed f_open(), f_mkdir() and f_setlabel() can return incorrect error code.
 107:../Sources/ff10b/src/ff.c **** / Jan 15,'14 R0.10a Added arbitrary strings as drive number in the path name. (_STR_VOLUME_ID)
 108:../Sources/ff10b/src/ff.c **** /                   Added a configuration option of minimum sector size. (_MIN_SS)
 109:../Sources/ff10b/src/ff.c **** /                   2nd argument of f_rename() can have a drive number and it will be ignored.
 110:../Sources/ff10b/src/ff.c **** /                   Fixed f_mount() with forced mount fails when drive number is >= 1.
 111:../Sources/ff10b/src/ff.c **** /                   Fixed f_close() invalidates the file object without volume lock.
 112:../Sources/ff10b/src/ff.c **** /                   Fixed f_closedir() returns but the volume lock is left acquired.
 113:../Sources/ff10b/src/ff.c **** /                   Fixed creation of an entry with LFN fails on too many SFN collisions.
 114:../Sources/ff10b/src/ff.c **** / May 19,'14 R0.10b Fixed a hard error in the disk I/O layer can collapse the directory entry.
 115:../Sources/ff10b/src/ff.c **** /                   Fixed LFN entry is not deleted on delete/rename an object with lossy converted 
 116:../Sources/ff10b/src/ff.c **** /---------------------------------------------------------------------------*/
 117:../Sources/ff10b/src/ff.c **** 
 118:../Sources/ff10b/src/ff.c **** #include "ff.h"			/* Declarations of FatFs API */
 119:../Sources/ff10b/src/ff.c **** #include "diskio.h"		/* Declarations of disk I/O functions */
 120:../Sources/ff10b/src/ff.c **** 
 121:../Sources/ff10b/src/ff.c **** 
 122:../Sources/ff10b/src/ff.c **** 
 123:../Sources/ff10b/src/ff.c **** 
 124:../Sources/ff10b/src/ff.c **** /*--------------------------------------------------------------------------
 125:../Sources/ff10b/src/ff.c **** 
 126:../Sources/ff10b/src/ff.c ****    Module Private Definitions
 127:../Sources/ff10b/src/ff.c **** 
 128:../Sources/ff10b/src/ff.c **** ---------------------------------------------------------------------------*/
 129:../Sources/ff10b/src/ff.c **** 
 130:../Sources/ff10b/src/ff.c **** #if _FATFS != 8051	/* Revision ID */
 131:../Sources/ff10b/src/ff.c **** #error Wrong include file (ff.h).
 132:../Sources/ff10b/src/ff.c **** #endif
 133:../Sources/ff10b/src/ff.c **** 
 134:../Sources/ff10b/src/ff.c **** 
 135:../Sources/ff10b/src/ff.c **** /* Reentrancy related */
 136:../Sources/ff10b/src/ff.c **** #if _FS_REENTRANT
 137:../Sources/ff10b/src/ff.c **** #if _USE_LFN == 1
 138:../Sources/ff10b/src/ff.c **** #error Static LFN work area cannot be used at thread-safe configuration.
 139:../Sources/ff10b/src/ff.c **** #endif
 140:../Sources/ff10b/src/ff.c **** #define	ENTER_FF(fs)		{ if (!lock_fs(fs)) return FR_TIMEOUT; }
 141:../Sources/ff10b/src/ff.c **** #define	LEAVE_FF(fs, res)	{ unlock_fs(fs, res); return res; }
 142:../Sources/ff10b/src/ff.c **** #else
 143:../Sources/ff10b/src/ff.c **** #define	ENTER_FF(fs)
 144:../Sources/ff10b/src/ff.c **** #define LEAVE_FF(fs, res)	return res
 145:../Sources/ff10b/src/ff.c **** #endif
 146:../Sources/ff10b/src/ff.c **** 
 147:../Sources/ff10b/src/ff.c **** #define	ABORT(fs, res)		{ fp->err = (BYTE)(res); LEAVE_FF(fs, res); }
 148:../Sources/ff10b/src/ff.c **** 
 149:../Sources/ff10b/src/ff.c **** 
 150:../Sources/ff10b/src/ff.c **** /* Definitions of sector size */
 151:../Sources/ff10b/src/ff.c **** #if (_MAX_SS < _MIN_SS) || (_MAX_SS != 512 && _MAX_SS != 1024 && _MAX_SS != 2048 && _MAX_SS != 4096
 152:../Sources/ff10b/src/ff.c **** #error Wrong sector size configuration.
 153:../Sources/ff10b/src/ff.c **** #endif
 154:../Sources/ff10b/src/ff.c **** #if _MAX_SS == _MIN_SS
 155:../Sources/ff10b/src/ff.c **** #define	SS(fs)	((UINT)_MAX_SS)	/* Fixed sector size */
 156:../Sources/ff10b/src/ff.c **** #else
 157:../Sources/ff10b/src/ff.c **** #define	SS(fs)	((fs)->ssize)	/* Variable sector size */
 158:../Sources/ff10b/src/ff.c **** #endif
 159:../Sources/ff10b/src/ff.c **** 
 160:../Sources/ff10b/src/ff.c **** 
 161:../Sources/ff10b/src/ff.c **** /* File access control feature */
 162:../Sources/ff10b/src/ff.c **** #if _FS_LOCK
 163:../Sources/ff10b/src/ff.c **** #if _FS_READONLY
 164:../Sources/ff10b/src/ff.c **** #error _FS_LOCK must be 0 at read-only cfg.
 165:../Sources/ff10b/src/ff.c **** #endif
 166:../Sources/ff10b/src/ff.c **** typedef struct {
 167:../Sources/ff10b/src/ff.c **** 	FATFS *fs;		/* Object ID 1, volume (NULL:blank entry) */
 168:../Sources/ff10b/src/ff.c **** 	DWORD clu;		/* Object ID 2, directory (0:root) */
 169:../Sources/ff10b/src/ff.c **** 	WORD idx;		/* Object ID 3, directory index */
 170:../Sources/ff10b/src/ff.c **** 	WORD ctr;		/* Object open counter, 0:none, 0x01..0xFF:read mode open count, 0x100:write mode */
 171:../Sources/ff10b/src/ff.c **** } FILESEM;
 172:../Sources/ff10b/src/ff.c **** #endif
 173:../Sources/ff10b/src/ff.c **** 
 174:../Sources/ff10b/src/ff.c **** 
 175:../Sources/ff10b/src/ff.c **** 
 176:../Sources/ff10b/src/ff.c **** /* DBCS code ranges and SBCS extend character conversion table */
 177:../Sources/ff10b/src/ff.c **** 
 178:../Sources/ff10b/src/ff.c **** #if _CODE_PAGE == 932	/* Japanese Shift-JIS */
 179:../Sources/ff10b/src/ff.c **** #define _DF1S	0x81	/* DBC 1st byte range 1 start */
 180:../Sources/ff10b/src/ff.c **** #define _DF1E	0x9F	/* DBC 1st byte range 1 end */
 181:../Sources/ff10b/src/ff.c **** #define _DF2S	0xE0	/* DBC 1st byte range 2 start */
 182:../Sources/ff10b/src/ff.c **** #define _DF2E	0xFC	/* DBC 1st byte range 2 end */
 183:../Sources/ff10b/src/ff.c **** #define _DS1S	0x40	/* DBC 2nd byte range 1 start */
 184:../Sources/ff10b/src/ff.c **** #define _DS1E	0x7E	/* DBC 2nd byte range 1 end */
 185:../Sources/ff10b/src/ff.c **** #define _DS2S	0x80	/* DBC 2nd byte range 2 start */
 186:../Sources/ff10b/src/ff.c **** #define _DS2E	0xFC	/* DBC 2nd byte range 2 end */
 187:../Sources/ff10b/src/ff.c **** 
 188:../Sources/ff10b/src/ff.c **** #elif _CODE_PAGE == 936	/* Simplified Chinese GBK */
 189:../Sources/ff10b/src/ff.c **** #define _DF1S	0x81
 190:../Sources/ff10b/src/ff.c **** #define _DF1E	0xFE
 191:../Sources/ff10b/src/ff.c **** #define _DS1S	0x40
 192:../Sources/ff10b/src/ff.c **** #define _DS1E	0x7E
 193:../Sources/ff10b/src/ff.c **** #define _DS2S	0x80
 194:../Sources/ff10b/src/ff.c **** #define _DS2E	0xFE
 195:../Sources/ff10b/src/ff.c **** 
 196:../Sources/ff10b/src/ff.c **** #elif _CODE_PAGE == 949	/* Korean */
 197:../Sources/ff10b/src/ff.c **** #define _DF1S	0x81
 198:../Sources/ff10b/src/ff.c **** #define _DF1E	0xFE
 199:../Sources/ff10b/src/ff.c **** #define _DS1S	0x41
 200:../Sources/ff10b/src/ff.c **** #define _DS1E	0x5A
 201:../Sources/ff10b/src/ff.c **** #define _DS2S	0x61
 202:../Sources/ff10b/src/ff.c **** #define _DS2E	0x7A
 203:../Sources/ff10b/src/ff.c **** #define _DS3S	0x81
 204:../Sources/ff10b/src/ff.c **** #define _DS3E	0xFE
 205:../Sources/ff10b/src/ff.c **** 
 206:../Sources/ff10b/src/ff.c **** #elif _CODE_PAGE == 950	/* Traditional Chinese Big5 */
 207:../Sources/ff10b/src/ff.c **** #define _DF1S	0x81
 208:../Sources/ff10b/src/ff.c **** #define _DF1E	0xFE
 209:../Sources/ff10b/src/ff.c **** #define _DS1S	0x40
 210:../Sources/ff10b/src/ff.c **** #define _DS1E	0x7E
 211:../Sources/ff10b/src/ff.c **** #define _DS2S	0xA1
 212:../Sources/ff10b/src/ff.c **** #define _DS2E	0xFE
 213:../Sources/ff10b/src/ff.c **** 
 214:../Sources/ff10b/src/ff.c **** #elif _CODE_PAGE == 437	/* U.S. (OEM) */
 215:../Sources/ff10b/src/ff.c **** #define _DF1S	0
 216:../Sources/ff10b/src/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F,0x9
 217:../Sources/ff10b/src/ff.c **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 218:../Sources/ff10b/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 219:../Sources/ff10b/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 220:../Sources/ff10b/src/ff.c **** 
 221:../Sources/ff10b/src/ff.c **** #elif _CODE_PAGE == 720	/* Arabic (OEM) */
 222:../Sources/ff10b/src/ff.c **** #define _DF1S	0
 223:../Sources/ff10b/src/ff.c **** #define _EXCVT {0x80,0x81,0x45,0x41,0x84,0x41,0x86,0x43,0x45,0x45,0x45,0x49,0x49,0x8D,0x8E,0x8F,0x9
 224:../Sources/ff10b/src/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 225:../Sources/ff10b/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 226:../Sources/ff10b/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 227:../Sources/ff10b/src/ff.c **** 
 228:../Sources/ff10b/src/ff.c **** #elif _CODE_PAGE == 737	/* Greek (OEM) */
 229:../Sources/ff10b/src/ff.c **** #define _DF1S	0
 230:../Sources/ff10b/src/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 231:../Sources/ff10b/src/ff.c **** 				0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0xAA,0x92,0x93,0x94,0x95,0x96,0xB0,0xB1,0xB2,
 232:../Sources/ff10b/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 233:../Sources/ff10b/src/ff.c **** 				0x97,0xEA,0xEB,0xEC,0xE4,0xED,0xEE,0xE7,0xE8,0xF1,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 234:../Sources/ff10b/src/ff.c **** 
 235:../Sources/ff10b/src/ff.c **** #elif _CODE_PAGE == 775	/* Baltic (OEM) */
 236:../Sources/ff10b/src/ff.c **** #define _DF1S	0
 237:../Sources/ff10b/src/ff.c **** #define _EXCVT {0x80,0x9A,0x91,0xA0,0x8E,0x95,0x8F,0x80,0xAD,0xED,0x8A,0x8A,0xA1,0x8D,0x8E,0x8F,0x9
 238:../Sources/ff10b/src/ff.c **** 				0xA0,0xA1,0xE0,0xA3,0xA3,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 239:../Sources/ff10b/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xB5,0xB6,0xB7,
 240:../Sources/ff10b/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE3,0xE8,0xE8,0xEA,0xEA,0xEE,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 241:../Sources/ff10b/src/ff.c **** 
 242:../Sources/ff10b/src/ff.c **** #elif _CODE_PAGE == 850	/* Multilingual Latin 1 (OEM) */
 243:../Sources/ff10b/src/ff.c **** #define _DF1S	0
 244:../Sources/ff10b/src/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0xDE,0x8E,0x8F,0x9
 245:../Sources/ff10b/src/ff.c **** 				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 246:../Sources/ff10b/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 247:../Sources/ff10b/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE7,0xE9,0xEA,0xEB,0xED,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 248:../Sources/ff10b/src/ff.c **** 
 249:../Sources/ff10b/src/ff.c **** #elif _CODE_PAGE == 852	/* Latin 2 (OEM) */
 250:../Sources/ff10b/src/ff.c **** #define _DF1S	0
 251:../Sources/ff10b/src/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xDE,0x8F,0x80,0x9D,0xD3,0x8A,0x8A,0xD7,0x8D,0x8E,0x8F,0x9
 252:../Sources/ff10b/src/ff.c **** 				0xB5,0xD6,0xE0,0xE9,0xA4,0xA4,0xA6,0xA6,0xA8,0xA8,0xAA,0x8D,0xAC,0xB8,0xAE,0xAF,0xB0,0xB1,0xB2,
 253:../Sources/ff10b/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC6,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD2,
 254:../Sources/ff10b/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE3,0xD5,0xE6,0xE6,0xE8,0xE9,0xE8,0xEB,0xED,0xED,0xDD,0xEF,0xF0,0xF1,0xF2,
 255:../Sources/ff10b/src/ff.c **** 
 256:../Sources/ff10b/src/ff.c **** #elif _CODE_PAGE == 855	/* Cyrillic (OEM) */
 257:../Sources/ff10b/src/ff.c **** #define _DF1S	0
 258:../Sources/ff10b/src/ff.c **** #define _EXCVT {0x81,0x81,0x83,0x83,0x85,0x85,0x87,0x87,0x89,0x89,0x8B,0x8B,0x8D,0x8D,0x8F,0x8F,0x9
 259:../Sources/ff10b/src/ff.c **** 				0xA1,0xA1,0xA3,0xA3,0xA5,0xA5,0xA7,0xA7,0xA9,0xA9,0xAB,0xAB,0xAD,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 260:../Sources/ff10b/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD3,
 261:../Sources/ff10b/src/ff.c **** 				0xE0,0xE2,0xE2,0xE4,0xE4,0xE6,0xE6,0xE8,0xE8,0xEA,0xEA,0xEC,0xEC,0xEE,0xEE,0xEF,0xF0,0xF2,0xF2,
 262:../Sources/ff10b/src/ff.c **** 
 263:../Sources/ff10b/src/ff.c **** #elif _CODE_PAGE == 857	/* Turkish (OEM) */
 264:../Sources/ff10b/src/ff.c **** #define _DF1S	0
 265:../Sources/ff10b/src/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0x98,0x8E,0x8F,0x9
 266:../Sources/ff10b/src/ff.c **** 				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA6,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 267:../Sources/ff10b/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 268:../Sources/ff10b/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xDE,0x59,0xEE,0xEF,0xF0,0xF1,0xF2,
 269:../Sources/ff10b/src/ff.c **** 
 270:../Sources/ff10b/src/ff.c **** #elif _CODE_PAGE == 858	/* Multilingual Latin 1 + Euro (OEM) */
 271:../Sources/ff10b/src/ff.c **** #define _DF1S	0
 272:../Sources/ff10b/src/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0xDE,0x8E,0x8F,0x9
 273:../Sources/ff10b/src/ff.c **** 				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 274:../Sources/ff10b/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD2,
 275:../Sources/ff10b/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE7,0xE9,0xEA,0xEB,0xED,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 276:../Sources/ff10b/src/ff.c **** 
 277:../Sources/ff10b/src/ff.c **** #elif _CODE_PAGE == 862	/* Hebrew (OEM) */
 278:../Sources/ff10b/src/ff.c **** #define _DF1S	0
 279:../Sources/ff10b/src/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 280:../Sources/ff10b/src/ff.c **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,
 281:../Sources/ff10b/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 282:../Sources/ff10b/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 283:../Sources/ff10b/src/ff.c **** 
 284:../Sources/ff10b/src/ff.c **** #elif _CODE_PAGE == 866	/* Russian (OEM) */
 285:../Sources/ff10b/src/ff.c **** #define _DF1S	0
 286:../Sources/ff10b/src/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 287:../Sources/ff10b/src/ff.c **** 				0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0xB0,0xB1,0xB2,
 288:../Sources/ff10b/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 289:../Sources/ff10b/src/ff.c **** 				0x90,0x91,0x92,0x93,0x9d,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F,0xF0,0xF0,0xF2,
 290:../Sources/ff10b/src/ff.c **** 
 291:../Sources/ff10b/src/ff.c **** #elif _CODE_PAGE == 874	/* Thai (OEM, Windows) */
 292:../Sources/ff10b/src/ff.c **** #define _DF1S	0
 293:../Sources/ff10b/src/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 294:../Sources/ff10b/src/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 295:../Sources/ff10b/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 296:../Sources/ff10b/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 297:../Sources/ff10b/src/ff.c **** 
 298:../Sources/ff10b/src/ff.c **** #elif _CODE_PAGE == 1250 /* Central Europe (Windows) */
 299:../Sources/ff10b/src/ff.c **** #define _DF1S	0
 300:../Sources/ff10b/src/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 301:../Sources/ff10b/src/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 302:../Sources/ff10b/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 303:../Sources/ff10b/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 304:../Sources/ff10b/src/ff.c **** 
 305:../Sources/ff10b/src/ff.c **** #elif _CODE_PAGE == 1251 /* Cyrillic (Windows) */
 306:../Sources/ff10b/src/ff.c **** #define _DF1S	0
 307:../Sources/ff10b/src/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x82,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x8
 308:../Sources/ff10b/src/ff.c **** 				0xA0,0xA2,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 309:../Sources/ff10b/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 310:../Sources/ff10b/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 311:../Sources/ff10b/src/ff.c **** 
 312:../Sources/ff10b/src/ff.c **** #elif _CODE_PAGE == 1252 /* Latin 1 (Windows) */
 313:../Sources/ff10b/src/ff.c **** #define _DF1S	0
 314:../Sources/ff10b/src/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 315:../Sources/ff10b/src/ff.c **** 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 316:../Sources/ff10b/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 317:../Sources/ff10b/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 318:../Sources/ff10b/src/ff.c **** 
 319:../Sources/ff10b/src/ff.c **** #elif _CODE_PAGE == 1253 /* Greek (Windows) */
 320:../Sources/ff10b/src/ff.c **** #define _DF1S	0
 321:../Sources/ff10b/src/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 322:../Sources/ff10b/src/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 323:../Sources/ff10b/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 324:../Sources/ff10b/src/ff.c **** 				0xE0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xF2,
 325:../Sources/ff10b/src/ff.c **** 
 326:../Sources/ff10b/src/ff.c **** #elif _CODE_PAGE == 1254 /* Turkish (Windows) */
 327:../Sources/ff10b/src/ff.c **** #define _DF1S	0
 328:../Sources/ff10b/src/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 329:../Sources/ff10b/src/ff.c **** 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 330:../Sources/ff10b/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 331:../Sources/ff10b/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 332:../Sources/ff10b/src/ff.c **** 
 333:../Sources/ff10b/src/ff.c **** #elif _CODE_PAGE == 1255 /* Hebrew (Windows) */
 334:../Sources/ff10b/src/ff.c **** #define _DF1S	0
 335:../Sources/ff10b/src/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 336:../Sources/ff10b/src/ff.c **** 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 337:../Sources/ff10b/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 338:../Sources/ff10b/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,
 339:../Sources/ff10b/src/ff.c **** 
 340:../Sources/ff10b/src/ff.c **** #elif _CODE_PAGE == 1256 /* Arabic (Windows) */
 341:../Sources/ff10b/src/ff.c **** #define _DF1S	0
 342:../Sources/ff10b/src/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 343:../Sources/ff10b/src/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 344:../Sources/ff10b/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 345:../Sources/ff10b/src/ff.c **** 				0x41,0xE1,0x41,0xE3,0xE4,0xE5,0xE6,0x43,0x45,0x45,0x45,0x45,0xEC,0xED,0x49,0x49,0xF0,0xF1,0xF2,
 346:../Sources/ff10b/src/ff.c **** 
 347:../Sources/ff10b/src/ff.c **** #elif _CODE_PAGE == 1257 /* Baltic (Windows) */
 348:../Sources/ff10b/src/ff.c **** #define _DF1S	0
 349:../Sources/ff10b/src/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 350:../Sources/ff10b/src/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 351:../Sources/ff10b/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 352:../Sources/ff10b/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 353:../Sources/ff10b/src/ff.c **** 
 354:../Sources/ff10b/src/ff.c **** #elif _CODE_PAGE == 1258 /* Vietnam (OEM, Windows) */
 355:../Sources/ff10b/src/ff.c **** #define _DF1S	0
 356:../Sources/ff10b/src/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x9
 357:../Sources/ff10b/src/ff.c **** 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,
 358:../Sources/ff10b/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,
 359:../Sources/ff10b/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xEC,0xCD,0xCE,0xCF,0xD0,0xD1,0xF2,
 360:../Sources/ff10b/src/ff.c **** 
 361:../Sources/ff10b/src/ff.c **** #elif _CODE_PAGE == 1	/* ASCII (for only non-LFN cfg) */
 362:../Sources/ff10b/src/ff.c **** #if _USE_LFN
 363:../Sources/ff10b/src/ff.c **** #error Cannot use LFN feature without valid code page.
 364:../Sources/ff10b/src/ff.c **** #endif
 365:../Sources/ff10b/src/ff.c **** #define _DF1S	0
 366:../Sources/ff10b/src/ff.c **** 
 367:../Sources/ff10b/src/ff.c **** #else
 368:../Sources/ff10b/src/ff.c **** #error Unknown code page
 369:../Sources/ff10b/src/ff.c **** 
 370:../Sources/ff10b/src/ff.c **** #endif
 371:../Sources/ff10b/src/ff.c **** 
 372:../Sources/ff10b/src/ff.c **** 
 373:../Sources/ff10b/src/ff.c **** /* Character code support macros */
 374:../Sources/ff10b/src/ff.c **** #define IsUpper(c)	(((c)>='A')&&((c)<='Z'))
 375:../Sources/ff10b/src/ff.c **** #define IsLower(c)	(((c)>='a')&&((c)<='z'))
 376:../Sources/ff10b/src/ff.c **** #define IsDigit(c)	(((c)>='0')&&((c)<='9'))
 377:../Sources/ff10b/src/ff.c **** 
 378:../Sources/ff10b/src/ff.c **** #if _DF1S		/* Code page is DBCS */
 379:../Sources/ff10b/src/ff.c **** 
 380:../Sources/ff10b/src/ff.c **** #ifdef _DF2S	/* Two 1st byte areas */
 381:../Sources/ff10b/src/ff.c **** #define IsDBCS1(c)	(((BYTE)(c) >= _DF1S && (BYTE)(c) <= _DF1E) || ((BYTE)(c) >= _DF2S && (BYTE)(c) 
 382:../Sources/ff10b/src/ff.c **** #else			/* One 1st byte area */
 383:../Sources/ff10b/src/ff.c **** #define IsDBCS1(c)	((BYTE)(c) >= _DF1S && (BYTE)(c) <= _DF1E)
 384:../Sources/ff10b/src/ff.c **** #endif
 385:../Sources/ff10b/src/ff.c **** 
 386:../Sources/ff10b/src/ff.c **** #ifdef _DS3S	/* Three 2nd byte areas */
 387:../Sources/ff10b/src/ff.c **** #define IsDBCS2(c)	(((BYTE)(c) >= _DS1S && (BYTE)(c) <= _DS1E) || ((BYTE)(c) >= _DS2S && (BYTE)(c) 
 388:../Sources/ff10b/src/ff.c **** #else			/* Two 2nd byte areas */
 389:../Sources/ff10b/src/ff.c **** #define IsDBCS2(c)	(((BYTE)(c) >= _DS1S && (BYTE)(c) <= _DS1E) || ((BYTE)(c) >= _DS2S && (BYTE)(c) 
 390:../Sources/ff10b/src/ff.c **** #endif
 391:../Sources/ff10b/src/ff.c **** 
 392:../Sources/ff10b/src/ff.c **** #else			/* Code page is SBCS */
 393:../Sources/ff10b/src/ff.c **** 
 394:../Sources/ff10b/src/ff.c **** #define IsDBCS1(c)	0
 395:../Sources/ff10b/src/ff.c **** #define IsDBCS2(c)	0
 396:../Sources/ff10b/src/ff.c **** 
 397:../Sources/ff10b/src/ff.c **** #endif /* _DF1S */
 398:../Sources/ff10b/src/ff.c **** 
 399:../Sources/ff10b/src/ff.c **** 
 400:../Sources/ff10b/src/ff.c **** /* Name status flags */
 401:../Sources/ff10b/src/ff.c **** #define NS			11		/* Index of name status byte in fn[] */
 402:../Sources/ff10b/src/ff.c **** #define NS_LOSS		0x01	/* Out of 8.3 format */
 403:../Sources/ff10b/src/ff.c **** #define NS_LFN		0x02	/* Force to create LFN entry */
 404:../Sources/ff10b/src/ff.c **** #define NS_LAST		0x04	/* Last segment */
 405:../Sources/ff10b/src/ff.c **** #define NS_BODY		0x08	/* Lower case flag (body) */
 406:../Sources/ff10b/src/ff.c **** #define NS_EXT		0x10	/* Lower case flag (ext) */
 407:../Sources/ff10b/src/ff.c **** #define NS_DOT		0x20	/* Dot entry */
 408:../Sources/ff10b/src/ff.c **** 
 409:../Sources/ff10b/src/ff.c **** 
 410:../Sources/ff10b/src/ff.c **** /* FAT sub-type boundaries */
 411:../Sources/ff10b/src/ff.c **** #define MIN_FAT16	4086U	/* Minimum number of clusters for FAT16 */
 412:../Sources/ff10b/src/ff.c **** #define	MIN_FAT32	65526U	/* Minimum number of clusters for FAT32 */
 413:../Sources/ff10b/src/ff.c **** 
 414:../Sources/ff10b/src/ff.c **** 
 415:../Sources/ff10b/src/ff.c **** /* FatFs refers the members in the FAT structures as byte array instead of
 416:../Sources/ff10b/src/ff.c **** / structure member because the structure is not binary compatible between
 417:../Sources/ff10b/src/ff.c **** / different platforms */
 418:../Sources/ff10b/src/ff.c **** 
 419:../Sources/ff10b/src/ff.c **** #define BS_jmpBoot			0		/* Jump instruction (3) */
 420:../Sources/ff10b/src/ff.c **** #define BS_OEMName			3		/* OEM name (8) */
 421:../Sources/ff10b/src/ff.c **** #define BPB_BytsPerSec		11		/* Sector size [byte] (2) */
 422:../Sources/ff10b/src/ff.c **** #define BPB_SecPerClus		13		/* Cluster size [sector] (1) */
 423:../Sources/ff10b/src/ff.c **** #define BPB_RsvdSecCnt		14		/* Size of reserved area [sector] (2) */
 424:../Sources/ff10b/src/ff.c **** #define BPB_NumFATs			16		/* Number of FAT copies (1) */
 425:../Sources/ff10b/src/ff.c **** #define BPB_RootEntCnt		17		/* Number of root directory entries for FAT12/16 (2) */
 426:../Sources/ff10b/src/ff.c **** #define BPB_TotSec16		19		/* Volume size [sector] (2) */
 427:../Sources/ff10b/src/ff.c **** #define BPB_Media			21		/* Media descriptor (1) */
 428:../Sources/ff10b/src/ff.c **** #define BPB_FATSz16			22		/* FAT size [sector] (2) */
 429:../Sources/ff10b/src/ff.c **** #define BPB_SecPerTrk		24		/* Track size [sector] (2) */
 430:../Sources/ff10b/src/ff.c **** #define BPB_NumHeads		26		/* Number of heads (2) */
 431:../Sources/ff10b/src/ff.c **** #define BPB_HiddSec			28		/* Number of special hidden sectors (4) */
 432:../Sources/ff10b/src/ff.c **** #define BPB_TotSec32		32		/* Volume size [sector] (4) */
 433:../Sources/ff10b/src/ff.c **** #define BS_DrvNum			36		/* Physical drive number (2) */
 434:../Sources/ff10b/src/ff.c **** #define BS_BootSig			38		/* Extended boot signature (1) */
 435:../Sources/ff10b/src/ff.c **** #define BS_VolID			39		/* Volume serial number (4) */
 436:../Sources/ff10b/src/ff.c **** #define BS_VolLab			43		/* Volume label (8) */
 437:../Sources/ff10b/src/ff.c **** #define BS_FilSysType		54		/* File system type (1) */
 438:../Sources/ff10b/src/ff.c **** #define BPB_FATSz32			36		/* FAT size [sector] (4) */
 439:../Sources/ff10b/src/ff.c **** #define BPB_ExtFlags		40		/* Extended flags (2) */
 440:../Sources/ff10b/src/ff.c **** #define BPB_FSVer			42		/* File system version (2) */
 441:../Sources/ff10b/src/ff.c **** #define BPB_RootClus		44		/* Root directory first cluster (4) */
 442:../Sources/ff10b/src/ff.c **** #define BPB_FSInfo			48		/* Offset of FSINFO sector (2) */
 443:../Sources/ff10b/src/ff.c **** #define BPB_BkBootSec		50		/* Offset of backup boot sector (2) */
 444:../Sources/ff10b/src/ff.c **** #define BS_DrvNum32			64		/* Physical drive number (2) */
 445:../Sources/ff10b/src/ff.c **** #define BS_BootSig32		66		/* Extended boot signature (1) */
 446:../Sources/ff10b/src/ff.c **** #define BS_VolID32			67		/* Volume serial number (4) */
 447:../Sources/ff10b/src/ff.c **** #define BS_VolLab32			71		/* Volume label (8) */
 448:../Sources/ff10b/src/ff.c **** #define BS_FilSysType32		82		/* File system type (1) */
 449:../Sources/ff10b/src/ff.c **** #define	FSI_LeadSig			0		/* FSI: Leading signature (4) */
 450:../Sources/ff10b/src/ff.c **** #define	FSI_StrucSig		484		/* FSI: Structure signature (4) */
 451:../Sources/ff10b/src/ff.c **** #define	FSI_Free_Count		488		/* FSI: Number of free clusters (4) */
 452:../Sources/ff10b/src/ff.c **** #define	FSI_Nxt_Free		492		/* FSI: Last allocated cluster (4) */
 453:../Sources/ff10b/src/ff.c **** #define MBR_Table			446		/* MBR: Partition table offset (2) */
 454:../Sources/ff10b/src/ff.c **** #define	SZ_PTE				16		/* MBR: Size of a partition table entry */
 455:../Sources/ff10b/src/ff.c **** #define BS_55AA				510		/* Signature word (2) */
 456:../Sources/ff10b/src/ff.c **** 
 457:../Sources/ff10b/src/ff.c **** #define	DIR_Name			0		/* Short file name (11) */
 458:../Sources/ff10b/src/ff.c **** #define	DIR_Attr			11		/* Attribute (1) */
 459:../Sources/ff10b/src/ff.c **** #define	DIR_NTres			12		/* NT flag (1) */
 460:../Sources/ff10b/src/ff.c **** #define DIR_CrtTimeTenth	13		/* Created time sub-second (1) */
 461:../Sources/ff10b/src/ff.c **** #define	DIR_CrtTime			14		/* Created time (2) */
 462:../Sources/ff10b/src/ff.c **** #define	DIR_CrtDate			16		/* Created date (2) */
 463:../Sources/ff10b/src/ff.c **** #define DIR_LstAccDate		18		/* Last accessed date (2) */
 464:../Sources/ff10b/src/ff.c **** #define	DIR_FstClusHI		20		/* Higher 16-bit of first cluster (2) */
 465:../Sources/ff10b/src/ff.c **** #define	DIR_WrtTime			22		/* Modified time (2) */
 466:../Sources/ff10b/src/ff.c **** #define	DIR_WrtDate			24		/* Modified date (2) */
 467:../Sources/ff10b/src/ff.c **** #define	DIR_FstClusLO		26		/* Lower 16-bit of first cluster (2) */
 468:../Sources/ff10b/src/ff.c **** #define	DIR_FileSize		28		/* File size (4) */
 469:../Sources/ff10b/src/ff.c **** #define	LDIR_Ord			0		/* LFN entry order and LLE flag (1) */
 470:../Sources/ff10b/src/ff.c **** #define	LDIR_Attr			11		/* LFN attribute (1) */
 471:../Sources/ff10b/src/ff.c **** #define	LDIR_Type			12		/* LFN type (1) */
 472:../Sources/ff10b/src/ff.c **** #define	LDIR_Chksum			13		/* Sum of corresponding SFN entry */
 473:../Sources/ff10b/src/ff.c **** #define	LDIR_FstClusLO		26		/* Filled by zero (0) */
 474:../Sources/ff10b/src/ff.c **** #define	SZ_DIR				32		/* Size of a directory entry */
 475:../Sources/ff10b/src/ff.c **** #define	LLE					0x40	/* Last long entry flag in LDIR_Ord */
 476:../Sources/ff10b/src/ff.c **** #define	DDE					0xE5	/* Deleted directory entry mark in DIR_Name[0] */
 477:../Sources/ff10b/src/ff.c **** #define	NDDE				0x05	/* Replacement of the character collides with DDE */
 478:../Sources/ff10b/src/ff.c **** 
 479:../Sources/ff10b/src/ff.c **** 
 480:../Sources/ff10b/src/ff.c **** 
 481:../Sources/ff10b/src/ff.c **** 
 482:../Sources/ff10b/src/ff.c **** /*------------------------------------------------------------*/
 483:../Sources/ff10b/src/ff.c **** /* Module private work area                                   */
 484:../Sources/ff10b/src/ff.c **** /*------------------------------------------------------------*/
 485:../Sources/ff10b/src/ff.c **** /* Note that uninitialized variables with static duration are
 486:../Sources/ff10b/src/ff.c **** /  guaranteed zero/null as initial value. If not, either the
 487:../Sources/ff10b/src/ff.c **** /  linker or start-up routine is out of ANSI-C standard.
 488:../Sources/ff10b/src/ff.c **** */
 489:../Sources/ff10b/src/ff.c **** 
 490:../Sources/ff10b/src/ff.c **** #if _VOLUMES >= 1 || _VOLUMES <= 10
 491:../Sources/ff10b/src/ff.c **** static
 492:../Sources/ff10b/src/ff.c **** FATFS *FatFs[_VOLUMES];		/* Pointer to the file system objects (logical drives) */
 493:../Sources/ff10b/src/ff.c **** #else
 494:../Sources/ff10b/src/ff.c **** #error Number of volumes must be 1 to 10.
 495:../Sources/ff10b/src/ff.c **** #endif
 496:../Sources/ff10b/src/ff.c **** 
 497:../Sources/ff10b/src/ff.c **** static
 498:../Sources/ff10b/src/ff.c **** WORD Fsid;					/* File system mount ID */
 499:../Sources/ff10b/src/ff.c **** 
 500:../Sources/ff10b/src/ff.c **** #if _FS_RPATH && _VOLUMES >= 2
 501:../Sources/ff10b/src/ff.c **** static
 502:../Sources/ff10b/src/ff.c **** BYTE CurrVol;				/* Current drive */
 503:../Sources/ff10b/src/ff.c **** #endif
 504:../Sources/ff10b/src/ff.c **** 
 505:../Sources/ff10b/src/ff.c **** #if _FS_LOCK
 506:../Sources/ff10b/src/ff.c **** static
 507:../Sources/ff10b/src/ff.c **** FILESEM	Files[_FS_LOCK];	/* Open object lock semaphores */
 508:../Sources/ff10b/src/ff.c **** #endif
 509:../Sources/ff10b/src/ff.c **** 
 510:../Sources/ff10b/src/ff.c **** #if _USE_LFN == 0			/* No LFN feature */
 511:../Sources/ff10b/src/ff.c **** #define	DEF_NAMEBUF			BYTE sfn[12]
 512:../Sources/ff10b/src/ff.c **** #define INIT_BUF(dobj)		(dobj).fn = sfn
 513:../Sources/ff10b/src/ff.c **** #define	FREE_BUF()
 514:../Sources/ff10b/src/ff.c **** 
 515:../Sources/ff10b/src/ff.c **** #elif _USE_LFN == 1			/* LFN feature with static working buffer */
 516:../Sources/ff10b/src/ff.c **** static
 517:../Sources/ff10b/src/ff.c **** WCHAR LfnBuf[_MAX_LFN+1];
 518:../Sources/ff10b/src/ff.c **** #define	DEF_NAMEBUF			BYTE sfn[12]
 519:../Sources/ff10b/src/ff.c **** #define INIT_BUF(dobj)		{ (dobj).fn = sfn; (dobj).lfn = LfnBuf; }
 520:../Sources/ff10b/src/ff.c **** #define	FREE_BUF()
 521:../Sources/ff10b/src/ff.c **** 
 522:../Sources/ff10b/src/ff.c **** #elif _USE_LFN == 2 		/* LFN feature with dynamic working buffer on the stack */
 523:../Sources/ff10b/src/ff.c **** #define	DEF_NAMEBUF			BYTE sfn[12]; WCHAR lbuf[_MAX_LFN+1]
 524:../Sources/ff10b/src/ff.c **** #define INIT_BUF(dobj)		{ (dobj).fn = sfn; (dobj).lfn = lbuf; }
 525:../Sources/ff10b/src/ff.c **** #define	FREE_BUF()
 526:../Sources/ff10b/src/ff.c **** 
 527:../Sources/ff10b/src/ff.c **** #elif _USE_LFN == 3 		/* LFN feature with dynamic working buffer on the heap */
 528:../Sources/ff10b/src/ff.c **** #define	DEF_NAMEBUF			BYTE sfn[12]; WCHAR *lfn
 529:../Sources/ff10b/src/ff.c **** #define INIT_BUF(dobj)		{ lfn = ff_memalloc((_MAX_LFN + 1) * 2); \
 530:../Sources/ff10b/src/ff.c **** 							  if (!lfn) LEAVE_FF((dobj).fs, FR_NOT_ENOUGH_CORE); \
 531:../Sources/ff10b/src/ff.c **** 							  (dobj).lfn = lfn;	(dobj).fn = sfn; }
 532:../Sources/ff10b/src/ff.c **** #define	FREE_BUF()			ff_memfree(lfn)
 533:../Sources/ff10b/src/ff.c **** 
 534:../Sources/ff10b/src/ff.c **** #else
 535:../Sources/ff10b/src/ff.c **** #error Wrong LFN configuration.
 536:../Sources/ff10b/src/ff.c **** #endif
 537:../Sources/ff10b/src/ff.c **** 
 538:../Sources/ff10b/src/ff.c **** 
 539:../Sources/ff10b/src/ff.c **** #ifdef _EXCVT
 540:../Sources/ff10b/src/ff.c **** static
 541:../Sources/ff10b/src/ff.c **** const BYTE ExCvt[] = _EXCVT;	/* Upper conversion table for extended characters */
 542:../Sources/ff10b/src/ff.c **** #endif
 543:../Sources/ff10b/src/ff.c **** 
 544:../Sources/ff10b/src/ff.c **** 
 545:../Sources/ff10b/src/ff.c **** 
 546:../Sources/ff10b/src/ff.c **** 
 547:../Sources/ff10b/src/ff.c **** 
 548:../Sources/ff10b/src/ff.c **** 
 549:../Sources/ff10b/src/ff.c **** /*--------------------------------------------------------------------------
 550:../Sources/ff10b/src/ff.c **** 
 551:../Sources/ff10b/src/ff.c ****    Module Private Functions
 552:../Sources/ff10b/src/ff.c **** 
 553:../Sources/ff10b/src/ff.c **** ---------------------------------------------------------------------------*/
 554:../Sources/ff10b/src/ff.c **** 
 555:../Sources/ff10b/src/ff.c **** 
 556:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
 557:../Sources/ff10b/src/ff.c **** /* String functions                                                      */
 558:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
 559:../Sources/ff10b/src/ff.c **** 
 560:../Sources/ff10b/src/ff.c **** /* Copy memory to memory */
 561:../Sources/ff10b/src/ff.c **** static
 562:../Sources/ff10b/src/ff.c **** void mem_cpy (void* dst, const void* src, UINT cnt) {
  33              		.loc 1 562 0
  34              		.cfi_startproc
  35              		@ args = 0, pretend = 0, frame = 24
  36              		@ frame_needed = 1, uses_anonymous_args = 0
  37              		@ link register save eliminated.
  38 0000 80B4     		push	{r7}
  39              	.LCFI0:
  40              		.cfi_def_cfa_offset 4
  41              		.cfi_offset 7, -4
  42 0002 87B0     		sub	sp, sp, #28
  43              	.LCFI1:
  44              		.cfi_def_cfa_offset 32
  45 0004 00AF     		add	r7, sp, #0
  46              	.LCFI2:
  47              		.cfi_def_cfa_register 7
  48 0006 F860     		str	r0, [r7, #12]
  49 0008 B960     		str	r1, [r7, #8]
  50 000a 7A60     		str	r2, [r7, #4]
 563:../Sources/ff10b/src/ff.c **** 	BYTE *d = (BYTE*)dst;
  51              		.loc 1 563 0
  52 000c FB68     		ldr	r3, [r7, #12]
  53 000e 7B61     		str	r3, [r7, #20]
 564:../Sources/ff10b/src/ff.c **** 	const BYTE *s = (const BYTE*)src;
  54              		.loc 1 564 0
  55 0010 BB68     		ldr	r3, [r7, #8]
  56 0012 3B61     		str	r3, [r7, #16]
 565:../Sources/ff10b/src/ff.c **** 
 566:../Sources/ff10b/src/ff.c **** #if _WORD_ACCESS == 1
 567:../Sources/ff10b/src/ff.c **** 	while (cnt >= sizeof (int)) {
 568:../Sources/ff10b/src/ff.c **** 		*(int*)d = *(int*)s;
 569:../Sources/ff10b/src/ff.c **** 		d += sizeof (int); s += sizeof (int);
 570:../Sources/ff10b/src/ff.c **** 		cnt -= sizeof (int);
 571:../Sources/ff10b/src/ff.c **** 	}
 572:../Sources/ff10b/src/ff.c **** #endif
 573:../Sources/ff10b/src/ff.c **** 	while (cnt--)
  57              		.loc 1 573 0
  58 0014 0BE0     		b	.L2
  59              	.L3:
 574:../Sources/ff10b/src/ff.c **** 		*d++ = *s++;
  60              		.loc 1 574 0
  61 0016 3B69     		ldr	r3, [r7, #16]
  62 0018 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
  63 001a 7B69     		ldr	r3, [r7, #20]
  64 001c 1A70     		strb	r2, [r3, #0]
  65 001e 7B69     		ldr	r3, [r7, #20]
  66 0020 03F10103 		add	r3, r3, #1
  67 0024 7B61     		str	r3, [r7, #20]
  68 0026 3B69     		ldr	r3, [r7, #16]
  69 0028 03F10103 		add	r3, r3, #1
  70 002c 3B61     		str	r3, [r7, #16]
  71              	.L2:
 573:../Sources/ff10b/src/ff.c **** 	while (cnt--)
  72              		.loc 1 573 0 discriminator 1
  73 002e 7B68     		ldr	r3, [r7, #4]
  74 0030 002B     		cmp	r3, #0
  75 0032 0CBF     		ite	eq
  76 0034 0023     		moveq	r3, #0
  77 0036 0123     		movne	r3, #1
  78 0038 DBB2     		uxtb	r3, r3
  79 003a 7A68     		ldr	r2, [r7, #4]
  80 003c 02F1FF32 		add	r2, r2, #-1
  81 0040 7A60     		str	r2, [r7, #4]
  82 0042 002B     		cmp	r3, #0
  83 0044 E7D1     		bne	.L3
 575:../Sources/ff10b/src/ff.c **** }
  84              		.loc 1 575 0
  85 0046 07F11C07 		add	r7, r7, #28
  86 004a BD46     		mov	sp, r7
  87 004c 80BC     		pop	{r7}
  88 004e 7047     		bx	lr
  89              		.cfi_endproc
  90              	.LFE0:
  92              		.align	2
  93              		.thumb
  94              		.thumb_func
  96              	mem_set:
  97              	.LFB1:
 576:../Sources/ff10b/src/ff.c **** 
 577:../Sources/ff10b/src/ff.c **** /* Fill memory */
 578:../Sources/ff10b/src/ff.c **** static
 579:../Sources/ff10b/src/ff.c **** void mem_set (void* dst, int val, UINT cnt) {
  98              		.loc 1 579 0
  99              		.cfi_startproc
 100              		@ args = 0, pretend = 0, frame = 24
 101              		@ frame_needed = 1, uses_anonymous_args = 0
 102              		@ link register save eliminated.
 103 0050 80B4     		push	{r7}
 104              	.LCFI3:
 105              		.cfi_def_cfa_offset 4
 106              		.cfi_offset 7, -4
 107 0052 87B0     		sub	sp, sp, #28
 108              	.LCFI4:
 109              		.cfi_def_cfa_offset 32
 110 0054 00AF     		add	r7, sp, #0
 111              	.LCFI5:
 112              		.cfi_def_cfa_register 7
 113 0056 F860     		str	r0, [r7, #12]
 114 0058 B960     		str	r1, [r7, #8]
 115 005a 7A60     		str	r2, [r7, #4]
 580:../Sources/ff10b/src/ff.c **** 	BYTE *d = (BYTE*)dst;
 116              		.loc 1 580 0
 117 005c FB68     		ldr	r3, [r7, #12]
 118 005e 7B61     		str	r3, [r7, #20]
 581:../Sources/ff10b/src/ff.c **** 
 582:../Sources/ff10b/src/ff.c **** 	while (cnt--)
 119              		.loc 1 582 0
 120 0060 07E0     		b	.L5
 121              	.L6:
 583:../Sources/ff10b/src/ff.c **** 		*d++ = (BYTE)val;
 122              		.loc 1 583 0
 123 0062 BB68     		ldr	r3, [r7, #8]
 124 0064 DAB2     		uxtb	r2, r3
 125 0066 7B69     		ldr	r3, [r7, #20]
 126 0068 1A70     		strb	r2, [r3, #0]
 127 006a 7B69     		ldr	r3, [r7, #20]
 128 006c 03F10103 		add	r3, r3, #1
 129 0070 7B61     		str	r3, [r7, #20]
 130              	.L5:
 582:../Sources/ff10b/src/ff.c **** 	while (cnt--)
 131              		.loc 1 582 0 discriminator 1
 132 0072 7B68     		ldr	r3, [r7, #4]
 133 0074 002B     		cmp	r3, #0
 134 0076 0CBF     		ite	eq
 135 0078 0023     		moveq	r3, #0
 136 007a 0123     		movne	r3, #1
 137 007c DBB2     		uxtb	r3, r3
 138 007e 7A68     		ldr	r2, [r7, #4]
 139 0080 02F1FF32 		add	r2, r2, #-1
 140 0084 7A60     		str	r2, [r7, #4]
 141 0086 002B     		cmp	r3, #0
 142 0088 EBD1     		bne	.L6
 584:../Sources/ff10b/src/ff.c **** }
 143              		.loc 1 584 0
 144 008a 07F11C07 		add	r7, r7, #28
 145 008e BD46     		mov	sp, r7
 146 0090 80BC     		pop	{r7}
 147 0092 7047     		bx	lr
 148              		.cfi_endproc
 149              	.LFE1:
 151              		.align	2
 152              		.thumb
 153              		.thumb_func
 155              	mem_cmp:
 156              	.LFB2:
 585:../Sources/ff10b/src/ff.c **** 
 586:../Sources/ff10b/src/ff.c **** /* Compare memory to memory */
 587:../Sources/ff10b/src/ff.c **** static
 588:../Sources/ff10b/src/ff.c **** int mem_cmp (const void* dst, const void* src, UINT cnt) {
 157              		.loc 1 588 0
 158              		.cfi_startproc
 159              		@ args = 0, pretend = 0, frame = 32
 160              		@ frame_needed = 1, uses_anonymous_args = 0
 161              		@ link register save eliminated.
 162 0094 80B4     		push	{r7}
 163              	.LCFI6:
 164              		.cfi_def_cfa_offset 4
 165              		.cfi_offset 7, -4
 166 0096 89B0     		sub	sp, sp, #36
 167              	.LCFI7:
 168              		.cfi_def_cfa_offset 40
 169 0098 00AF     		add	r7, sp, #0
 170              	.LCFI8:
 171              		.cfi_def_cfa_register 7
 172 009a F860     		str	r0, [r7, #12]
 173 009c B960     		str	r1, [r7, #8]
 174 009e 7A60     		str	r2, [r7, #4]
 589:../Sources/ff10b/src/ff.c **** 	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 175              		.loc 1 589 0
 176 00a0 FB68     		ldr	r3, [r7, #12]
 177 00a2 FB61     		str	r3, [r7, #28]
 178 00a4 BB68     		ldr	r3, [r7, #8]
 179 00a6 BB61     		str	r3, [r7, #24]
 590:../Sources/ff10b/src/ff.c **** 	int r = 0;
 180              		.loc 1 590 0
 181 00a8 4FF00003 		mov	r3, #0
 182 00ac 7B61     		str	r3, [r7, #20]
 591:../Sources/ff10b/src/ff.c **** 
 592:../Sources/ff10b/src/ff.c **** 	while (cnt-- && (r = *d++ - *s++) == 0) ;
 183              		.loc 1 592 0
 184 00ae 00BF     		nop
 185              	.L9:
 186              		.loc 1 592 0 is_stmt 0 discriminator 1
 187 00b0 7B68     		ldr	r3, [r7, #4]
 188 00b2 002B     		cmp	r3, #0
 189 00b4 0CBF     		ite	eq
 190 00b6 0023     		moveq	r3, #0
 191 00b8 0123     		movne	r3, #1
 192 00ba DBB2     		uxtb	r3, r3
 193 00bc 7A68     		ldr	r2, [r7, #4]
 194 00be 02F1FF32 		add	r2, r2, #-1
 195 00c2 7A60     		str	r2, [r7, #4]
 196 00c4 002B     		cmp	r3, #0
 197 00c6 16D0     		beq	.L8
 198              		.loc 1 592 0 discriminator 2
 199 00c8 FB69     		ldr	r3, [r7, #28]
 200 00ca 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 201 00cc 1A46     		mov	r2, r3
 202 00ce BB69     		ldr	r3, [r7, #24]
 203 00d0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 204 00d2 D31A     		subs	r3, r2, r3
 205 00d4 7B61     		str	r3, [r7, #20]
 206 00d6 7B69     		ldr	r3, [r7, #20]
 207 00d8 002B     		cmp	r3, #0
 208 00da 14BF     		ite	ne
 209 00dc 0023     		movne	r3, #0
 210 00de 0123     		moveq	r3, #1
 211 00e0 DBB2     		uxtb	r3, r3
 212 00e2 FA69     		ldr	r2, [r7, #28]
 213 00e4 02F10102 		add	r2, r2, #1
 214 00e8 FA61     		str	r2, [r7, #28]
 215 00ea BA69     		ldr	r2, [r7, #24]
 216 00ec 02F10102 		add	r2, r2, #1
 217 00f0 BA61     		str	r2, [r7, #24]
 218 00f2 002B     		cmp	r3, #0
 219 00f4 DCD1     		bne	.L9
 220              	.L8:
 593:../Sources/ff10b/src/ff.c **** 	return r;
 221              		.loc 1 593 0 is_stmt 1
 222 00f6 7B69     		ldr	r3, [r7, #20]
 594:../Sources/ff10b/src/ff.c **** }
 223              		.loc 1 594 0
 224 00f8 1846     		mov	r0, r3
 225 00fa 07F12407 		add	r7, r7, #36
 226 00fe BD46     		mov	sp, r7
 227 0100 80BC     		pop	{r7}
 228 0102 7047     		bx	lr
 229              		.cfi_endproc
 230              	.LFE2:
 232              		.align	2
 233              		.thumb
 234              		.thumb_func
 236              	chk_chr:
 237              	.LFB3:
 595:../Sources/ff10b/src/ff.c **** 
 596:../Sources/ff10b/src/ff.c **** /* Check if chr is contained in the string */
 597:../Sources/ff10b/src/ff.c **** static
 598:../Sources/ff10b/src/ff.c **** int chk_chr (const char* str, int chr) {
 238              		.loc 1 598 0
 239              		.cfi_startproc
 240              		@ args = 0, pretend = 0, frame = 8
 241              		@ frame_needed = 1, uses_anonymous_args = 0
 242              		@ link register save eliminated.
 243 0104 80B4     		push	{r7}
 244              	.LCFI9:
 245              		.cfi_def_cfa_offset 4
 246              		.cfi_offset 7, -4
 247 0106 83B0     		sub	sp, sp, #12
 248              	.LCFI10:
 249              		.cfi_def_cfa_offset 16
 250 0108 00AF     		add	r7, sp, #0
 251              	.LCFI11:
 252              		.cfi_def_cfa_register 7
 253 010a 7860     		str	r0, [r7, #4]
 254 010c 3960     		str	r1, [r7, #0]
 599:../Sources/ff10b/src/ff.c **** 	while (*str && *str != chr) str++;
 255              		.loc 1 599 0
 256 010e 03E0     		b	.L12
 257              	.L14:
 258              		.loc 1 599 0 is_stmt 0 discriminator 1
 259 0110 7B68     		ldr	r3, [r7, #4]
 260 0112 03F10103 		add	r3, r3, #1
 261 0116 7B60     		str	r3, [r7, #4]
 262              	.L12:
 263 0118 7B68     		ldr	r3, [r7, #4]
 264 011a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 265 011c 002B     		cmp	r3, #0
 266 011e 05D0     		beq	.L13
 267              		.loc 1 599 0 discriminator 2
 268 0120 7B68     		ldr	r3, [r7, #4]
 269 0122 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 270 0124 1A46     		mov	r2, r3
 271 0126 3B68     		ldr	r3, [r7, #0]
 272 0128 9A42     		cmp	r2, r3
 273 012a F1D1     		bne	.L14
 274              	.L13:
 600:../Sources/ff10b/src/ff.c **** 	return *str;
 275              		.loc 1 600 0 is_stmt 1
 276 012c 7B68     		ldr	r3, [r7, #4]
 277 012e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 601:../Sources/ff10b/src/ff.c **** }
 278              		.loc 1 601 0
 279 0130 1846     		mov	r0, r3
 280 0132 07F10C07 		add	r7, r7, #12
 281 0136 BD46     		mov	sp, r7
 282 0138 80BC     		pop	{r7}
 283 013a 7047     		bx	lr
 284              		.cfi_endproc
 285              	.LFE3:
 287              		.align	2
 288              		.thumb
 289              		.thumb_func
 291              	sync_window:
 292              	.LFB4:
 602:../Sources/ff10b/src/ff.c **** 
 603:../Sources/ff10b/src/ff.c **** 
 604:../Sources/ff10b/src/ff.c **** 
 605:../Sources/ff10b/src/ff.c **** 
 606:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
 607:../Sources/ff10b/src/ff.c **** /* Request/Release grant to access the volume                            */
 608:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
 609:../Sources/ff10b/src/ff.c **** #if _FS_REENTRANT
 610:../Sources/ff10b/src/ff.c **** static
 611:../Sources/ff10b/src/ff.c **** int lock_fs (
 612:../Sources/ff10b/src/ff.c **** 	FATFS* fs		/* File system object */
 613:../Sources/ff10b/src/ff.c **** )
 614:../Sources/ff10b/src/ff.c **** {
 615:../Sources/ff10b/src/ff.c **** 	return ff_req_grant(fs->sobj);
 616:../Sources/ff10b/src/ff.c **** }
 617:../Sources/ff10b/src/ff.c **** 
 618:../Sources/ff10b/src/ff.c **** 
 619:../Sources/ff10b/src/ff.c **** static
 620:../Sources/ff10b/src/ff.c **** void unlock_fs (
 621:../Sources/ff10b/src/ff.c **** 	FATFS* fs,		/* File system object */
 622:../Sources/ff10b/src/ff.c **** 	FRESULT res		/* Result code to be returned */
 623:../Sources/ff10b/src/ff.c **** )
 624:../Sources/ff10b/src/ff.c **** {
 625:../Sources/ff10b/src/ff.c **** 	if (fs &&
 626:../Sources/ff10b/src/ff.c **** 		res != FR_NOT_ENABLED &&
 627:../Sources/ff10b/src/ff.c **** 		res != FR_INVALID_DRIVE &&
 628:../Sources/ff10b/src/ff.c **** 		res != FR_INVALID_OBJECT &&
 629:../Sources/ff10b/src/ff.c **** 		res != FR_TIMEOUT) {
 630:../Sources/ff10b/src/ff.c **** 		ff_rel_grant(fs->sobj);
 631:../Sources/ff10b/src/ff.c **** 	}
 632:../Sources/ff10b/src/ff.c **** }
 633:../Sources/ff10b/src/ff.c **** #endif
 634:../Sources/ff10b/src/ff.c **** 
 635:../Sources/ff10b/src/ff.c **** 
 636:../Sources/ff10b/src/ff.c **** 
 637:../Sources/ff10b/src/ff.c **** 
 638:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
 639:../Sources/ff10b/src/ff.c **** /* File lock control functions                                           */
 640:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
 641:../Sources/ff10b/src/ff.c **** #if _FS_LOCK
 642:../Sources/ff10b/src/ff.c **** 
 643:../Sources/ff10b/src/ff.c **** static
 644:../Sources/ff10b/src/ff.c **** FRESULT chk_lock (	/* Check if the file can be accessed */
 645:../Sources/ff10b/src/ff.c **** 	DIR* dp,		/* Directory object pointing the file to be checked */
 646:../Sources/ff10b/src/ff.c **** 	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
 647:../Sources/ff10b/src/ff.c **** )
 648:../Sources/ff10b/src/ff.c **** {
 649:../Sources/ff10b/src/ff.c **** 	UINT i, be;
 650:../Sources/ff10b/src/ff.c **** 
 651:../Sources/ff10b/src/ff.c **** 	/* Search file semaphore table */
 652:../Sources/ff10b/src/ff.c **** 	for (i = be = 0; i < _FS_LOCK; i++) {
 653:../Sources/ff10b/src/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 654:../Sources/ff10b/src/ff.c **** 			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 655:../Sources/ff10b/src/ff.c **** 				Files[i].clu == dp->sclust &&
 656:../Sources/ff10b/src/ff.c **** 				Files[i].idx == dp->index) break;
 657:../Sources/ff10b/src/ff.c **** 		} else {			/* Blank entry */
 658:../Sources/ff10b/src/ff.c **** 			be = 1;
 659:../Sources/ff10b/src/ff.c **** 		}
 660:../Sources/ff10b/src/ff.c **** 	}
 661:../Sources/ff10b/src/ff.c **** 	if (i == _FS_LOCK)	/* The object is not opened */
 662:../Sources/ff10b/src/ff.c **** 		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new objec
 663:../Sources/ff10b/src/ff.c **** 
 664:../Sources/ff10b/src/ff.c **** 	/* The object has been opened. Reject any open against writing file and all write mode open */
 665:../Sources/ff10b/src/ff.c **** 	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 666:../Sources/ff10b/src/ff.c **** }
 667:../Sources/ff10b/src/ff.c **** 
 668:../Sources/ff10b/src/ff.c **** 
 669:../Sources/ff10b/src/ff.c **** static
 670:../Sources/ff10b/src/ff.c **** int enq_lock (void)	/* Check if an entry is available for a new object */
 671:../Sources/ff10b/src/ff.c **** {
 672:../Sources/ff10b/src/ff.c **** 	UINT i;
 673:../Sources/ff10b/src/ff.c **** 
 674:../Sources/ff10b/src/ff.c **** 	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 675:../Sources/ff10b/src/ff.c **** 	return (i == _FS_LOCK) ? 0 : 1;
 676:../Sources/ff10b/src/ff.c **** }
 677:../Sources/ff10b/src/ff.c **** 
 678:../Sources/ff10b/src/ff.c **** 
 679:../Sources/ff10b/src/ff.c **** static
 680:../Sources/ff10b/src/ff.c **** UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
 681:../Sources/ff10b/src/ff.c **** 	DIR* dp,	/* Directory object pointing the file to register or increment */
 682:../Sources/ff10b/src/ff.c **** 	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
 683:../Sources/ff10b/src/ff.c **** )
 684:../Sources/ff10b/src/ff.c **** {
 685:../Sources/ff10b/src/ff.c **** 	UINT i;
 686:../Sources/ff10b/src/ff.c **** 
 687:../Sources/ff10b/src/ff.c **** 
 688:../Sources/ff10b/src/ff.c **** 	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 689:../Sources/ff10b/src/ff.c **** 		if (Files[i].fs == dp->fs &&
 690:../Sources/ff10b/src/ff.c **** 			Files[i].clu == dp->sclust &&
 691:../Sources/ff10b/src/ff.c **** 			Files[i].idx == dp->index) break;
 692:../Sources/ff10b/src/ff.c **** 	}
 693:../Sources/ff10b/src/ff.c **** 
 694:../Sources/ff10b/src/ff.c **** 	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 695:../Sources/ff10b/src/ff.c **** 		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 696:../Sources/ff10b/src/ff.c **** 		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 697:../Sources/ff10b/src/ff.c **** 		Files[i].fs = dp->fs;
 698:../Sources/ff10b/src/ff.c **** 		Files[i].clu = dp->sclust;
 699:../Sources/ff10b/src/ff.c **** 		Files[i].idx = dp->index;
 700:../Sources/ff10b/src/ff.c **** 		Files[i].ctr = 0;
 701:../Sources/ff10b/src/ff.c **** 	}
 702:../Sources/ff10b/src/ff.c **** 
 703:../Sources/ff10b/src/ff.c **** 	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 704:../Sources/ff10b/src/ff.c **** 
 705:../Sources/ff10b/src/ff.c **** 	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 706:../Sources/ff10b/src/ff.c **** 
 707:../Sources/ff10b/src/ff.c **** 	return i + 1;
 708:../Sources/ff10b/src/ff.c **** }
 709:../Sources/ff10b/src/ff.c **** 
 710:../Sources/ff10b/src/ff.c **** 
 711:../Sources/ff10b/src/ff.c **** static
 712:../Sources/ff10b/src/ff.c **** FRESULT dec_lock (	/* Decrement object open counter */
 713:../Sources/ff10b/src/ff.c **** 	UINT i			/* Semaphore index (1..) */
 714:../Sources/ff10b/src/ff.c **** )
 715:../Sources/ff10b/src/ff.c **** {
 716:../Sources/ff10b/src/ff.c **** 	WORD n;
 717:../Sources/ff10b/src/ff.c **** 	FRESULT res;
 718:../Sources/ff10b/src/ff.c **** 
 719:../Sources/ff10b/src/ff.c **** 
 720:../Sources/ff10b/src/ff.c **** 	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 721:../Sources/ff10b/src/ff.c **** 		n = Files[i].ctr;
 722:../Sources/ff10b/src/ff.c **** 		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 723:../Sources/ff10b/src/ff.c **** 		if (n) n--;					/* Decrement read mode open count */
 724:../Sources/ff10b/src/ff.c **** 		Files[i].ctr = n;
 725:../Sources/ff10b/src/ff.c **** 		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 726:../Sources/ff10b/src/ff.c **** 		res = FR_OK;
 727:../Sources/ff10b/src/ff.c **** 	} else {
 728:../Sources/ff10b/src/ff.c **** 		res = FR_INT_ERR;			/* Invalid index nunber */
 729:../Sources/ff10b/src/ff.c **** 	}
 730:../Sources/ff10b/src/ff.c **** 	return res;
 731:../Sources/ff10b/src/ff.c **** }
 732:../Sources/ff10b/src/ff.c **** 
 733:../Sources/ff10b/src/ff.c **** 
 734:../Sources/ff10b/src/ff.c **** static
 735:../Sources/ff10b/src/ff.c **** void clear_lock (	/* Clear lock entries of the volume */
 736:../Sources/ff10b/src/ff.c **** 	FATFS *fs
 737:../Sources/ff10b/src/ff.c **** )
 738:../Sources/ff10b/src/ff.c **** {
 739:../Sources/ff10b/src/ff.c **** 	UINT i;
 740:../Sources/ff10b/src/ff.c **** 
 741:../Sources/ff10b/src/ff.c **** 	for (i = 0; i < _FS_LOCK; i++) {
 742:../Sources/ff10b/src/ff.c **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 743:../Sources/ff10b/src/ff.c **** 	}
 744:../Sources/ff10b/src/ff.c **** }
 745:../Sources/ff10b/src/ff.c **** #endif
 746:../Sources/ff10b/src/ff.c **** 
 747:../Sources/ff10b/src/ff.c **** 
 748:../Sources/ff10b/src/ff.c **** 
 749:../Sources/ff10b/src/ff.c **** 
 750:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
 751:../Sources/ff10b/src/ff.c **** /* Move/Flush disk access window in the file system object               */
 752:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
 753:../Sources/ff10b/src/ff.c **** #if !_FS_READONLY
 754:../Sources/ff10b/src/ff.c **** static
 755:../Sources/ff10b/src/ff.c **** FRESULT sync_window (
 756:../Sources/ff10b/src/ff.c **** 	FATFS* fs		/* File system object */
 757:../Sources/ff10b/src/ff.c **** )
 758:../Sources/ff10b/src/ff.c **** {
 293              		.loc 1 758 0
 294              		.cfi_startproc
 295              		@ args = 0, pretend = 0, frame = 16
 296              		@ frame_needed = 1, uses_anonymous_args = 0
 297 013c 80B5     		push	{r7, lr}
 298              	.LCFI12:
 299              		.cfi_def_cfa_offset 8
 300              		.cfi_offset 7, -8
 301              		.cfi_offset 14, -4
 302 013e 84B0     		sub	sp, sp, #16
 303              	.LCFI13:
 304              		.cfi_def_cfa_offset 24
 305 0140 00AF     		add	r7, sp, #0
 306              	.LCFI14:
 307              		.cfi_def_cfa_register 7
 308 0142 7860     		str	r0, [r7, #4]
 759:../Sources/ff10b/src/ff.c **** 	DWORD wsect;
 760:../Sources/ff10b/src/ff.c **** 	UINT nf;
 761:../Sources/ff10b/src/ff.c **** 
 762:../Sources/ff10b/src/ff.c **** 
 763:../Sources/ff10b/src/ff.c **** 	if (fs->wflag) {	/* Write back the sector if it is dirty */
 309              		.loc 1 763 0
 310 0144 7B68     		ldr	r3, [r7, #4]
 311 0146 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 312 0148 002B     		cmp	r3, #0
 313 014a 3CD0     		beq	.L17
 764:../Sources/ff10b/src/ff.c **** 		wsect = fs->winsect;	/* Current sector number */
 314              		.loc 1 764 0
 315 014c 7B68     		ldr	r3, [r7, #4]
 316 014e DB6A     		ldr	r3, [r3, #44]
 317 0150 FB60     		str	r3, [r7, #12]
 765:../Sources/ff10b/src/ff.c **** 		if (disk_write(fs->drv, fs->win, wsect, 1))
 318              		.loc 1 765 0
 319 0152 7B68     		ldr	r3, [r7, #4]
 320 0154 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 321 0156 7B68     		ldr	r3, [r7, #4]
 322 0158 03F13003 		add	r3, r3, #48
 323 015c 1046     		mov	r0, r2
 324 015e 1946     		mov	r1, r3
 325 0160 FA68     		ldr	r2, [r7, #12]
 326 0162 4FF00103 		mov	r3, #1
 327 0166 FFF7FEFF 		bl	disk_write
 328 016a 0346     		mov	r3, r0
 329 016c 002B     		cmp	r3, #0
 330 016e 02D0     		beq	.L18
 766:../Sources/ff10b/src/ff.c **** 			return FR_DISK_ERR;
 331              		.loc 1 766 0
 332 0170 4FF00103 		mov	r3, #1
 333 0174 29E0     		b	.L19
 334              	.L18:
 767:../Sources/ff10b/src/ff.c **** 		fs->wflag = 0;
 335              		.loc 1 767 0
 336 0176 7B68     		ldr	r3, [r7, #4]
 337 0178 4FF00002 		mov	r2, #0
 338 017c 1A71     		strb	r2, [r3, #4]
 768:../Sources/ff10b/src/ff.c **** 		if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 339              		.loc 1 768 0
 340 017e 7B68     		ldr	r3, [r7, #4]
 341 0180 1B6A     		ldr	r3, [r3, #32]
 342 0182 FA68     		ldr	r2, [r7, #12]
 343 0184 D21A     		subs	r2, r2, r3
 344 0186 7B68     		ldr	r3, [r7, #4]
 345 0188 9B69     		ldr	r3, [r3, #24]
 346 018a 9A42     		cmp	r2, r3
 347 018c 1BD2     		bcs	.L17
 769:../Sources/ff10b/src/ff.c **** 			for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 348              		.loc 1 769 0
 349 018e 7B68     		ldr	r3, [r7, #4]
 350 0190 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 351 0192 BB60     		str	r3, [r7, #8]
 352 0194 14E0     		b	.L20
 353              	.L21:
 770:../Sources/ff10b/src/ff.c **** 				wsect += fs->fsize;
 354              		.loc 1 770 0 discriminator 2
 355 0196 7B68     		ldr	r3, [r7, #4]
 356 0198 9B69     		ldr	r3, [r3, #24]
 357 019a FA68     		ldr	r2, [r7, #12]
 358 019c D318     		adds	r3, r2, r3
 359 019e FB60     		str	r3, [r7, #12]
 771:../Sources/ff10b/src/ff.c **** 				disk_write(fs->drv, fs->win, wsect, 1);
 360              		.loc 1 771 0 discriminator 2
 361 01a0 7B68     		ldr	r3, [r7, #4]
 362 01a2 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 363 01a4 7B68     		ldr	r3, [r7, #4]
 364 01a6 03F13003 		add	r3, r3, #48
 365 01aa 1046     		mov	r0, r2
 366 01ac 1946     		mov	r1, r3
 367 01ae FA68     		ldr	r2, [r7, #12]
 368 01b0 4FF00103 		mov	r3, #1
 369 01b4 FFF7FEFF 		bl	disk_write
 769:../Sources/ff10b/src/ff.c **** 			for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 370              		.loc 1 769 0 discriminator 2
 371 01b8 BB68     		ldr	r3, [r7, #8]
 372 01ba 03F1FF33 		add	r3, r3, #-1
 373 01be BB60     		str	r3, [r7, #8]
 374              	.L20:
 769:../Sources/ff10b/src/ff.c **** 			for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 375              		.loc 1 769 0 is_stmt 0 discriminator 1
 376 01c0 BB68     		ldr	r3, [r7, #8]
 377 01c2 012B     		cmp	r3, #1
 378 01c4 E7D8     		bhi	.L21
 379              	.L17:
 772:../Sources/ff10b/src/ff.c **** 			}
 773:../Sources/ff10b/src/ff.c **** 		}
 774:../Sources/ff10b/src/ff.c **** 	}
 775:../Sources/ff10b/src/ff.c **** 	return FR_OK;
 380              		.loc 1 775 0 is_stmt 1
 381 01c6 4FF00003 		mov	r3, #0
 382              	.L19:
 776:../Sources/ff10b/src/ff.c **** }
 383              		.loc 1 776 0
 384 01ca 1846     		mov	r0, r3
 385 01cc 07F11007 		add	r7, r7, #16
 386 01d0 BD46     		mov	sp, r7
 387 01d2 80BD     		pop	{r7, pc}
 388              		.cfi_endproc
 389              	.LFE4:
 391              		.align	2
 392              		.thumb
 393              		.thumb_func
 395              	move_window:
 396              	.LFB5:
 777:../Sources/ff10b/src/ff.c **** #endif
 778:../Sources/ff10b/src/ff.c **** 
 779:../Sources/ff10b/src/ff.c **** 
 780:../Sources/ff10b/src/ff.c **** static
 781:../Sources/ff10b/src/ff.c **** FRESULT move_window (
 782:../Sources/ff10b/src/ff.c **** 	FATFS* fs,		/* File system object */
 783:../Sources/ff10b/src/ff.c **** 	DWORD sector	/* Sector number to make appearance in the fs->win[] */
 784:../Sources/ff10b/src/ff.c **** )
 785:../Sources/ff10b/src/ff.c **** {
 397              		.loc 1 785 0
 398              		.cfi_startproc
 399              		@ args = 0, pretend = 0, frame = 8
 400              		@ frame_needed = 1, uses_anonymous_args = 0
 401 01d4 80B5     		push	{r7, lr}
 402              	.LCFI15:
 403              		.cfi_def_cfa_offset 8
 404              		.cfi_offset 7, -8
 405              		.cfi_offset 14, -4
 406 01d6 82B0     		sub	sp, sp, #8
 407              	.LCFI16:
 408              		.cfi_def_cfa_offset 16
 409 01d8 00AF     		add	r7, sp, #0
 410              	.LCFI17:
 411              		.cfi_def_cfa_register 7
 412 01da 7860     		str	r0, [r7, #4]
 413 01dc 3960     		str	r1, [r7, #0]
 786:../Sources/ff10b/src/ff.c **** 	if (sector != fs->winsect) {	/* Changed current window */
 414              		.loc 1 786 0
 415 01de 7B68     		ldr	r3, [r7, #4]
 416 01e0 DA6A     		ldr	r2, [r3, #44]
 417 01e2 3B68     		ldr	r3, [r7, #0]
 418 01e4 9A42     		cmp	r2, r3
 419 01e6 1DD0     		beq	.L23
 787:../Sources/ff10b/src/ff.c **** #if !_FS_READONLY
 788:../Sources/ff10b/src/ff.c **** 		if (sync_window(fs) != FR_OK)
 420              		.loc 1 788 0
 421 01e8 7868     		ldr	r0, [r7, #4]
 422 01ea FFF7A7FF 		bl	sync_window
 423 01ee 0346     		mov	r3, r0
 424 01f0 002B     		cmp	r3, #0
 425 01f2 02D0     		beq	.L24
 789:../Sources/ff10b/src/ff.c **** 			return FR_DISK_ERR;
 426              		.loc 1 789 0
 427 01f4 4FF00103 		mov	r3, #1
 428 01f8 16E0     		b	.L25
 429              	.L24:
 790:../Sources/ff10b/src/ff.c **** #endif
 791:../Sources/ff10b/src/ff.c **** 		if (disk_read(fs->drv, fs->win, sector, 1))
 430              		.loc 1 791 0
 431 01fa 7B68     		ldr	r3, [r7, #4]
 432 01fc 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 433 01fe 7B68     		ldr	r3, [r7, #4]
 434 0200 03F13003 		add	r3, r3, #48
 435 0204 1046     		mov	r0, r2
 436 0206 1946     		mov	r1, r3
 437 0208 3A68     		ldr	r2, [r7, #0]
 438 020a 4FF00103 		mov	r3, #1
 439 020e FFF7FEFF 		bl	disk_read
 440 0212 0346     		mov	r3, r0
 441 0214 002B     		cmp	r3, #0
 442 0216 02D0     		beq	.L26
 792:../Sources/ff10b/src/ff.c **** 			return FR_DISK_ERR;
 443              		.loc 1 792 0
 444 0218 4FF00103 		mov	r3, #1
 445 021c 04E0     		b	.L25
 446              	.L26:
 793:../Sources/ff10b/src/ff.c **** 		fs->winsect = sector;
 447              		.loc 1 793 0
 448 021e 7B68     		ldr	r3, [r7, #4]
 449 0220 3A68     		ldr	r2, [r7, #0]
 450 0222 DA62     		str	r2, [r3, #44]
 451              	.L23:
 794:../Sources/ff10b/src/ff.c **** 	}
 795:../Sources/ff10b/src/ff.c **** 
 796:../Sources/ff10b/src/ff.c **** 	return FR_OK;
 452              		.loc 1 796 0
 453 0224 4FF00003 		mov	r3, #0
 454              	.L25:
 797:../Sources/ff10b/src/ff.c **** }
 455              		.loc 1 797 0
 456 0228 1846     		mov	r0, r3
 457 022a 07F10807 		add	r7, r7, #8
 458 022e BD46     		mov	sp, r7
 459 0230 80BD     		pop	{r7, pc}
 460              		.cfi_endproc
 461              	.LFE5:
 463 0232 00BF     		.align	2
 464              		.thumb
 465              		.thumb_func
 467              	sync_fs:
 468              	.LFB6:
 798:../Sources/ff10b/src/ff.c **** 
 799:../Sources/ff10b/src/ff.c **** 
 800:../Sources/ff10b/src/ff.c **** 
 801:../Sources/ff10b/src/ff.c **** 
 802:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
 803:../Sources/ff10b/src/ff.c **** /* Synchronize file system and strage device                             */
 804:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
 805:../Sources/ff10b/src/ff.c **** #if !_FS_READONLY
 806:../Sources/ff10b/src/ff.c **** static
 807:../Sources/ff10b/src/ff.c **** FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
 808:../Sources/ff10b/src/ff.c **** 	FATFS* fs		/* File system object */
 809:../Sources/ff10b/src/ff.c **** )
 810:../Sources/ff10b/src/ff.c **** {
 469              		.loc 1 810 0
 470              		.cfi_startproc
 471              		@ args = 0, pretend = 0, frame = 16
 472              		@ frame_needed = 1, uses_anonymous_args = 0
 473 0234 80B5     		push	{r7, lr}
 474              	.LCFI18:
 475              		.cfi_def_cfa_offset 8
 476              		.cfi_offset 7, -8
 477              		.cfi_offset 14, -4
 478 0236 84B0     		sub	sp, sp, #16
 479              	.LCFI19:
 480              		.cfi_def_cfa_offset 24
 481 0238 00AF     		add	r7, sp, #0
 482              	.LCFI20:
 483              		.cfi_def_cfa_register 7
 484 023a 7860     		str	r0, [r7, #4]
 811:../Sources/ff10b/src/ff.c **** 	FRESULT res;
 812:../Sources/ff10b/src/ff.c **** 
 813:../Sources/ff10b/src/ff.c **** 
 814:../Sources/ff10b/src/ff.c **** 	res = sync_window(fs);
 485              		.loc 1 814 0
 486 023c 7868     		ldr	r0, [r7, #4]
 487 023e FFF77DFF 		bl	sync_window
 488 0242 0346     		mov	r3, r0
 489 0244 FB73     		strb	r3, [r7, #15]
 815:../Sources/ff10b/src/ff.c **** 	if (res == FR_OK) {
 490              		.loc 1 815 0
 491 0246 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 492 0248 002B     		cmp	r3, #0
 493 024a 40F0AD80 		bne	.L28
 816:../Sources/ff10b/src/ff.c **** 		/* Update FSINFO sector if needed */
 817:../Sources/ff10b/src/ff.c **** 		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 494              		.loc 1 817 0
 495 024e 7B68     		ldr	r3, [r7, #4]
 496 0250 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 497 0252 032B     		cmp	r3, #3
 498 0254 40F09980 		bne	.L29
 499              		.loc 1 817 0 is_stmt 0 discriminator 1
 500 0258 7B68     		ldr	r3, [r7, #4]
 501 025a 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 502 025c 012B     		cmp	r3, #1
 503 025e 40F09480 		bne	.L29
 818:../Sources/ff10b/src/ff.c **** 			/* Create FSINFO structure */
 819:../Sources/ff10b/src/ff.c **** 			mem_set(fs->win, 0, SS(fs));
 504              		.loc 1 819 0 is_stmt 1
 505 0262 7B68     		ldr	r3, [r7, #4]
 506 0264 03F13003 		add	r3, r3, #48
 507 0268 1846     		mov	r0, r3
 508 026a 4FF00001 		mov	r1, #0
 509 026e 4FF40072 		mov	r2, #512
 510 0272 FFF7EDFE 		bl	mem_set
 820:../Sources/ff10b/src/ff.c **** 			ST_WORD(fs->win+BS_55AA, 0xAA55);
 511              		.loc 1 820 0
 512 0276 7B68     		ldr	r3, [r7, #4]
 513 0278 4FF05502 		mov	r2, #85
 514 027c 83F82E22 		strb	r2, [r3, #558]
 515 0280 7B68     		ldr	r3, [r7, #4]
 516 0282 4FF0AA02 		mov	r2, #170
 517 0286 83F82F22 		strb	r2, [r3, #559]
 821:../Sources/ff10b/src/ff.c **** 			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 518              		.loc 1 821 0
 519 028a 7B68     		ldr	r3, [r7, #4]
 520 028c 4FF05202 		mov	r2, #82
 521 0290 83F83020 		strb	r2, [r3, #48]
 522 0294 7B68     		ldr	r3, [r7, #4]
 523 0296 4FF05202 		mov	r2, #82
 524 029a 83F83120 		strb	r2, [r3, #49]
 525 029e 7B68     		ldr	r3, [r7, #4]
 526 02a0 4FF06102 		mov	r2, #97
 527 02a4 83F83220 		strb	r2, [r3, #50]
 528 02a8 7B68     		ldr	r3, [r7, #4]
 529 02aa 4FF04102 		mov	r2, #65
 530 02ae 83F83320 		strb	r2, [r3, #51]
 822:../Sources/ff10b/src/ff.c **** 			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 531              		.loc 1 822 0
 532 02b2 7B68     		ldr	r3, [r7, #4]
 533 02b4 4FF07202 		mov	r2, #114
 534 02b8 83F81422 		strb	r2, [r3, #532]
 535 02bc 7B68     		ldr	r3, [r7, #4]
 536 02be 4FF07202 		mov	r2, #114
 537 02c2 83F81522 		strb	r2, [r3, #533]
 538 02c6 7B68     		ldr	r3, [r7, #4]
 539 02c8 4FF04102 		mov	r2, #65
 540 02cc 83F81622 		strb	r2, [r3, #534]
 541 02d0 7B68     		ldr	r3, [r7, #4]
 542 02d2 4FF06102 		mov	r2, #97
 543 02d6 83F81722 		strb	r2, [r3, #535]
 823:../Sources/ff10b/src/ff.c **** 			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 544              		.loc 1 823 0
 545 02da 7B68     		ldr	r3, [r7, #4]
 546 02dc 1B69     		ldr	r3, [r3, #16]
 547 02de DAB2     		uxtb	r2, r3
 548 02e0 7B68     		ldr	r3, [r7, #4]
 549 02e2 83F81822 		strb	r2, [r3, #536]
 550 02e6 7B68     		ldr	r3, [r7, #4]
 551 02e8 1B69     		ldr	r3, [r3, #16]
 552 02ea 9BB2     		uxth	r3, r3
 553 02ec 4FEA1323 		lsr	r3, r3, #8
 554 02f0 9BB2     		uxth	r3, r3
 555 02f2 DAB2     		uxtb	r2, r3
 556 02f4 7B68     		ldr	r3, [r7, #4]
 557 02f6 83F81922 		strb	r2, [r3, #537]
 558 02fa 7B68     		ldr	r3, [r7, #4]
 559 02fc 1B69     		ldr	r3, [r3, #16]
 560 02fe 4FEA1343 		lsr	r3, r3, #16
 561 0302 DAB2     		uxtb	r2, r3
 562 0304 7B68     		ldr	r3, [r7, #4]
 563 0306 83F81A22 		strb	r2, [r3, #538]
 564 030a 7B68     		ldr	r3, [r7, #4]
 565 030c 1B69     		ldr	r3, [r3, #16]
 566 030e 4FEA1363 		lsr	r3, r3, #24
 567 0312 DAB2     		uxtb	r2, r3
 568 0314 7B68     		ldr	r3, [r7, #4]
 569 0316 83F81B22 		strb	r2, [r3, #539]
 824:../Sources/ff10b/src/ff.c **** 			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 570              		.loc 1 824 0
 571 031a 7B68     		ldr	r3, [r7, #4]
 572 031c DB68     		ldr	r3, [r3, #12]
 573 031e DAB2     		uxtb	r2, r3
 574 0320 7B68     		ldr	r3, [r7, #4]
 575 0322 83F81C22 		strb	r2, [r3, #540]
 576 0326 7B68     		ldr	r3, [r7, #4]
 577 0328 DB68     		ldr	r3, [r3, #12]
 578 032a 9BB2     		uxth	r3, r3
 579 032c 4FEA1323 		lsr	r3, r3, #8
 580 0330 9BB2     		uxth	r3, r3
 581 0332 DAB2     		uxtb	r2, r3
 582 0334 7B68     		ldr	r3, [r7, #4]
 583 0336 83F81D22 		strb	r2, [r3, #541]
 584 033a 7B68     		ldr	r3, [r7, #4]
 585 033c DB68     		ldr	r3, [r3, #12]
 586 033e 4FEA1343 		lsr	r3, r3, #16
 587 0342 DAB2     		uxtb	r2, r3
 588 0344 7B68     		ldr	r3, [r7, #4]
 589 0346 83F81E22 		strb	r2, [r3, #542]
 590 034a 7B68     		ldr	r3, [r7, #4]
 591 034c DB68     		ldr	r3, [r3, #12]
 592 034e 4FEA1363 		lsr	r3, r3, #24
 593 0352 DAB2     		uxtb	r2, r3
 594 0354 7B68     		ldr	r3, [r7, #4]
 595 0356 83F81F22 		strb	r2, [r3, #543]
 825:../Sources/ff10b/src/ff.c **** 			/* Write it into the FSINFO sector */
 826:../Sources/ff10b/src/ff.c **** 			fs->winsect = fs->volbase + 1;
 596              		.loc 1 826 0
 597 035a 7B68     		ldr	r3, [r7, #4]
 598 035c DB69     		ldr	r3, [r3, #28]
 599 035e 03F10102 		add	r2, r3, #1
 600 0362 7B68     		ldr	r3, [r7, #4]
 601 0364 DA62     		str	r2, [r3, #44]
 827:../Sources/ff10b/src/ff.c **** 			disk_write(fs->drv, fs->win, fs->winsect, 1);
 602              		.loc 1 827 0
 603 0366 7B68     		ldr	r3, [r7, #4]
 604 0368 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
 605 036a 7B68     		ldr	r3, [r7, #4]
 606 036c 03F13002 		add	r2, r3, #48
 607 0370 7B68     		ldr	r3, [r7, #4]
 608 0372 DB6A     		ldr	r3, [r3, #44]
 609 0374 0846     		mov	r0, r1
 610 0376 1146     		mov	r1, r2
 611 0378 1A46     		mov	r2, r3
 612 037a 4FF00103 		mov	r3, #1
 613 037e FFF7FEFF 		bl	disk_write
 828:../Sources/ff10b/src/ff.c **** 			fs->fsi_flag = 0;
 614              		.loc 1 828 0
 615 0382 7B68     		ldr	r3, [r7, #4]
 616 0384 4FF00002 		mov	r2, #0
 617 0388 5A71     		strb	r2, [r3, #5]
 618              	.L29:
 829:../Sources/ff10b/src/ff.c **** 		}
 830:../Sources/ff10b/src/ff.c **** 		/* Make sure that no pending write process in the physical drive */
 831:../Sources/ff10b/src/ff.c **** 		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 619              		.loc 1 831 0
 620 038a 7B68     		ldr	r3, [r7, #4]
 621 038c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 622 038e 1846     		mov	r0, r3
 623 0390 4FF00001 		mov	r1, #0
 624 0394 4FF00002 		mov	r2, #0
 625 0398 FFF7FEFF 		bl	disk_ioctl
 626 039c 0346     		mov	r3, r0
 627 039e 002B     		cmp	r3, #0
 628 03a0 02D0     		beq	.L28
 832:../Sources/ff10b/src/ff.c **** 			res = FR_DISK_ERR;
 629              		.loc 1 832 0
 630 03a2 4FF00103 		mov	r3, #1
 631 03a6 FB73     		strb	r3, [r7, #15]
 632              	.L28:
 833:../Sources/ff10b/src/ff.c **** 	}
 834:../Sources/ff10b/src/ff.c **** 
 835:../Sources/ff10b/src/ff.c **** 	return res;
 633              		.loc 1 835 0
 634 03a8 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 836:../Sources/ff10b/src/ff.c **** }
 635              		.loc 1 836 0
 636 03aa 1846     		mov	r0, r3
 637 03ac 07F11007 		add	r7, r7, #16
 638 03b0 BD46     		mov	sp, r7
 639 03b2 80BD     		pop	{r7, pc}
 640              		.cfi_endproc
 641              	.LFE6:
 643              		.align	2
 644              		.global	clust2sect
 645              		.thumb
 646              		.thumb_func
 648              	clust2sect:
 649              	.LFB7:
 837:../Sources/ff10b/src/ff.c **** #endif
 838:../Sources/ff10b/src/ff.c **** 
 839:../Sources/ff10b/src/ff.c **** 
 840:../Sources/ff10b/src/ff.c **** 
 841:../Sources/ff10b/src/ff.c **** 
 842:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
 843:../Sources/ff10b/src/ff.c **** /* Get sector# from cluster#                                             */
 844:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
 845:../Sources/ff10b/src/ff.c **** 
 846:../Sources/ff10b/src/ff.c **** 
 847:../Sources/ff10b/src/ff.c **** DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
 848:../Sources/ff10b/src/ff.c **** 	FATFS* fs,		/* File system object */
 849:../Sources/ff10b/src/ff.c **** 	DWORD clst		/* Cluster# to be converted */
 850:../Sources/ff10b/src/ff.c **** )
 851:../Sources/ff10b/src/ff.c **** {
 650              		.loc 1 851 0
 651              		.cfi_startproc
 652              		@ args = 0, pretend = 0, frame = 8
 653              		@ frame_needed = 1, uses_anonymous_args = 0
 654              		@ link register save eliminated.
 655 03b4 80B4     		push	{r7}
 656              	.LCFI21:
 657              		.cfi_def_cfa_offset 4
 658              		.cfi_offset 7, -4
 659 03b6 83B0     		sub	sp, sp, #12
 660              	.LCFI22:
 661              		.cfi_def_cfa_offset 16
 662 03b8 00AF     		add	r7, sp, #0
 663              	.LCFI23:
 664              		.cfi_def_cfa_register 7
 665 03ba 7860     		str	r0, [r7, #4]
 666 03bc 3960     		str	r1, [r7, #0]
 852:../Sources/ff10b/src/ff.c **** 	clst -= 2;
 667              		.loc 1 852 0
 668 03be 3B68     		ldr	r3, [r7, #0]
 669 03c0 A3F10203 		sub	r3, r3, #2
 670 03c4 3B60     		str	r3, [r7, #0]
 853:../Sources/ff10b/src/ff.c **** 	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 671              		.loc 1 853 0
 672 03c6 7B68     		ldr	r3, [r7, #4]
 673 03c8 5B69     		ldr	r3, [r3, #20]
 674 03ca A3F10202 		sub	r2, r3, #2
 675 03ce 3B68     		ldr	r3, [r7, #0]
 676 03d0 9A42     		cmp	r2, r3
 677 03d2 02D8     		bhi	.L32
 678              		.loc 1 853 0 is_stmt 0 discriminator 1
 679 03d4 4FF00003 		mov	r3, #0
 680 03d8 07E0     		b	.L33
 681              	.L32:
 854:../Sources/ff10b/src/ff.c **** 	return clst * fs->csize + fs->database;
 682              		.loc 1 854 0 is_stmt 1
 683 03da 7B68     		ldr	r3, [r7, #4]
 684 03dc 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 685 03de 3A68     		ldr	r2, [r7, #0]
 686 03e0 02FB03F2 		mul	r2, r2, r3
 687 03e4 7B68     		ldr	r3, [r7, #4]
 688 03e6 9B6A     		ldr	r3, [r3, #40]
 689 03e8 D318     		adds	r3, r2, r3
 690              	.L33:
 855:../Sources/ff10b/src/ff.c **** }
 691              		.loc 1 855 0
 692 03ea 1846     		mov	r0, r3
 693 03ec 07F10C07 		add	r7, r7, #12
 694 03f0 BD46     		mov	sp, r7
 695 03f2 80BC     		pop	{r7}
 696 03f4 7047     		bx	lr
 697              		.cfi_endproc
 698              	.LFE7:
 700 03f6 00BF     		.align	2
 701              		.global	get_fat
 702              		.thumb
 703              		.thumb_func
 705              	get_fat:
 706              	.LFB8:
 856:../Sources/ff10b/src/ff.c **** 
 857:../Sources/ff10b/src/ff.c **** 
 858:../Sources/ff10b/src/ff.c **** 
 859:../Sources/ff10b/src/ff.c **** 
 860:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
 861:../Sources/ff10b/src/ff.c **** /* FAT access - Read value of a FAT entry                                */
 862:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
 863:../Sources/ff10b/src/ff.c **** 
 864:../Sources/ff10b/src/ff.c **** 
 865:../Sources/ff10b/src/ff.c **** DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
 866:../Sources/ff10b/src/ff.c **** 	FATFS* fs,	/* File system object */
 867:../Sources/ff10b/src/ff.c **** 	DWORD clst	/* Cluster# to get the link information */
 868:../Sources/ff10b/src/ff.c **** )
 869:../Sources/ff10b/src/ff.c **** {
 707              		.loc 1 869 0
 708              		.cfi_startproc
 709              		@ args = 0, pretend = 0, frame = 24
 710              		@ frame_needed = 1, uses_anonymous_args = 0
 711 03f8 80B5     		push	{r7, lr}
 712              	.LCFI24:
 713              		.cfi_def_cfa_offset 8
 714              		.cfi_offset 7, -8
 715              		.cfi_offset 14, -4
 716 03fa 86B0     		sub	sp, sp, #24
 717              	.LCFI25:
 718              		.cfi_def_cfa_offset 32
 719 03fc 00AF     		add	r7, sp, #0
 720              	.LCFI26:
 721              		.cfi_def_cfa_register 7
 722 03fe 7860     		str	r0, [r7, #4]
 723 0400 3960     		str	r1, [r7, #0]
 870:../Sources/ff10b/src/ff.c **** 	UINT wc, bc;
 871:../Sources/ff10b/src/ff.c **** 	BYTE *p;
 872:../Sources/ff10b/src/ff.c **** 
 873:../Sources/ff10b/src/ff.c **** 
 874:../Sources/ff10b/src/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
 724              		.loc 1 874 0
 725 0402 3B68     		ldr	r3, [r7, #0]
 726 0404 012B     		cmp	r3, #1
 727 0406 04D9     		bls	.L35
 728              		.loc 1 874 0 is_stmt 0 discriminator 1
 729 0408 7B68     		ldr	r3, [r7, #4]
 730 040a 5A69     		ldr	r2, [r3, #20]
 731 040c 3B68     		ldr	r3, [r7, #0]
 732 040e 9A42     		cmp	r2, r3
 733 0410 02D8     		bhi	.L36
 734              	.L35:
 875:../Sources/ff10b/src/ff.c **** 		return 1;
 735              		.loc 1 875 0 is_stmt 1
 736 0412 4FF00103 		mov	r3, #1
 737 0416 BBE0     		b	.L37
 738              	.L36:
 876:../Sources/ff10b/src/ff.c **** 
 877:../Sources/ff10b/src/ff.c **** 	switch (fs->fs_type) {
 739              		.loc 1 877 0
 740 0418 7B68     		ldr	r3, [r7, #4]
 741 041a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 742 041c 022B     		cmp	r3, #2
 743 041e 52D0     		beq	.L40
 744 0420 032B     		cmp	r3, #3
 745 0422 76D0     		beq	.L41
 746 0424 012B     		cmp	r3, #1
 747 0426 40F0A780 		bne	.L49
 748              	.L39:
 878:../Sources/ff10b/src/ff.c **** 	case FS_FAT12 :
 879:../Sources/ff10b/src/ff.c **** 		bc = (UINT)clst; bc += bc / 2;
 749              		.loc 1 879 0
 750 042a 3B68     		ldr	r3, [r7, #0]
 751 042c 7B61     		str	r3, [r7, #20]
 752 042e 7B69     		ldr	r3, [r7, #20]
 753 0430 4FEA5303 		lsr	r3, r3, #1
 754 0434 7A69     		ldr	r2, [r7, #20]
 755 0436 D318     		adds	r3, r2, r3
 756 0438 7B61     		str	r3, [r7, #20]
 880:../Sources/ff10b/src/ff.c **** 		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 757              		.loc 1 880 0
 758 043a 7B68     		ldr	r3, [r7, #4]
 759 043c 1A6A     		ldr	r2, [r3, #32]
 760 043e 7B69     		ldr	r3, [r7, #20]
 761 0440 4FEA5323 		lsr	r3, r3, #9
 762 0444 D318     		adds	r3, r2, r3
 763 0446 7868     		ldr	r0, [r7, #4]
 764 0448 1946     		mov	r1, r3
 765 044a FFF7C3FE 		bl	move_window
 766 044e 0346     		mov	r3, r0
 767 0450 002B     		cmp	r3, #0
 768 0452 40F09480 		bne	.L50
 769              	.L42:
 881:../Sources/ff10b/src/ff.c **** 		wc = fs->win[bc % SS(fs)]; bc++;
 770              		.loc 1 881 0
 771 0456 7B69     		ldr	r3, [r7, #20]
 772 0458 4FEAC353 		lsl	r3, r3, #23
 773 045c 4FEAD353 		lsr	r3, r3, #23
 774 0460 7A68     		ldr	r2, [r7, #4]
 775 0462 D318     		adds	r3, r2, r3
 776 0464 93F83030 		ldrb	r3, [r3, #48]	@ zero_extendqisi2
 777 0468 3B61     		str	r3, [r7, #16]
 778 046a 7B69     		ldr	r3, [r7, #20]
 779 046c 03F10103 		add	r3, r3, #1
 780 0470 7B61     		str	r3, [r7, #20]
 882:../Sources/ff10b/src/ff.c **** 		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 781              		.loc 1 882 0
 782 0472 7B68     		ldr	r3, [r7, #4]
 783 0474 1A6A     		ldr	r2, [r3, #32]
 784 0476 7B69     		ldr	r3, [r7, #20]
 785 0478 4FEA5323 		lsr	r3, r3, #9
 786 047c D318     		adds	r3, r2, r3
 787 047e 7868     		ldr	r0, [r7, #4]
 788 0480 1946     		mov	r1, r3
 789 0482 FFF7A7FE 		bl	move_window
 790 0486 0346     		mov	r3, r0
 791 0488 002B     		cmp	r3, #0
 792 048a 7AD1     		bne	.L51
 793              	.L44:
 883:../Sources/ff10b/src/ff.c **** 		wc |= fs->win[bc % SS(fs)] << 8;
 794              		.loc 1 883 0
 795 048c 7B69     		ldr	r3, [r7, #20]
 796 048e 4FEAC353 		lsl	r3, r3, #23
 797 0492 4FEAD353 		lsr	r3, r3, #23
 798 0496 7A68     		ldr	r2, [r7, #4]
 799 0498 D318     		adds	r3, r2, r3
 800 049a 93F83030 		ldrb	r3, [r3, #48]	@ zero_extendqisi2
 801 049e 4FEA0323 		lsl	r3, r3, #8
 802 04a2 3A69     		ldr	r2, [r7, #16]
 803 04a4 1343     		orrs	r3, r3, r2
 804 04a6 3B61     		str	r3, [r7, #16]
 884:../Sources/ff10b/src/ff.c **** 		return clst & 1 ? wc >> 4 : (wc & 0xFFF);
 805              		.loc 1 884 0
 806 04a8 3B68     		ldr	r3, [r7, #0]
 807 04aa 03F00103 		and	r3, r3, #1
 808 04ae 002B     		cmp	r3, #0
 809 04b0 03D0     		beq	.L45
 810              		.loc 1 884 0 is_stmt 0 discriminator 1
 811 04b2 3B69     		ldr	r3, [r7, #16]
 812 04b4 4FEA1313 		lsr	r3, r3, #4
 813 04b8 04E0     		b	.L46
 814              	.L45:
 815              		.loc 1 884 0 discriminator 2
 816 04ba 3B69     		ldr	r3, [r7, #16]
 817 04bc 4FEA0353 		lsl	r3, r3, #20
 818 04c0 4FEA1353 		lsr	r3, r3, #20
 819              	.L46:
 820              		.loc 1 884 0 discriminator 3
 821 04c4 64E0     		b	.L37
 822              	.L40:
 885:../Sources/ff10b/src/ff.c **** 
 886:../Sources/ff10b/src/ff.c **** 	case FS_FAT16 :
 887:../Sources/ff10b/src/ff.c **** 		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
 823              		.loc 1 887 0 is_stmt 1
 824 04c6 7B68     		ldr	r3, [r7, #4]
 825 04c8 1A6A     		ldr	r2, [r3, #32]
 826 04ca 3B68     		ldr	r3, [r7, #0]
 827 04cc 4FEA1323 		lsr	r3, r3, #8
 828 04d0 D318     		adds	r3, r2, r3
 829 04d2 7868     		ldr	r0, [r7, #4]
 830 04d4 1946     		mov	r1, r3
 831 04d6 FFF77DFE 		bl	move_window
 832 04da 0346     		mov	r3, r0
 833 04dc 002B     		cmp	r3, #0
 834 04de 52D1     		bne	.L52
 835              	.L47:
 888:../Sources/ff10b/src/ff.c **** 		p = &fs->win[clst * 2 % SS(fs)];
 836              		.loc 1 888 0
 837 04e0 3B68     		ldr	r3, [r7, #0]
 838 04e2 4FEA4303 		lsl	r3, r3, #1
 839 04e6 4FEAC353 		lsl	r3, r3, #23
 840 04ea 4FEAD353 		lsr	r3, r3, #23
 841 04ee 03F13003 		add	r3, r3, #48
 842 04f2 7A68     		ldr	r2, [r7, #4]
 843 04f4 D318     		adds	r3, r2, r3
 844 04f6 FB60     		str	r3, [r7, #12]
 889:../Sources/ff10b/src/ff.c **** 		return LD_WORD(p);
 845              		.loc 1 889 0
 846 04f8 FB68     		ldr	r3, [r7, #12]
 847 04fa 03F10103 		add	r3, r3, #1
 848 04fe 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 849 0500 4FEA0323 		lsl	r3, r3, #8
 850 0504 9AB2     		uxth	r2, r3
 851 0506 FB68     		ldr	r3, [r7, #12]
 852 0508 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 853 050a 1343     		orrs	r3, r3, r2
 854 050c 9BB2     		uxth	r3, r3
 855 050e 9BB2     		uxth	r3, r3
 856 0510 3EE0     		b	.L37
 857              	.L41:
 890:../Sources/ff10b/src/ff.c **** 
 891:../Sources/ff10b/src/ff.c **** 	case FS_FAT32 :
 892:../Sources/ff10b/src/ff.c **** 		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
 858              		.loc 1 892 0
 859 0512 7B68     		ldr	r3, [r7, #4]
 860 0514 1A6A     		ldr	r2, [r3, #32]
 861 0516 3B68     		ldr	r3, [r7, #0]
 862 0518 4FEAD313 		lsr	r3, r3, #7
 863 051c D318     		adds	r3, r2, r3
 864 051e 7868     		ldr	r0, [r7, #4]
 865 0520 1946     		mov	r1, r3
 866 0522 FFF757FE 		bl	move_window
 867 0526 0346     		mov	r3, r0
 868 0528 002B     		cmp	r3, #0
 869 052a 2ED1     		bne	.L53
 870              	.L48:
 893:../Sources/ff10b/src/ff.c **** 		p = &fs->win[clst * 4 % SS(fs)];
 871              		.loc 1 893 0
 872 052c 3B68     		ldr	r3, [r7, #0]
 873 052e 4FEA8303 		lsl	r3, r3, #2
 874 0532 4FEAC353 		lsl	r3, r3, #23
 875 0536 4FEAD353 		lsr	r3, r3, #23
 876 053a 03F13003 		add	r3, r3, #48
 877 053e 7A68     		ldr	r2, [r7, #4]
 878 0540 D318     		adds	r3, r2, r3
 879 0542 FB60     		str	r3, [r7, #12]
 894:../Sources/ff10b/src/ff.c **** 		return LD_DWORD(p) & 0x0FFFFFFF;
 880              		.loc 1 894 0
 881 0544 FB68     		ldr	r3, [r7, #12]
 882 0546 03F10303 		add	r3, r3, #3
 883 054a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 884 054c 4FEA0362 		lsl	r2, r3, #24
 885 0550 FB68     		ldr	r3, [r7, #12]
 886 0552 03F10203 		add	r3, r3, #2
 887 0556 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 888 0558 4FEA0343 		lsl	r3, r3, #16
 889 055c 1A43     		orrs	r2, r2, r3
 890 055e FB68     		ldr	r3, [r7, #12]
 891 0560 03F10103 		add	r3, r3, #1
 892 0564 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 893 0566 4FEA0323 		lsl	r3, r3, #8
 894 056a 1A43     		orrs	r2, r2, r3
 895 056c FB68     		ldr	r3, [r7, #12]
 896 056e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 897 0570 1343     		orrs	r3, r3, r2
 898 0572 23F07043 		bic	r3, r3, #-268435456
 899 0576 0BE0     		b	.L37
 900              	.L49:
 895:../Sources/ff10b/src/ff.c **** 
 896:../Sources/ff10b/src/ff.c **** 	default:
 897:../Sources/ff10b/src/ff.c **** 		return 1;
 901              		.loc 1 897 0
 902 0578 4FF00103 		mov	r3, #1
 903 057c 08E0     		b	.L37
 904              	.L50:
 880:../Sources/ff10b/src/ff.c **** 		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 905              		.loc 1 880 0
 906 057e 00BF     		nop
 907 0580 04E0     		b	.L43
 908              	.L51:
 882:../Sources/ff10b/src/ff.c **** 		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 909              		.loc 1 882 0
 910 0582 00BF     		nop
 911 0584 02E0     		b	.L43
 912              	.L52:
 887:../Sources/ff10b/src/ff.c **** 		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
 913              		.loc 1 887 0
 914 0586 00BF     		nop
 915 0588 00E0     		b	.L43
 916              	.L53:
 892:../Sources/ff10b/src/ff.c **** 		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
 917              		.loc 1 892 0
 918 058a 00BF     		nop
 919              	.L43:
 898:../Sources/ff10b/src/ff.c **** 	}
 899:../Sources/ff10b/src/ff.c **** 
 900:../Sources/ff10b/src/ff.c **** 	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
 920              		.loc 1 900 0
 921 058c 4FF0FF33 		mov	r3, #-1
 922              	.L37:
 901:../Sources/ff10b/src/ff.c **** }
 923              		.loc 1 901 0
 924 0590 1846     		mov	r0, r3
 925 0592 07F11807 		add	r7, r7, #24
 926 0596 BD46     		mov	sp, r7
 927 0598 80BD     		pop	{r7, pc}
 928              		.cfi_endproc
 929              	.LFE8:
 931 059a 00BF     		.align	2
 932              		.global	get_fattime
 933              		.thumb
 934              		.thumb_func
 936              	get_fattime:
 937              	.LFB9:
 902:../Sources/ff10b/src/ff.c **** 
 903:../Sources/ff10b/src/ff.c **** 
 904:../Sources/ff10b/src/ff.c **** DWORD get_fattime()
 905:../Sources/ff10b/src/ff.c **** {
 938              		.loc 1 905 0
 939              		.cfi_startproc
 940              		@ args = 0, pretend = 0, frame = 0
 941              		@ frame_needed = 1, uses_anonymous_args = 0
 942              		@ link register save eliminated.
 943 059c 80B4     		push	{r7}
 944              	.LCFI27:
 945              		.cfi_def_cfa_offset 4
 946              		.cfi_offset 7, -4
 947 059e 00AF     		add	r7, sp, #0
 948              	.LCFI28:
 949              		.cfi_def_cfa_register 7
 906:../Sources/ff10b/src/ff.c **** 	return 0;
 950              		.loc 1 906 0
 951 05a0 4FF00003 		mov	r3, #0
 907:../Sources/ff10b/src/ff.c **** }
 952              		.loc 1 907 0
 953 05a4 1846     		mov	r0, r3
 954 05a6 BD46     		mov	sp, r7
 955 05a8 80BC     		pop	{r7}
 956 05aa 7047     		bx	lr
 957              		.cfi_endproc
 958              	.LFE9:
 960              		.align	2
 961              		.global	put_fat
 962              		.thumb
 963              		.thumb_func
 965              	put_fat:
 966              	.LFB10:
 908:../Sources/ff10b/src/ff.c **** 
 909:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
 910:../Sources/ff10b/src/ff.c **** /* FAT access - Change value of a FAT entry                              */
 911:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
 912:../Sources/ff10b/src/ff.c **** #if !_FS_READONLY
 913:../Sources/ff10b/src/ff.c **** 
 914:../Sources/ff10b/src/ff.c **** FRESULT put_fat (
 915:../Sources/ff10b/src/ff.c **** 	FATFS* fs,	/* File system object */
 916:../Sources/ff10b/src/ff.c **** 	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
 917:../Sources/ff10b/src/ff.c **** 	DWORD val	/* New value to mark the cluster */
 918:../Sources/ff10b/src/ff.c **** )
 919:../Sources/ff10b/src/ff.c **** {
 967              		.loc 1 919 0
 968              		.cfi_startproc
 969              		@ args = 0, pretend = 0, frame = 32
 970              		@ frame_needed = 1, uses_anonymous_args = 0
 971 05ac 80B5     		push	{r7, lr}
 972              	.LCFI29:
 973              		.cfi_def_cfa_offset 8
 974              		.cfi_offset 7, -8
 975              		.cfi_offset 14, -4
 976 05ae 88B0     		sub	sp, sp, #32
 977              	.LCFI30:
 978              		.cfi_def_cfa_offset 40
 979 05b0 00AF     		add	r7, sp, #0
 980              	.LCFI31:
 981              		.cfi_def_cfa_register 7
 982 05b2 F860     		str	r0, [r7, #12]
 983 05b4 B960     		str	r1, [r7, #8]
 984 05b6 7A60     		str	r2, [r7, #4]
 920:../Sources/ff10b/src/ff.c **** 	UINT bc;
 921:../Sources/ff10b/src/ff.c **** 	BYTE *p;
 922:../Sources/ff10b/src/ff.c **** 	FRESULT res;
 923:../Sources/ff10b/src/ff.c **** 
 924:../Sources/ff10b/src/ff.c **** 
 925:../Sources/ff10b/src/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 985              		.loc 1 925 0
 986 05b8 BB68     		ldr	r3, [r7, #8]
 987 05ba 012B     		cmp	r3, #1
 988 05bc 04D9     		bls	.L57
 989              		.loc 1 925 0 is_stmt 0 discriminator 1
 990 05be FB68     		ldr	r3, [r7, #12]
 991 05c0 5A69     		ldr	r2, [r3, #20]
 992 05c2 BB68     		ldr	r3, [r7, #8]
 993 05c4 9A42     		cmp	r2, r3
 994 05c6 03D8     		bhi	.L58
 995              	.L57:
 926:../Sources/ff10b/src/ff.c **** 		res = FR_INT_ERR;
 996              		.loc 1 926 0 is_stmt 1
 997 05c8 4FF00203 		mov	r3, #2
 998 05cc FB77     		strb	r3, [r7, #31]
 999 05ce 11E1     		b	.L59
 1000              	.L58:
 927:../Sources/ff10b/src/ff.c **** 
 928:../Sources/ff10b/src/ff.c **** 	} else {
 929:../Sources/ff10b/src/ff.c **** 		switch (fs->fs_type) {
 1001              		.loc 1 929 0
 1002 05d0 FB68     		ldr	r3, [r7, #12]
 1003 05d2 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1004 05d4 022B     		cmp	r3, #2
 1005 05d6 7ED0     		beq	.L62
 1006 05d8 032B     		cmp	r3, #3
 1007 05da 00F0A680 		beq	.L63
 1008 05de 012B     		cmp	r3, #1
 1009 05e0 40F0F980 		bne	.L74
 1010              	.L61:
 930:../Sources/ff10b/src/ff.c **** 		case FS_FAT12 :
 931:../Sources/ff10b/src/ff.c **** 			bc = (UINT)clst; bc += bc / 2;
 1011              		.loc 1 931 0
 1012 05e4 BB68     		ldr	r3, [r7, #8]
 1013 05e6 BB61     		str	r3, [r7, #24]
 1014 05e8 BB69     		ldr	r3, [r7, #24]
 1015 05ea 4FEA5303 		lsr	r3, r3, #1
 1016 05ee BA69     		ldr	r2, [r7, #24]
 1017 05f0 D318     		adds	r3, r2, r3
 1018 05f2 BB61     		str	r3, [r7, #24]
 932:../Sources/ff10b/src/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 1019              		.loc 1 932 0
 1020 05f4 FB68     		ldr	r3, [r7, #12]
 1021 05f6 1A6A     		ldr	r2, [r3, #32]
 1022 05f8 BB69     		ldr	r3, [r7, #24]
 1023 05fa 4FEA5323 		lsr	r3, r3, #9
 1024 05fe D318     		adds	r3, r2, r3
 1025 0600 F868     		ldr	r0, [r7, #12]
 1026 0602 1946     		mov	r1, r3
 1027 0604 FFF7E6FD 		bl	move_window
 1028 0608 0346     		mov	r3, r0
 1029 060a FB77     		strb	r3, [r7, #31]
 933:../Sources/ff10b/src/ff.c **** 			if (res != FR_OK) break;
 1030              		.loc 1 933 0
 1031 060c FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 1032 060e 002B     		cmp	r3, #0
 1033 0610 40F0E580 		bne	.L75
 1034              	.L64:
 934:../Sources/ff10b/src/ff.c **** 			p = &fs->win[bc % SS(fs)];
 1035              		.loc 1 934 0
 1036 0614 BB69     		ldr	r3, [r7, #24]
 1037 0616 4FEAC353 		lsl	r3, r3, #23
 1038 061a 4FEAD353 		lsr	r3, r3, #23
 1039 061e 03F13003 		add	r3, r3, #48
 1040 0622 FA68     		ldr	r2, [r7, #12]
 1041 0624 D318     		adds	r3, r2, r3
 1042 0626 7B61     		str	r3, [r7, #20]
 935:../Sources/ff10b/src/ff.c **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 1043              		.loc 1 935 0
 1044 0628 BB68     		ldr	r3, [r7, #8]
 1045 062a 03F00103 		and	r3, r3, #1
 1046 062e 002B     		cmp	r3, #0
 1047 0630 0ED0     		beq	.L66
 1048              		.loc 1 935 0 is_stmt 0 discriminator 1
 1049 0632 7B69     		ldr	r3, [r7, #20]
 1050 0634 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1051 0636 DBB2     		uxtb	r3, r3
 1052 0638 03F00F03 		and	r3, r3, #15
 1053 063c DAB2     		uxtb	r2, r3
 1054 063e 7B68     		ldr	r3, [r7, #4]
 1055 0640 DBB2     		uxtb	r3, r3
 1056 0642 4FEA0313 		lsl	r3, r3, #4
 1057 0646 DBB2     		uxtb	r3, r3
 1058 0648 1343     		orrs	r3, r3, r2
 1059 064a DBB2     		uxtb	r3, r3
 1060 064c DBB2     		uxtb	r3, r3
 1061 064e 01E0     		b	.L67
 1062              	.L66:
 1063              		.loc 1 935 0 discriminator 2
 1064 0650 7B68     		ldr	r3, [r7, #4]
 1065 0652 DBB2     		uxtb	r3, r3
 1066              	.L67:
 1067              		.loc 1 935 0 discriminator 3
 1068 0654 7A69     		ldr	r2, [r7, #20]
 1069 0656 1370     		strb	r3, [r2, #0]
 936:../Sources/ff10b/src/ff.c **** 			bc++;
 1070              		.loc 1 936 0 is_stmt 1 discriminator 3
 1071 0658 BB69     		ldr	r3, [r7, #24]
 1072 065a 03F10103 		add	r3, r3, #1
 1073 065e BB61     		str	r3, [r7, #24]
 937:../Sources/ff10b/src/ff.c **** 			fs->wflag = 1;
 1074              		.loc 1 937 0 discriminator 3
 1075 0660 FB68     		ldr	r3, [r7, #12]
 1076 0662 4FF00102 		mov	r2, #1
 1077 0666 1A71     		strb	r2, [r3, #4]
 938:../Sources/ff10b/src/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 1078              		.loc 1 938 0 discriminator 3
 1079 0668 FB68     		ldr	r3, [r7, #12]
 1080 066a 1A6A     		ldr	r2, [r3, #32]
 1081 066c BB69     		ldr	r3, [r7, #24]
 1082 066e 4FEA5323 		lsr	r3, r3, #9
 1083 0672 D318     		adds	r3, r2, r3
 1084 0674 F868     		ldr	r0, [r7, #12]
 1085 0676 1946     		mov	r1, r3
 1086 0678 FFF7ACFD 		bl	move_window
 1087 067c 0346     		mov	r3, r0
 1088 067e FB77     		strb	r3, [r7, #31]
 939:../Sources/ff10b/src/ff.c **** 			if (res != FR_OK) break;
 1089              		.loc 1 939 0 discriminator 3
 1090 0680 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 1091 0682 002B     		cmp	r3, #0
 1092 0684 40F0AD80 		bne	.L76
 1093              	.L68:
 940:../Sources/ff10b/src/ff.c **** 			p = &fs->win[bc % SS(fs)];
 1094              		.loc 1 940 0
 1095 0688 BB69     		ldr	r3, [r7, #24]
 1096 068a 4FEAC353 		lsl	r3, r3, #23
 1097 068e 4FEAD353 		lsr	r3, r3, #23
 1098 0692 03F13003 		add	r3, r3, #48
 1099 0696 FA68     		ldr	r2, [r7, #12]
 1100 0698 D318     		adds	r3, r2, r3
 1101 069a 7B61     		str	r3, [r7, #20]
 941:../Sources/ff10b/src/ff.c **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 1102              		.loc 1 941 0
 1103 069c BB68     		ldr	r3, [r7, #8]
 1104 069e 03F00103 		and	r3, r3, #1
 1105 06a2 002B     		cmp	r3, #0
 1106 06a4 04D0     		beq	.L69
 1107              		.loc 1 941 0 is_stmt 0 discriminator 1
 1108 06a6 7B68     		ldr	r3, [r7, #4]
 1109 06a8 4FEA1313 		lsr	r3, r3, #4
 1110 06ac DBB2     		uxtb	r3, r3
 1111 06ae 0FE0     		b	.L70
 1112              	.L69:
 1113              		.loc 1 941 0 discriminator 2
 1114 06b0 7B69     		ldr	r3, [r7, #20]
 1115 06b2 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1116 06b4 DBB2     		uxtb	r3, r3
 1117 06b6 23F00F03 		bic	r3, r3, #15
 1118 06ba DAB2     		uxtb	r2, r3
 1119 06bc 7B68     		ldr	r3, [r7, #4]
 1120 06be 4FEA1323 		lsr	r3, r3, #8
 1121 06c2 DBB2     		uxtb	r3, r3
 1122 06c4 03F00F03 		and	r3, r3, #15
 1123 06c8 DBB2     		uxtb	r3, r3
 1124 06ca 1343     		orrs	r3, r3, r2
 1125 06cc DBB2     		uxtb	r3, r3
 1126 06ce DBB2     		uxtb	r3, r3
 1127              	.L70:
 1128              		.loc 1 941 0 discriminator 3
 1129 06d0 7A69     		ldr	r2, [r7, #20]
 1130 06d2 1370     		strb	r3, [r2, #0]
 942:../Sources/ff10b/src/ff.c **** 			break;
 1131              		.loc 1 942 0 is_stmt 1 discriminator 3
 1132 06d4 8AE0     		b	.L65
 1133              	.L62:
 943:../Sources/ff10b/src/ff.c **** 
 944:../Sources/ff10b/src/ff.c **** 		case FS_FAT16 :
 945:../Sources/ff10b/src/ff.c **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 1134              		.loc 1 945 0
 1135 06d6 FB68     		ldr	r3, [r7, #12]
 1136 06d8 1A6A     		ldr	r2, [r3, #32]
 1137 06da BB68     		ldr	r3, [r7, #8]
 1138 06dc 4FEA1323 		lsr	r3, r3, #8
 1139 06e0 D318     		adds	r3, r2, r3
 1140 06e2 F868     		ldr	r0, [r7, #12]
 1141 06e4 1946     		mov	r1, r3
 1142 06e6 FFF775FD 		bl	move_window
 1143 06ea 0346     		mov	r3, r0
 1144 06ec FB77     		strb	r3, [r7, #31]
 946:../Sources/ff10b/src/ff.c **** 			if (res != FR_OK) break;
 1145              		.loc 1 946 0
 1146 06ee FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 1147 06f0 002B     		cmp	r3, #0
 1148 06f2 78D1     		bne	.L77
 1149              	.L71:
 947:../Sources/ff10b/src/ff.c **** 			p = &fs->win[clst * 2 % SS(fs)];
 1150              		.loc 1 947 0
 1151 06f4 BB68     		ldr	r3, [r7, #8]
 1152 06f6 4FEA4303 		lsl	r3, r3, #1
 1153 06fa 4FEAC353 		lsl	r3, r3, #23
 1154 06fe 4FEAD353 		lsr	r3, r3, #23
 1155 0702 03F13003 		add	r3, r3, #48
 1156 0706 FA68     		ldr	r2, [r7, #12]
 1157 0708 D318     		adds	r3, r2, r3
 1158 070a 7B61     		str	r3, [r7, #20]
 948:../Sources/ff10b/src/ff.c **** 			ST_WORD(p, (WORD)val);
 1159              		.loc 1 948 0
 1160 070c 7B68     		ldr	r3, [r7, #4]
 1161 070e DAB2     		uxtb	r2, r3
 1162 0710 7B69     		ldr	r3, [r7, #20]
 1163 0712 1A70     		strb	r2, [r3, #0]
 1164 0714 7B69     		ldr	r3, [r7, #20]
 1165 0716 03F10103 		add	r3, r3, #1
 1166 071a 7A68     		ldr	r2, [r7, #4]
 1167 071c 92B2     		uxth	r2, r2
 1168 071e 4FEA1222 		lsr	r2, r2, #8
 1169 0722 92B2     		uxth	r2, r2
 1170 0724 D2B2     		uxtb	r2, r2
 1171 0726 1A70     		strb	r2, [r3, #0]
 949:../Sources/ff10b/src/ff.c **** 			break;
 1172              		.loc 1 949 0
 1173 0728 60E0     		b	.L65
 1174              	.L63:
 950:../Sources/ff10b/src/ff.c **** 
 951:../Sources/ff10b/src/ff.c **** 		case FS_FAT32 :
 952:../Sources/ff10b/src/ff.c **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 1175              		.loc 1 952 0
 1176 072a FB68     		ldr	r3, [r7, #12]
 1177 072c 1A6A     		ldr	r2, [r3, #32]
 1178 072e BB68     		ldr	r3, [r7, #8]
 1179 0730 4FEAD313 		lsr	r3, r3, #7
 1180 0734 D318     		adds	r3, r2, r3
 1181 0736 F868     		ldr	r0, [r7, #12]
 1182 0738 1946     		mov	r1, r3
 1183 073a FFF74BFD 		bl	move_window
 1184 073e 0346     		mov	r3, r0
 1185 0740 FB77     		strb	r3, [r7, #31]
 953:../Sources/ff10b/src/ff.c **** 			if (res != FR_OK) break;
 1186              		.loc 1 953 0
 1187 0742 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 1188 0744 002B     		cmp	r3, #0
 1189 0746 50D1     		bne	.L78
 1190              	.L72:
 954:../Sources/ff10b/src/ff.c **** 			p = &fs->win[clst * 4 % SS(fs)];
 1191              		.loc 1 954 0
 1192 0748 BB68     		ldr	r3, [r7, #8]
 1193 074a 4FEA8303 		lsl	r3, r3, #2
 1194 074e 4FEAC353 		lsl	r3, r3, #23
 1195 0752 4FEAD353 		lsr	r3, r3, #23
 1196 0756 03F13003 		add	r3, r3, #48
 1197 075a FA68     		ldr	r2, [r7, #12]
 1198 075c D318     		adds	r3, r2, r3
 1199 075e 7B61     		str	r3, [r7, #20]
 955:../Sources/ff10b/src/ff.c **** 			val |= LD_DWORD(p) & 0xF0000000;
 1200              		.loc 1 955 0
 1201 0760 7B69     		ldr	r3, [r7, #20]
 1202 0762 03F10303 		add	r3, r3, #3
 1203 0766 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1204 0768 4FEA0362 		lsl	r2, r3, #24
 1205 076c 7B69     		ldr	r3, [r7, #20]
 1206 076e 03F10203 		add	r3, r3, #2
 1207 0772 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1208 0774 4FEA0343 		lsl	r3, r3, #16
 1209 0778 1A43     		orrs	r2, r2, r3
 1210 077a 7B69     		ldr	r3, [r7, #20]
 1211 077c 03F10103 		add	r3, r3, #1
 1212 0780 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1213 0782 4FEA0323 		lsl	r3, r3, #8
 1214 0786 1A43     		orrs	r2, r2, r3
 1215 0788 7B69     		ldr	r3, [r7, #20]
 1216 078a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1217 078c 1343     		orrs	r3, r3, r2
 1218 078e 03F07043 		and	r3, r3, #-268435456
 1219 0792 7A68     		ldr	r2, [r7, #4]
 1220 0794 1343     		orrs	r3, r3, r2
 1221 0796 7B60     		str	r3, [r7, #4]
 956:../Sources/ff10b/src/ff.c **** 			ST_DWORD(p, val);
 1222              		.loc 1 956 0
 1223 0798 7B68     		ldr	r3, [r7, #4]
 1224 079a DAB2     		uxtb	r2, r3
 1225 079c 7B69     		ldr	r3, [r7, #20]
 1226 079e 1A70     		strb	r2, [r3, #0]
 1227 07a0 7B69     		ldr	r3, [r7, #20]
 1228 07a2 03F10103 		add	r3, r3, #1
 1229 07a6 7A68     		ldr	r2, [r7, #4]
 1230 07a8 92B2     		uxth	r2, r2
 1231 07aa 4FEA1222 		lsr	r2, r2, #8
 1232 07ae 92B2     		uxth	r2, r2
 1233 07b0 D2B2     		uxtb	r2, r2
 1234 07b2 1A70     		strb	r2, [r3, #0]
 1235 07b4 7B69     		ldr	r3, [r7, #20]
 1236 07b6 03F10203 		add	r3, r3, #2
 1237 07ba 7A68     		ldr	r2, [r7, #4]
 1238 07bc 4FEA1242 		lsr	r2, r2, #16
 1239 07c0 D2B2     		uxtb	r2, r2
 1240 07c2 1A70     		strb	r2, [r3, #0]
 1241 07c4 7B69     		ldr	r3, [r7, #20]
 1242 07c6 03F10303 		add	r3, r3, #3
 1243 07ca 7A68     		ldr	r2, [r7, #4]
 1244 07cc 4FEA1262 		lsr	r2, r2, #24
 1245 07d0 D2B2     		uxtb	r2, r2
 1246 07d2 1A70     		strb	r2, [r3, #0]
 957:../Sources/ff10b/src/ff.c **** 			break;
 1247              		.loc 1 957 0
 1248 07d4 0AE0     		b	.L65
 1249              	.L74:
 958:../Sources/ff10b/src/ff.c **** 
 959:../Sources/ff10b/src/ff.c **** 		default :
 960:../Sources/ff10b/src/ff.c **** 			res = FR_INT_ERR;
 1250              		.loc 1 960 0
 1251 07d6 4FF00203 		mov	r3, #2
 1252 07da FB77     		strb	r3, [r7, #31]
 1253 07dc 06E0     		b	.L65
 1254              	.L75:
 933:../Sources/ff10b/src/ff.c **** 			if (res != FR_OK) break;
 1255              		.loc 1 933 0
 1256 07de 00BF     		nop
 1257 07e0 04E0     		b	.L65
 1258              	.L76:
 939:../Sources/ff10b/src/ff.c **** 			if (res != FR_OK) break;
 1259              		.loc 1 939 0
 1260 07e2 00BF     		nop
 1261 07e4 02E0     		b	.L65
 1262              	.L77:
 946:../Sources/ff10b/src/ff.c **** 			if (res != FR_OK) break;
 1263              		.loc 1 946 0
 1264 07e6 00BF     		nop
 1265 07e8 00E0     		b	.L65
 1266              	.L78:
 953:../Sources/ff10b/src/ff.c **** 			if (res != FR_OK) break;
 1267              		.loc 1 953 0
 1268 07ea 00BF     		nop
 1269              	.L65:
 961:../Sources/ff10b/src/ff.c **** 		}
 962:../Sources/ff10b/src/ff.c **** 		fs->wflag = 1;
 1270              		.loc 1 962 0
 1271 07ec FB68     		ldr	r3, [r7, #12]
 1272 07ee 4FF00102 		mov	r2, #1
 1273 07f2 1A71     		strb	r2, [r3, #4]
 1274              	.L59:
 963:../Sources/ff10b/src/ff.c **** 	}
 964:../Sources/ff10b/src/ff.c **** 
 965:../Sources/ff10b/src/ff.c **** 	return res;
 1275              		.loc 1 965 0
 1276 07f4 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 966:../Sources/ff10b/src/ff.c **** }
 1277              		.loc 1 966 0
 1278 07f6 1846     		mov	r0, r3
 1279 07f8 07F12007 		add	r7, r7, #32
 1280 07fc BD46     		mov	sp, r7
 1281 07fe 80BD     		pop	{r7, pc}
 1282              		.cfi_endproc
 1283              	.LFE10:
 1285              		.align	2
 1286              		.thumb
 1287              		.thumb_func
 1289              	remove_chain:
 1290              	.LFB11:
 967:../Sources/ff10b/src/ff.c **** #endif /* !_FS_READONLY */
 968:../Sources/ff10b/src/ff.c **** 
 969:../Sources/ff10b/src/ff.c **** 
 970:../Sources/ff10b/src/ff.c **** 
 971:../Sources/ff10b/src/ff.c **** 
 972:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
 973:../Sources/ff10b/src/ff.c **** /* FAT handling - Remove a cluster chain                                 */
 974:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
 975:../Sources/ff10b/src/ff.c **** #if !_FS_READONLY
 976:../Sources/ff10b/src/ff.c **** static
 977:../Sources/ff10b/src/ff.c **** FRESULT remove_chain (
 978:../Sources/ff10b/src/ff.c **** 	FATFS* fs,			/* File system object */
 979:../Sources/ff10b/src/ff.c **** 	DWORD clst			/* Cluster# to remove a chain from */
 980:../Sources/ff10b/src/ff.c **** )
 981:../Sources/ff10b/src/ff.c **** {
 1291              		.loc 1 981 0
 1292              		.cfi_startproc
 1293              		@ args = 0, pretend = 0, frame = 16
 1294              		@ frame_needed = 1, uses_anonymous_args = 0
 1295 0800 80B5     		push	{r7, lr}
 1296              	.LCFI32:
 1297              		.cfi_def_cfa_offset 8
 1298              		.cfi_offset 7, -8
 1299              		.cfi_offset 14, -4
 1300 0802 84B0     		sub	sp, sp, #16
 1301              	.LCFI33:
 1302              		.cfi_def_cfa_offset 24
 1303 0804 00AF     		add	r7, sp, #0
 1304              	.LCFI34:
 1305              		.cfi_def_cfa_register 7
 1306 0806 7860     		str	r0, [r7, #4]
 1307 0808 3960     		str	r1, [r7, #0]
 982:../Sources/ff10b/src/ff.c **** 	FRESULT res;
 983:../Sources/ff10b/src/ff.c **** 	DWORD nxt;
 984:../Sources/ff10b/src/ff.c **** #if _USE_ERASE
 985:../Sources/ff10b/src/ff.c **** 	DWORD scl = clst, ecl = clst, rt[2];
 986:../Sources/ff10b/src/ff.c **** #endif
 987:../Sources/ff10b/src/ff.c **** 
 988:../Sources/ff10b/src/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 1308              		.loc 1 988 0
 1309 080a 3B68     		ldr	r3, [r7, #0]
 1310 080c 012B     		cmp	r3, #1
 1311 080e 04D9     		bls	.L80
 1312              		.loc 1 988 0 is_stmt 0 discriminator 1
 1313 0810 7B68     		ldr	r3, [r7, #4]
 1314 0812 5A69     		ldr	r2, [r3, #20]
 1315 0814 3B68     		ldr	r3, [r7, #0]
 1316 0816 9A42     		cmp	r2, r3
 1317 0818 03D8     		bhi	.L81
 1318              	.L80:
 989:../Sources/ff10b/src/ff.c **** 		res = FR_INT_ERR;
 1319              		.loc 1 989 0 is_stmt 1
 1320 081a 4FF00203 		mov	r3, #2
 1321 081e FB73     		strb	r3, [r7, #15]
 1322 0820 42E0     		b	.L82
 1323              	.L81:
 990:../Sources/ff10b/src/ff.c **** 
 991:../Sources/ff10b/src/ff.c **** 	} else {
 992:../Sources/ff10b/src/ff.c **** 		res = FR_OK;
 1324              		.loc 1 992 0
 1325 0822 4FF00003 		mov	r3, #0
 1326 0826 FB73     		strb	r3, [r7, #15]
 993:../Sources/ff10b/src/ff.c **** 		while (clst < fs->n_fatent) {			/* Not a last link? */
 1327              		.loc 1 993 0
 1328 0828 35E0     		b	.L83
 1329              	.L89:
 994:../Sources/ff10b/src/ff.c **** 			nxt = get_fat(fs, clst);			/* Get cluster status */
 1330              		.loc 1 994 0
 1331 082a 7868     		ldr	r0, [r7, #4]
 1332 082c 3968     		ldr	r1, [r7, #0]
 1333 082e FFF7FEFF 		bl	get_fat
 1334 0832 B860     		str	r0, [r7, #8]
 995:../Sources/ff10b/src/ff.c **** 			if (nxt == 0) break;				/* Empty cluster? */
 1335              		.loc 1 995 0
 1336 0834 BB68     		ldr	r3, [r7, #8]
 1337 0836 002B     		cmp	r3, #0
 1338 0838 33D0     		beq	.L91
 1339              	.L84:
 996:../Sources/ff10b/src/ff.c **** 			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 1340              		.loc 1 996 0
 1341 083a BB68     		ldr	r3, [r7, #8]
 1342 083c 012B     		cmp	r3, #1
 1343 083e 03D1     		bne	.L85
 1344              		.loc 1 996 0 is_stmt 0 discriminator 1
 1345 0840 4FF00203 		mov	r3, #2
 1346 0844 FB73     		strb	r3, [r7, #15]
 1347 0846 2FE0     		b	.L82
 1348              	.L85:
 997:../Sources/ff10b/src/ff.c **** 			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 1349              		.loc 1 997 0 is_stmt 1
 1350 0848 BB68     		ldr	r3, [r7, #8]
 1351 084a B3F1FF3F 		cmp	r3, #-1
 1352 084e 03D1     		bne	.L86
 1353              		.loc 1 997 0 is_stmt 0 discriminator 1
 1354 0850 4FF00103 		mov	r3, #1
 1355 0854 FB73     		strb	r3, [r7, #15]
 1356 0856 27E0     		b	.L82
 1357              	.L86:
 998:../Sources/ff10b/src/ff.c **** 			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 1358              		.loc 1 998 0 is_stmt 1
 1359 0858 7868     		ldr	r0, [r7, #4]
 1360 085a 3968     		ldr	r1, [r7, #0]
 1361 085c 4FF00002 		mov	r2, #0
 1362 0860 FFF7FEFF 		bl	put_fat
 1363 0864 0346     		mov	r3, r0
 1364 0866 FB73     		strb	r3, [r7, #15]
 999:../Sources/ff10b/src/ff.c **** 			if (res != FR_OK) break;
 1365              		.loc 1 999 0
 1366 0868 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1367 086a 002B     		cmp	r3, #0
 1368 086c 1BD1     		bne	.L92
 1369              	.L87:
1000:../Sources/ff10b/src/ff.c **** 			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 1370              		.loc 1 1000 0
 1371 086e 7B68     		ldr	r3, [r7, #4]
 1372 0870 1B69     		ldr	r3, [r3, #16]
 1373 0872 B3F1FF3F 		cmp	r3, #-1
 1374 0876 0CD0     		beq	.L88
1001:../Sources/ff10b/src/ff.c **** 				fs->free_clust++;
 1375              		.loc 1 1001 0
 1376 0878 7B68     		ldr	r3, [r7, #4]
 1377 087a 1B69     		ldr	r3, [r3, #16]
 1378 087c 03F10102 		add	r2, r3, #1
 1379 0880 7B68     		ldr	r3, [r7, #4]
 1380 0882 1A61     		str	r2, [r3, #16]
1002:../Sources/ff10b/src/ff.c **** 				fs->fsi_flag |= 1;
 1381              		.loc 1 1002 0
 1382 0884 7B68     		ldr	r3, [r7, #4]
 1383 0886 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 1384 0888 43F00103 		orr	r3, r3, #1
 1385 088c DAB2     		uxtb	r2, r3
 1386 088e 7B68     		ldr	r3, [r7, #4]
 1387 0890 5A71     		strb	r2, [r3, #5]
 1388              	.L88:
1003:../Sources/ff10b/src/ff.c **** 			}
1004:../Sources/ff10b/src/ff.c **** #if _USE_ERASE
1005:../Sources/ff10b/src/ff.c **** 			if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
1006:../Sources/ff10b/src/ff.c **** 				ecl = nxt;
1007:../Sources/ff10b/src/ff.c **** 			} else {				/* End of contiguous clusters */ 
1008:../Sources/ff10b/src/ff.c **** 				rt[0] = clust2sect(fs, scl);					/* Start sector */
1009:../Sources/ff10b/src/ff.c **** 				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
1010:../Sources/ff10b/src/ff.c **** 				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, rt);		/* Erase the block */
1011:../Sources/ff10b/src/ff.c **** 				scl = ecl = nxt;
1012:../Sources/ff10b/src/ff.c **** 			}
1013:../Sources/ff10b/src/ff.c **** #endif
1014:../Sources/ff10b/src/ff.c **** 			clst = nxt;	/* Next cluster */
 1389              		.loc 1 1014 0
 1390 0892 BB68     		ldr	r3, [r7, #8]
 1391 0894 3B60     		str	r3, [r7, #0]
 1392              	.L83:
 993:../Sources/ff10b/src/ff.c **** 		while (clst < fs->n_fatent) {			/* Not a last link? */
 1393              		.loc 1 993 0 discriminator 1
 1394 0896 7B68     		ldr	r3, [r7, #4]
 1395 0898 5A69     		ldr	r2, [r3, #20]
 1396 089a 3B68     		ldr	r3, [r7, #0]
 1397 089c 9A42     		cmp	r2, r3
 1398 089e C4D8     		bhi	.L89
 1399 08a0 02E0     		b	.L82
 1400              	.L91:
 995:../Sources/ff10b/src/ff.c **** 			if (nxt == 0) break;				/* Empty cluster? */
 1401              		.loc 1 995 0
 1402 08a2 00BF     		nop
 1403 08a4 00E0     		b	.L82
 1404              	.L92:
 999:../Sources/ff10b/src/ff.c **** 			if (res != FR_OK) break;
 1405              		.loc 1 999 0
 1406 08a6 00BF     		nop
 1407              	.L82:
1015:../Sources/ff10b/src/ff.c **** 		}
1016:../Sources/ff10b/src/ff.c **** 	}
1017:../Sources/ff10b/src/ff.c **** 
1018:../Sources/ff10b/src/ff.c **** 	return res;
 1408              		.loc 1 1018 0
 1409 08a8 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1019:../Sources/ff10b/src/ff.c **** }
 1410              		.loc 1 1019 0
 1411 08aa 1846     		mov	r0, r3
 1412 08ac 07F11007 		add	r7, r7, #16
 1413 08b0 BD46     		mov	sp, r7
 1414 08b2 80BD     		pop	{r7, pc}
 1415              		.cfi_endproc
 1416              	.LFE11:
 1418              		.align	2
 1419              		.thumb
 1420              		.thumb_func
 1422              	create_chain:
 1423              	.LFB12:
1020:../Sources/ff10b/src/ff.c **** #endif
1021:../Sources/ff10b/src/ff.c **** 
1022:../Sources/ff10b/src/ff.c **** 
1023:../Sources/ff10b/src/ff.c **** 
1024:../Sources/ff10b/src/ff.c **** 
1025:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
1026:../Sources/ff10b/src/ff.c **** /* FAT handling - Stretch or Create a cluster chain                      */
1027:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
1028:../Sources/ff10b/src/ff.c **** #if !_FS_READONLY
1029:../Sources/ff10b/src/ff.c **** static
1030:../Sources/ff10b/src/ff.c **** DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster
1031:../Sources/ff10b/src/ff.c **** 	FATFS* fs,			/* File system object */
1032:../Sources/ff10b/src/ff.c **** 	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
1033:../Sources/ff10b/src/ff.c **** )
1034:../Sources/ff10b/src/ff.c **** {
 1424              		.loc 1 1034 0
 1425              		.cfi_startproc
 1426              		@ args = 0, pretend = 0, frame = 24
 1427              		@ frame_needed = 1, uses_anonymous_args = 0
 1428 08b4 80B5     		push	{r7, lr}
 1429              	.LCFI35:
 1430              		.cfi_def_cfa_offset 8
 1431              		.cfi_offset 7, -8
 1432              		.cfi_offset 14, -4
 1433 08b6 86B0     		sub	sp, sp, #24
 1434              	.LCFI36:
 1435              		.cfi_def_cfa_offset 32
 1436 08b8 00AF     		add	r7, sp, #0
 1437              	.LCFI37:
 1438              		.cfi_def_cfa_register 7
 1439 08ba 7860     		str	r0, [r7, #4]
 1440 08bc 3960     		str	r1, [r7, #0]
1035:../Sources/ff10b/src/ff.c **** 	DWORD cs, ncl, scl;
1036:../Sources/ff10b/src/ff.c **** 	FRESULT res;
1037:../Sources/ff10b/src/ff.c **** 
1038:../Sources/ff10b/src/ff.c **** 
1039:../Sources/ff10b/src/ff.c **** 	if (clst == 0) {		/* Create a new chain */
 1441              		.loc 1 1039 0
 1442 08be 3B68     		ldr	r3, [r7, #0]
 1443 08c0 002B     		cmp	r3, #0
 1444 08c2 0ED1     		bne	.L94
1040:../Sources/ff10b/src/ff.c **** 		scl = fs->last_clust;			/* Get suggested start point */
 1445              		.loc 1 1040 0
 1446 08c4 7B68     		ldr	r3, [r7, #4]
 1447 08c6 DB68     		ldr	r3, [r3, #12]
 1448 08c8 3B61     		str	r3, [r7, #16]
1041:../Sources/ff10b/src/ff.c **** 		if (!scl || scl >= fs->n_fatent) scl = 1;
 1449              		.loc 1 1041 0
 1450 08ca 3B69     		ldr	r3, [r7, #16]
 1451 08cc 002B     		cmp	r3, #0
 1452 08ce 04D0     		beq	.L95
 1453              		.loc 1 1041 0 is_stmt 0 discriminator 2
 1454 08d0 7B68     		ldr	r3, [r7, #4]
 1455 08d2 5A69     		ldr	r2, [r3, #20]
 1456 08d4 3B69     		ldr	r3, [r7, #16]
 1457 08d6 9A42     		cmp	r2, r3
 1458 08d8 1DD8     		bhi	.L96
 1459              	.L95:
 1460              		.loc 1 1041 0 discriminator 1
 1461 08da 4FF00103 		mov	r3, #1
 1462 08de 3B61     		str	r3, [r7, #16]
 1463 08e0 19E0     		b	.L96
 1464              	.L94:
1042:../Sources/ff10b/src/ff.c **** 	}
1043:../Sources/ff10b/src/ff.c **** 	else {					/* Stretch the current chain */
1044:../Sources/ff10b/src/ff.c **** 		cs = get_fat(fs, clst);			/* Check the cluster status */
 1465              		.loc 1 1044 0 is_stmt 1
 1466 08e2 7868     		ldr	r0, [r7, #4]
 1467 08e4 3968     		ldr	r1, [r7, #0]
 1468 08e6 FFF7FEFF 		bl	get_fat
 1469 08ea B860     		str	r0, [r7, #8]
1045:../Sources/ff10b/src/ff.c **** 		if (cs < 2) return 1;			/* Invalid value */
 1470              		.loc 1 1045 0
 1471 08ec BB68     		ldr	r3, [r7, #8]
 1472 08ee 012B     		cmp	r3, #1
 1473 08f0 02D8     		bhi	.L97
 1474              		.loc 1 1045 0 is_stmt 0 discriminator 1
 1475 08f2 4FF00103 		mov	r3, #1
 1476 08f6 76E0     		b	.L98
 1477              	.L97:
1046:../Sources/ff10b/src/ff.c **** 		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 1478              		.loc 1 1046 0 is_stmt 1
 1479 08f8 BB68     		ldr	r3, [r7, #8]
 1480 08fa B3F1FF3F 		cmp	r3, #-1
 1481 08fe 01D1     		bne	.L99
 1482              		.loc 1 1046 0 is_stmt 0 discriminator 1
 1483 0900 BB68     		ldr	r3, [r7, #8]
 1484 0902 70E0     		b	.L98
 1485              	.L99:
1047:../Sources/ff10b/src/ff.c **** 		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 1486              		.loc 1 1047 0 is_stmt 1
 1487 0904 7B68     		ldr	r3, [r7, #4]
 1488 0906 5A69     		ldr	r2, [r3, #20]
 1489 0908 BB68     		ldr	r3, [r7, #8]
 1490 090a 9A42     		cmp	r2, r3
 1491 090c 01D9     		bls	.L100
 1492              		.loc 1 1047 0 is_stmt 0 discriminator 1
 1493 090e BB68     		ldr	r3, [r7, #8]
 1494 0910 69E0     		b	.L98
 1495              	.L100:
1048:../Sources/ff10b/src/ff.c **** 		scl = clst;
 1496              		.loc 1 1048 0 is_stmt 1
 1497 0912 3B68     		ldr	r3, [r7, #0]
 1498 0914 3B61     		str	r3, [r7, #16]
 1499              	.L96:
1049:../Sources/ff10b/src/ff.c **** 	}
1050:../Sources/ff10b/src/ff.c **** 
1051:../Sources/ff10b/src/ff.c **** 	ncl = scl;				/* Start cluster */
 1500              		.loc 1 1051 0
 1501 0916 3B69     		ldr	r3, [r7, #16]
 1502 0918 7B61     		str	r3, [r7, #20]
 1503 091a 00E0     		b	.L107
 1504              	.L115:
1052:../Sources/ff10b/src/ff.c **** 	for (;;) {
1053:../Sources/ff10b/src/ff.c **** 		ncl++;							/* Next cluster */
1054:../Sources/ff10b/src/ff.c **** 		if (ncl >= fs->n_fatent) {		/* Check wrap around */
1055:../Sources/ff10b/src/ff.c **** 			ncl = 2;
1056:../Sources/ff10b/src/ff.c **** 			if (ncl > scl) return 0;	/* No free cluster */
1057:../Sources/ff10b/src/ff.c **** 		}
1058:../Sources/ff10b/src/ff.c **** 		cs = get_fat(fs, ncl);			/* Get the cluster status */
1059:../Sources/ff10b/src/ff.c **** 		if (cs == 0) break;				/* Found a free cluster */
1060:../Sources/ff10b/src/ff.c **** 		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
1061:../Sources/ff10b/src/ff.c **** 			return cs;
1062:../Sources/ff10b/src/ff.c **** 		if (ncl == scl) return 0;		/* No free cluster */
1063:../Sources/ff10b/src/ff.c **** 	}
 1505              		.loc 1 1063 0
 1506 091c 00BF     		nop
 1507              	.L107:
1053:../Sources/ff10b/src/ff.c **** 		ncl++;							/* Next cluster */
 1508              		.loc 1 1053 0
 1509 091e 7B69     		ldr	r3, [r7, #20]
 1510 0920 03F10103 		add	r3, r3, #1
 1511 0924 7B61     		str	r3, [r7, #20]
1054:../Sources/ff10b/src/ff.c **** 		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 1512              		.loc 1 1054 0
 1513 0926 7B68     		ldr	r3, [r7, #4]
 1514 0928 5A69     		ldr	r2, [r3, #20]
 1515 092a 7B69     		ldr	r3, [r7, #20]
 1516 092c 9A42     		cmp	r2, r3
 1517 092e 09D8     		bhi	.L101
1055:../Sources/ff10b/src/ff.c **** 			ncl = 2;
 1518              		.loc 1 1055 0
 1519 0930 4FF00203 		mov	r3, #2
 1520 0934 7B61     		str	r3, [r7, #20]
1056:../Sources/ff10b/src/ff.c **** 			if (ncl > scl) return 0;	/* No free cluster */
 1521              		.loc 1 1056 0
 1522 0936 7A69     		ldr	r2, [r7, #20]
 1523 0938 3B69     		ldr	r3, [r7, #16]
 1524 093a 9A42     		cmp	r2, r3
 1525 093c 02D9     		bls	.L101
1056:../Sources/ff10b/src/ff.c **** 			if (ncl > scl) return 0;	/* No free cluster */
 1526              		.loc 1 1056 0 is_stmt 0 discriminator 1
 1527 093e 4FF00003 		mov	r3, #0
 1528 0942 50E0     		b	.L98
 1529              	.L101:
1058:../Sources/ff10b/src/ff.c **** 		cs = get_fat(fs, ncl);			/* Get the cluster status */
 1530              		.loc 1 1058 0 is_stmt 1
 1531 0944 7868     		ldr	r0, [r7, #4]
 1532 0946 7969     		ldr	r1, [r7, #20]
 1533 0948 FFF7FEFF 		bl	get_fat
 1534 094c B860     		str	r0, [r7, #8]
1059:../Sources/ff10b/src/ff.c **** 		if (cs == 0) break;				/* Found a free cluster */
 1535              		.loc 1 1059 0
 1536 094e BB68     		ldr	r3, [r7, #8]
 1537 0950 002B     		cmp	r3, #0
 1538 0952 0FD0     		beq	.L114
 1539              	.L102:
1060:../Sources/ff10b/src/ff.c **** 		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 1540              		.loc 1 1060 0
 1541 0954 BB68     		ldr	r3, [r7, #8]
 1542 0956 B3F1FF3F 		cmp	r3, #-1
 1543 095a 02D0     		beq	.L104
1060:../Sources/ff10b/src/ff.c **** 		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 1544              		.loc 1 1060 0 is_stmt 0 discriminator 1
 1545 095c BB68     		ldr	r3, [r7, #8]
 1546 095e 012B     		cmp	r3, #1
 1547 0960 01D1     		bne	.L105
 1548              	.L104:
1061:../Sources/ff10b/src/ff.c **** 			return cs;
 1549              		.loc 1 1061 0 is_stmt 1
 1550 0962 BB68     		ldr	r3, [r7, #8]
 1551 0964 3FE0     		b	.L98
 1552              	.L105:
1062:../Sources/ff10b/src/ff.c **** 		if (ncl == scl) return 0;		/* No free cluster */
 1553              		.loc 1 1062 0
 1554 0966 7A69     		ldr	r2, [r7, #20]
 1555 0968 3B69     		ldr	r3, [r7, #16]
 1556 096a 9A42     		cmp	r2, r3
 1557 096c D6D1     		bne	.L115
1062:../Sources/ff10b/src/ff.c **** 		if (ncl == scl) return 0;		/* No free cluster */
 1558              		.loc 1 1062 0 is_stmt 0 discriminator 1
 1559 096e 4FF00003 		mov	r3, #0
 1560 0972 38E0     		b	.L98
 1561              	.L114:
1059:../Sources/ff10b/src/ff.c **** 		if (cs == 0) break;				/* Found a free cluster */
 1562              		.loc 1 1059 0 is_stmt 1
 1563 0974 00BF     		nop
 1564              	.L113:
1064:../Sources/ff10b/src/ff.c **** 
1065:../Sources/ff10b/src/ff.c **** 	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 1565              		.loc 1 1065 0
 1566 0976 7868     		ldr	r0, [r7, #4]
 1567 0978 7969     		ldr	r1, [r7, #20]
 1568 097a 6FF07042 		mvn	r2, #-268435456
 1569 097e FFF7FEFF 		bl	put_fat
 1570 0982 0346     		mov	r3, r0
 1571 0984 FB73     		strb	r3, [r7, #15]
1066:../Sources/ff10b/src/ff.c **** 	if (res == FR_OK && clst != 0) {
 1572              		.loc 1 1066 0
 1573 0986 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1574 0988 002B     		cmp	r3, #0
 1575 098a 09D1     		bne	.L108
 1576              		.loc 1 1066 0 is_stmt 0 discriminator 1
 1577 098c 3B68     		ldr	r3, [r7, #0]
 1578 098e 002B     		cmp	r3, #0
 1579 0990 06D0     		beq	.L108
1067:../Sources/ff10b/src/ff.c **** 		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 1580              		.loc 1 1067 0 is_stmt 1
 1581 0992 7868     		ldr	r0, [r7, #4]
 1582 0994 3968     		ldr	r1, [r7, #0]
 1583 0996 7A69     		ldr	r2, [r7, #20]
 1584 0998 FFF7FEFF 		bl	put_fat
 1585 099c 0346     		mov	r3, r0
 1586 099e FB73     		strb	r3, [r7, #15]
 1587              	.L108:
1068:../Sources/ff10b/src/ff.c **** 	}
1069:../Sources/ff10b/src/ff.c **** 	if (res == FR_OK) {
 1588              		.loc 1 1069 0
 1589 09a0 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1590 09a2 002B     		cmp	r3, #0
 1591 09a4 15D1     		bne	.L109
1070:../Sources/ff10b/src/ff.c **** 		fs->last_clust = ncl;			/* Update FSINFO */
 1592              		.loc 1 1070 0
 1593 09a6 7B68     		ldr	r3, [r7, #4]
 1594 09a8 7A69     		ldr	r2, [r7, #20]
 1595 09aa DA60     		str	r2, [r3, #12]
1071:../Sources/ff10b/src/ff.c **** 		if (fs->free_clust != 0xFFFFFFFF) {
 1596              		.loc 1 1071 0
 1597 09ac 7B68     		ldr	r3, [r7, #4]
 1598 09ae 1B69     		ldr	r3, [r3, #16]
 1599 09b0 B3F1FF3F 		cmp	r3, #-1
 1600 09b4 16D0     		beq	.L110
1072:../Sources/ff10b/src/ff.c **** 			fs->free_clust--;
 1601              		.loc 1 1072 0
 1602 09b6 7B68     		ldr	r3, [r7, #4]
 1603 09b8 1B69     		ldr	r3, [r3, #16]
 1604 09ba 03F1FF32 		add	r2, r3, #-1
 1605 09be 7B68     		ldr	r3, [r7, #4]
 1606 09c0 1A61     		str	r2, [r3, #16]
1073:../Sources/ff10b/src/ff.c **** 			fs->fsi_flag |= 1;
 1607              		.loc 1 1073 0
 1608 09c2 7B68     		ldr	r3, [r7, #4]
 1609 09c4 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 1610 09c6 43F00103 		orr	r3, r3, #1
 1611 09ca DAB2     		uxtb	r2, r3
 1612 09cc 7B68     		ldr	r3, [r7, #4]
 1613 09ce 5A71     		strb	r2, [r3, #5]
 1614 09d0 08E0     		b	.L110
 1615              	.L109:
1074:../Sources/ff10b/src/ff.c **** 		}
1075:../Sources/ff10b/src/ff.c **** 	} else {
1076:../Sources/ff10b/src/ff.c **** 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 1616              		.loc 1 1076 0
 1617 09d2 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1618 09d4 012B     		cmp	r3, #1
 1619 09d6 02D1     		bne	.L111
 1620              		.loc 1 1076 0 is_stmt 0 discriminator 1
 1621 09d8 4FF0FF33 		mov	r3, #-1
 1622 09dc 01E0     		b	.L112
 1623              	.L111:
 1624              		.loc 1 1076 0 discriminator 2
 1625 09de 4FF00103 		mov	r3, #1
 1626              	.L112:
 1627              		.loc 1 1076 0 discriminator 3
 1628 09e2 7B61     		str	r3, [r7, #20]
 1629              	.L110:
1077:../Sources/ff10b/src/ff.c **** 	}
1078:../Sources/ff10b/src/ff.c **** 
1079:../Sources/ff10b/src/ff.c **** 	return ncl;		/* Return new cluster number or error code */
 1630              		.loc 1 1079 0 is_stmt 1
 1631 09e4 7B69     		ldr	r3, [r7, #20]
 1632              	.L98:
1080:../Sources/ff10b/src/ff.c **** }
 1633              		.loc 1 1080 0
 1634 09e6 1846     		mov	r0, r3
 1635 09e8 07F11807 		add	r7, r7, #24
 1636 09ec BD46     		mov	sp, r7
 1637 09ee 80BD     		pop	{r7, pc}
 1638              		.cfi_endproc
 1639              	.LFE12:
 1641              		.align	2
 1642              		.thumb
 1643              		.thumb_func
 1645              	dir_sdi:
 1646              	.LFB13:
1081:../Sources/ff10b/src/ff.c **** #endif /* !_FS_READONLY */
1082:../Sources/ff10b/src/ff.c **** 
1083:../Sources/ff10b/src/ff.c **** 
1084:../Sources/ff10b/src/ff.c **** 
1085:../Sources/ff10b/src/ff.c **** 
1086:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
1087:../Sources/ff10b/src/ff.c **** /* FAT handling - Convert offset into cluster with link map table        */
1088:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
1089:../Sources/ff10b/src/ff.c **** 
1090:../Sources/ff10b/src/ff.c **** #if _USE_FASTSEEK
1091:../Sources/ff10b/src/ff.c **** static
1092:../Sources/ff10b/src/ff.c **** DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
1093:../Sources/ff10b/src/ff.c **** 	FIL* fp,		/* Pointer to the file object */
1094:../Sources/ff10b/src/ff.c **** 	DWORD ofs		/* File offset to be converted to cluster# */
1095:../Sources/ff10b/src/ff.c **** )
1096:../Sources/ff10b/src/ff.c **** {
1097:../Sources/ff10b/src/ff.c **** 	DWORD cl, ncl, *tbl;
1098:../Sources/ff10b/src/ff.c **** 
1099:../Sources/ff10b/src/ff.c **** 
1100:../Sources/ff10b/src/ff.c **** 	tbl = fp->cltbl + 1;	/* Top of CLMT */
1101:../Sources/ff10b/src/ff.c **** 	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
1102:../Sources/ff10b/src/ff.c **** 	for (;;) {
1103:../Sources/ff10b/src/ff.c **** 		ncl = *tbl++;			/* Number of cluters in the fragment */
1104:../Sources/ff10b/src/ff.c **** 		if (!ncl) return 0;		/* End of table? (error) */
1105:../Sources/ff10b/src/ff.c **** 		if (cl < ncl) break;	/* In this fragment? */
1106:../Sources/ff10b/src/ff.c **** 		cl -= ncl; tbl++;		/* Next fragment */
1107:../Sources/ff10b/src/ff.c **** 	}
1108:../Sources/ff10b/src/ff.c **** 	return cl + *tbl;	/* Return the cluster number */
1109:../Sources/ff10b/src/ff.c **** }
1110:../Sources/ff10b/src/ff.c **** #endif	/* _USE_FASTSEEK */
1111:../Sources/ff10b/src/ff.c **** 
1112:../Sources/ff10b/src/ff.c **** 
1113:../Sources/ff10b/src/ff.c **** 
1114:../Sources/ff10b/src/ff.c **** 
1115:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
1116:../Sources/ff10b/src/ff.c **** /* Directory handling - Set directory index                              */
1117:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
1118:../Sources/ff10b/src/ff.c **** 
1119:../Sources/ff10b/src/ff.c **** static
1120:../Sources/ff10b/src/ff.c **** FRESULT dir_sdi (
1121:../Sources/ff10b/src/ff.c **** 	DIR* dp,		/* Pointer to directory object */
1122:../Sources/ff10b/src/ff.c **** 	UINT idx		/* Index of directory table */
1123:../Sources/ff10b/src/ff.c **** )
1124:../Sources/ff10b/src/ff.c **** {
 1647              		.loc 1 1124 0
 1648              		.cfi_startproc
 1649              		@ args = 0, pretend = 0, frame = 24
 1650              		@ frame_needed = 1, uses_anonymous_args = 0
 1651 09f0 80B5     		push	{r7, lr}
 1652              	.LCFI38:
 1653              		.cfi_def_cfa_offset 8
 1654              		.cfi_offset 7, -8
 1655              		.cfi_offset 14, -4
 1656 09f2 86B0     		sub	sp, sp, #24
 1657              	.LCFI39:
 1658              		.cfi_def_cfa_offset 32
 1659 09f4 00AF     		add	r7, sp, #0
 1660              	.LCFI40:
 1661              		.cfi_def_cfa_register 7
 1662 09f6 7860     		str	r0, [r7, #4]
 1663 09f8 3960     		str	r1, [r7, #0]
1125:../Sources/ff10b/src/ff.c **** 	DWORD clst, sect;
1126:../Sources/ff10b/src/ff.c **** 	UINT ic;
1127:../Sources/ff10b/src/ff.c **** 
1128:../Sources/ff10b/src/ff.c **** 
1129:../Sources/ff10b/src/ff.c **** 	dp->index = (WORD)idx;	/* Current index */
 1664              		.loc 1 1129 0
 1665 09fa 3B68     		ldr	r3, [r7, #0]
 1666 09fc 9AB2     		uxth	r2, r3
 1667 09fe 7B68     		ldr	r3, [r7, #4]
 1668 0a00 DA80     		strh	r2, [r3, #6]	@ movhi
1130:../Sources/ff10b/src/ff.c **** 	clst = dp->sclust;		/* Table start cluster (0:root) */
 1669              		.loc 1 1130 0
 1670 0a02 7B68     		ldr	r3, [r7, #4]
 1671 0a04 9B68     		ldr	r3, [r3, #8]
 1672 0a06 7B61     		str	r3, [r7, #20]
1131:../Sources/ff10b/src/ff.c **** 	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 1673              		.loc 1 1131 0
 1674 0a08 7B69     		ldr	r3, [r7, #20]
 1675 0a0a 012B     		cmp	r3, #1
 1676 0a0c 05D0     		beq	.L117
 1677              		.loc 1 1131 0 is_stmt 0 discriminator 1
 1678 0a0e 7B68     		ldr	r3, [r7, #4]
 1679 0a10 1B68     		ldr	r3, [r3, #0]
 1680 0a12 5A69     		ldr	r2, [r3, #20]
 1681 0a14 7B69     		ldr	r3, [r7, #20]
 1682 0a16 9A42     		cmp	r2, r3
 1683 0a18 02D8     		bhi	.L118
 1684              	.L117:
1132:../Sources/ff10b/src/ff.c **** 		return FR_INT_ERR;
 1685              		.loc 1 1132 0 is_stmt 1
 1686 0a1a 4FF00203 		mov	r3, #2
 1687 0a1e 6BE0     		b	.L119
 1688              	.L118:
1133:../Sources/ff10b/src/ff.c **** 	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 1689              		.loc 1 1133 0
 1690 0a20 7B69     		ldr	r3, [r7, #20]
 1691 0a22 002B     		cmp	r3, #0
 1692 0a24 08D1     		bne	.L120
 1693              		.loc 1 1133 0 is_stmt 0 discriminator 1
 1694 0a26 7B68     		ldr	r3, [r7, #4]
 1695 0a28 1B68     		ldr	r3, [r3, #0]
 1696 0a2a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1697 0a2c 032B     		cmp	r3, #3
 1698 0a2e 03D1     		bne	.L120
1134:../Sources/ff10b/src/ff.c **** 		clst = dp->fs->dirbase;
 1699              		.loc 1 1134 0 is_stmt 1
 1700 0a30 7B68     		ldr	r3, [r7, #4]
 1701 0a32 1B68     		ldr	r3, [r3, #0]
 1702 0a34 5B6A     		ldr	r3, [r3, #36]
 1703 0a36 7B61     		str	r3, [r7, #20]
 1704              	.L120:
1135:../Sources/ff10b/src/ff.c **** 
1136:../Sources/ff10b/src/ff.c **** 	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 1705              		.loc 1 1136 0
 1706 0a38 7B69     		ldr	r3, [r7, #20]
 1707 0a3a 002B     		cmp	r3, #0
 1708 0a3c 0ED1     		bne	.L121
1137:../Sources/ff10b/src/ff.c **** 		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 1709              		.loc 1 1137 0
 1710 0a3e 7B68     		ldr	r3, [r7, #4]
 1711 0a40 1B68     		ldr	r3, [r3, #0]
 1712 0a42 1B89     		ldrh	r3, [r3, #8]
 1713 0a44 1A46     		mov	r2, r3
 1714 0a46 3B68     		ldr	r3, [r7, #0]
 1715 0a48 9A42     		cmp	r2, r3
 1716 0a4a 02D8     		bhi	.L122
1138:../Sources/ff10b/src/ff.c **** 			return FR_INT_ERR;
 1717              		.loc 1 1138 0
 1718 0a4c 4FF00203 		mov	r3, #2
 1719 0a50 52E0     		b	.L119
 1720              	.L122:
1139:../Sources/ff10b/src/ff.c **** 		sect = dp->fs->dirbase;
 1721              		.loc 1 1139 0
 1722 0a52 7B68     		ldr	r3, [r7, #4]
 1723 0a54 1B68     		ldr	r3, [r3, #0]
 1724 0a56 5B6A     		ldr	r3, [r3, #36]
 1725 0a58 3B61     		str	r3, [r7, #16]
 1726 0a5a 2FE0     		b	.L123
 1727              	.L121:
1140:../Sources/ff10b/src/ff.c **** 	}
1141:../Sources/ff10b/src/ff.c **** 	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
1142:../Sources/ff10b/src/ff.c **** 		ic = SS(dp->fs) / SZ_DIR * dp->fs->csize;	/* Entries per cluster */
 1728              		.loc 1 1142 0
 1729 0a5c 7B68     		ldr	r3, [r7, #4]
 1730 0a5e 1B68     		ldr	r3, [r3, #0]
 1731 0a60 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1732 0a62 4FEA0313 		lsl	r3, r3, #4
 1733 0a66 FB60     		str	r3, [r7, #12]
1143:../Sources/ff10b/src/ff.c **** 		while (idx >= ic) {	/* Follow cluster chain */
 1734              		.loc 1 1143 0
 1735 0a68 1DE0     		b	.L124
 1736              	.L128:
1144:../Sources/ff10b/src/ff.c **** 			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 1737              		.loc 1 1144 0
 1738 0a6a 7B68     		ldr	r3, [r7, #4]
 1739 0a6c 1B68     		ldr	r3, [r3, #0]
 1740 0a6e 1846     		mov	r0, r3
 1741 0a70 7969     		ldr	r1, [r7, #20]
 1742 0a72 FFF7FEFF 		bl	get_fat
 1743 0a76 7861     		str	r0, [r7, #20]
1145:../Sources/ff10b/src/ff.c **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 1744              		.loc 1 1145 0
 1745 0a78 7B69     		ldr	r3, [r7, #20]
 1746 0a7a B3F1FF3F 		cmp	r3, #-1
 1747 0a7e 02D1     		bne	.L125
 1748              		.loc 1 1145 0 is_stmt 0 discriminator 1
 1749 0a80 4FF00103 		mov	r3, #1
 1750 0a84 38E0     		b	.L119
 1751              	.L125:
1146:../Sources/ff10b/src/ff.c **** 			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 1752              		.loc 1 1146 0 is_stmt 1
 1753 0a86 7B69     		ldr	r3, [r7, #20]
 1754 0a88 012B     		cmp	r3, #1
 1755 0a8a 05D9     		bls	.L126
 1756              		.loc 1 1146 0 is_stmt 0 discriminator 1
 1757 0a8c 7B68     		ldr	r3, [r7, #4]
 1758 0a8e 1B68     		ldr	r3, [r3, #0]
 1759 0a90 5A69     		ldr	r2, [r3, #20]
 1760 0a92 7B69     		ldr	r3, [r7, #20]
 1761 0a94 9A42     		cmp	r2, r3
 1762 0a96 02D8     		bhi	.L127
 1763              	.L126:
1147:../Sources/ff10b/src/ff.c **** 				return FR_INT_ERR;
 1764              		.loc 1 1147 0 is_stmt 1
 1765 0a98 4FF00203 		mov	r3, #2
 1766 0a9c 2CE0     		b	.L119
 1767              	.L127:
1148:../Sources/ff10b/src/ff.c **** 			idx -= ic;
 1768              		.loc 1 1148 0
 1769 0a9e 3A68     		ldr	r2, [r7, #0]
 1770 0aa0 FB68     		ldr	r3, [r7, #12]
 1771 0aa2 D31A     		subs	r3, r2, r3
 1772 0aa4 3B60     		str	r3, [r7, #0]
 1773              	.L124:
1143:../Sources/ff10b/src/ff.c **** 		while (idx >= ic) {	/* Follow cluster chain */
 1774              		.loc 1 1143 0 discriminator 1
 1775 0aa6 3A68     		ldr	r2, [r7, #0]
 1776 0aa8 FB68     		ldr	r3, [r7, #12]
 1777 0aaa 9A42     		cmp	r2, r3
 1778 0aac DDD2     		bcs	.L128
1149:../Sources/ff10b/src/ff.c **** 		}
1150:../Sources/ff10b/src/ff.c **** 		sect = clust2sect(dp->fs, clst);
 1779              		.loc 1 1150 0
 1780 0aae 7B68     		ldr	r3, [r7, #4]
 1781 0ab0 1B68     		ldr	r3, [r3, #0]
 1782 0ab2 1846     		mov	r0, r3
 1783 0ab4 7969     		ldr	r1, [r7, #20]
 1784 0ab6 FFF7FEFF 		bl	clust2sect
 1785 0aba 3861     		str	r0, [r7, #16]
 1786              	.L123:
1151:../Sources/ff10b/src/ff.c **** 	}
1152:../Sources/ff10b/src/ff.c **** 	dp->clust = clst;	/* Current cluster# */
 1787              		.loc 1 1152 0
 1788 0abc 7B68     		ldr	r3, [r7, #4]
 1789 0abe 7A69     		ldr	r2, [r7, #20]
 1790 0ac0 DA60     		str	r2, [r3, #12]
1153:../Sources/ff10b/src/ff.c **** 	if (!sect) return FR_INT_ERR;
 1791              		.loc 1 1153 0
 1792 0ac2 3B69     		ldr	r3, [r7, #16]
 1793 0ac4 002B     		cmp	r3, #0
 1794 0ac6 02D1     		bne	.L129
 1795              		.loc 1 1153 0 is_stmt 0 discriminator 1
 1796 0ac8 4FF00203 		mov	r3, #2
 1797 0acc 14E0     		b	.L119
 1798              	.L129:
1154:../Sources/ff10b/src/ff.c **** 	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIR);					/* Sector# of the directory entry */
 1799              		.loc 1 1154 0 is_stmt 1
 1800 0ace 3B68     		ldr	r3, [r7, #0]
 1801 0ad0 4FEA1312 		lsr	r2, r3, #4
 1802 0ad4 3B69     		ldr	r3, [r7, #16]
 1803 0ad6 D218     		adds	r2, r2, r3
 1804 0ad8 7B68     		ldr	r3, [r7, #4]
 1805 0ada 1A61     		str	r2, [r3, #16]
1155:../Sources/ff10b/src/ff.c **** 	dp->dir = dp->fs->win + (idx % (SS(dp->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector 
 1806              		.loc 1 1155 0
 1807 0adc 7B68     		ldr	r3, [r7, #4]
 1808 0ade 1A68     		ldr	r2, [r3, #0]
 1809 0ae0 3B68     		ldr	r3, [r7, #0]
 1810 0ae2 03F00F03 		and	r3, r3, #15
 1811 0ae6 4FEA4313 		lsl	r3, r3, #5
 1812 0aea 03F13003 		add	r3, r3, #48
 1813 0aee D218     		adds	r2, r2, r3
 1814 0af0 7B68     		ldr	r3, [r7, #4]
 1815 0af2 5A61     		str	r2, [r3, #20]
1156:../Sources/ff10b/src/ff.c **** 
1157:../Sources/ff10b/src/ff.c **** 	return FR_OK;
 1816              		.loc 1 1157 0
 1817 0af4 4FF00003 		mov	r3, #0
 1818              	.L119:
1158:../Sources/ff10b/src/ff.c **** }
 1819              		.loc 1 1158 0
 1820 0af8 1846     		mov	r0, r3
 1821 0afa 07F11807 		add	r7, r7, #24
 1822 0afe BD46     		mov	sp, r7
 1823 0b00 80BD     		pop	{r7, pc}
 1824              		.cfi_endproc
 1825              	.LFE13:
 1827 0b02 00BF     		.align	2
 1828              		.thumb
 1829              		.thumb_func
 1831              	dir_next:
 1832              	.LFB14:
1159:../Sources/ff10b/src/ff.c **** 
1160:../Sources/ff10b/src/ff.c **** 
1161:../Sources/ff10b/src/ff.c **** 
1162:../Sources/ff10b/src/ff.c **** 
1163:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
1164:../Sources/ff10b/src/ff.c **** /* Directory handling - Move directory table index next                  */
1165:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
1166:../Sources/ff10b/src/ff.c **** 
1167:../Sources/ff10b/src/ff.c **** static
1168:../Sources/ff10b/src/ff.c **** FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
1169:../Sources/ff10b/src/ff.c **** 	DIR* dp,		/* Pointer to the directory object */
1170:../Sources/ff10b/src/ff.c **** 	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
1171:../Sources/ff10b/src/ff.c **** )
1172:../Sources/ff10b/src/ff.c **** {
 1833              		.loc 1 1172 0
 1834              		.cfi_startproc
 1835              		@ args = 0, pretend = 0, frame = 24
 1836              		@ frame_needed = 1, uses_anonymous_args = 0
 1837 0b04 90B5     		push	{r4, r7, lr}
 1838              	.LCFI41:
 1839              		.cfi_def_cfa_offset 12
 1840              		.cfi_offset 4, -12
 1841              		.cfi_offset 7, -8
 1842              		.cfi_offset 14, -4
 1843 0b06 87B0     		sub	sp, sp, #28
 1844              	.LCFI42:
 1845              		.cfi_def_cfa_offset 40
 1846 0b08 00AF     		add	r7, sp, #0
 1847              	.LCFI43:
 1848              		.cfi_def_cfa_register 7
 1849 0b0a 7860     		str	r0, [r7, #4]
 1850 0b0c 3960     		str	r1, [r7, #0]
1173:../Sources/ff10b/src/ff.c **** 	DWORD clst;
1174:../Sources/ff10b/src/ff.c **** 	UINT i;
1175:../Sources/ff10b/src/ff.c **** 
1176:../Sources/ff10b/src/ff.c **** 
1177:../Sources/ff10b/src/ff.c **** 	i = dp->index + 1;
 1851              		.loc 1 1177 0
 1852 0b0e 7B68     		ldr	r3, [r7, #4]
 1853 0b10 DB88     		ldrh	r3, [r3, #6]
 1854 0b12 03F10103 		add	r3, r3, #1
 1855 0b16 FB60     		str	r3, [r7, #12]
1178:../Sources/ff10b/src/ff.c **** 	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 1856              		.loc 1 1178 0
 1857 0b18 FB68     		ldr	r3, [r7, #12]
 1858 0b1a 4FEA0343 		lsl	r3, r3, #16
 1859 0b1e 4FEA1343 		lsr	r3, r3, #16
 1860 0b22 002B     		cmp	r3, #0
 1861 0b24 03D0     		beq	.L131
 1862              		.loc 1 1178 0 is_stmt 0 discriminator 1
 1863 0b26 7B68     		ldr	r3, [r7, #4]
 1864 0b28 1B69     		ldr	r3, [r3, #16]
 1865 0b2a 002B     		cmp	r3, #0
 1866 0b2c 02D1     		bne	.L132
 1867              	.L131:
1179:../Sources/ff10b/src/ff.c **** 		return FR_NO_FILE;
 1868              		.loc 1 1179 0 is_stmt 1
 1869 0b2e 4FF00403 		mov	r3, #4
 1870 0b32 CFE0     		b	.L133
 1871              	.L132:
1180:../Sources/ff10b/src/ff.c **** 
1181:../Sources/ff10b/src/ff.c **** 	if (!(i % (SS(dp->fs) / SZ_DIR))) {	/* Sector changed? */
 1872              		.loc 1 1181 0
 1873 0b34 FB68     		ldr	r3, [r7, #12]
 1874 0b36 03F00F03 		and	r3, r3, #15
 1875 0b3a 002B     		cmp	r3, #0
 1876 0b3c 40F0B880 		bne	.L134
1182:../Sources/ff10b/src/ff.c **** 		dp->sect++;					/* Next sector */
 1877              		.loc 1 1182 0
 1878 0b40 7B68     		ldr	r3, [r7, #4]
 1879 0b42 1B69     		ldr	r3, [r3, #16]
 1880 0b44 03F10102 		add	r2, r3, #1
 1881 0b48 7B68     		ldr	r3, [r7, #4]
 1882 0b4a 1A61     		str	r2, [r3, #16]
1183:../Sources/ff10b/src/ff.c **** 
1184:../Sources/ff10b/src/ff.c **** 		if (!dp->clust) {		/* Static table */
 1883              		.loc 1 1184 0
 1884 0b4c 7B68     		ldr	r3, [r7, #4]
 1885 0b4e DB68     		ldr	r3, [r3, #12]
 1886 0b50 002B     		cmp	r3, #0
 1887 0b52 0AD1     		bne	.L135
1185:../Sources/ff10b/src/ff.c **** 			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 1888              		.loc 1 1185 0
 1889 0b54 7B68     		ldr	r3, [r7, #4]
 1890 0b56 1B68     		ldr	r3, [r3, #0]
 1891 0b58 1B89     		ldrh	r3, [r3, #8]
 1892 0b5a 1A46     		mov	r2, r3
 1893 0b5c FB68     		ldr	r3, [r7, #12]
 1894 0b5e 9A42     		cmp	r2, r3
 1895 0b60 00F2A680 		bhi	.L134
1186:../Sources/ff10b/src/ff.c **** 				return FR_NO_FILE;
 1896              		.loc 1 1186 0
 1897 0b64 4FF00403 		mov	r3, #4
 1898 0b68 B4E0     		b	.L133
 1899              	.L135:
1187:../Sources/ff10b/src/ff.c **** 		}
1188:../Sources/ff10b/src/ff.c **** 		else {					/* Dynamic table */
1189:../Sources/ff10b/src/ff.c **** 			if (((i / (SS(dp->fs) / SZ_DIR)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 1900              		.loc 1 1189 0
 1901 0b6a FB68     		ldr	r3, [r7, #12]
 1902 0b6c 4FEA1312 		lsr	r2, r3, #4
 1903 0b70 7B68     		ldr	r3, [r7, #4]
 1904 0b72 1B68     		ldr	r3, [r3, #0]
 1905 0b74 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1906 0b76 03F1FF33 		add	r3, r3, #-1
 1907 0b7a 1340     		ands	r3, r3, r2
 1908 0b7c 002B     		cmp	r3, #0
 1909 0b7e 40F09780 		bne	.L134
1190:../Sources/ff10b/src/ff.c **** 				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 1910              		.loc 1 1190 0
 1911 0b82 7B68     		ldr	r3, [r7, #4]
 1912 0b84 1A68     		ldr	r2, [r3, #0]
 1913 0b86 7B68     		ldr	r3, [r7, #4]
 1914 0b88 DB68     		ldr	r3, [r3, #12]
 1915 0b8a 1046     		mov	r0, r2
 1916 0b8c 1946     		mov	r1, r3
 1917 0b8e FFF7FEFF 		bl	get_fat
 1918 0b92 7861     		str	r0, [r7, #20]
1191:../Sources/ff10b/src/ff.c **** 				if (clst <= 1) return FR_INT_ERR;
 1919              		.loc 1 1191 0
 1920 0b94 7B69     		ldr	r3, [r7, #20]
 1921 0b96 012B     		cmp	r3, #1
 1922 0b98 02D8     		bhi	.L136
 1923              		.loc 1 1191 0 is_stmt 0 discriminator 1
 1924 0b9a 4FF00203 		mov	r3, #2
 1925 0b9e 99E0     		b	.L133
 1926              	.L136:
1192:../Sources/ff10b/src/ff.c **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 1927              		.loc 1 1192 0 is_stmt 1
 1928 0ba0 7B69     		ldr	r3, [r7, #20]
 1929 0ba2 B3F1FF3F 		cmp	r3, #-1
 1930 0ba6 02D1     		bne	.L137
 1931              		.loc 1 1192 0 is_stmt 0 discriminator 1
 1932 0ba8 4FF00103 		mov	r3, #1
 1933 0bac 92E0     		b	.L133
 1934              	.L137:
1193:../Sources/ff10b/src/ff.c **** 				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 1935              		.loc 1 1193 0 is_stmt 1
 1936 0bae 7B68     		ldr	r3, [r7, #4]
 1937 0bb0 1B68     		ldr	r3, [r3, #0]
 1938 0bb2 5A69     		ldr	r2, [r3, #20]
 1939 0bb4 7B69     		ldr	r3, [r7, #20]
 1940 0bb6 9A42     		cmp	r2, r3
 1941 0bb8 6ED8     		bhi	.L138
 1942              	.LBB2:
1194:../Sources/ff10b/src/ff.c **** #if !_FS_READONLY
1195:../Sources/ff10b/src/ff.c **** 					UINT c;
1196:../Sources/ff10b/src/ff.c **** 					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 1943              		.loc 1 1196 0
 1944 0bba 3B68     		ldr	r3, [r7, #0]
 1945 0bbc 002B     		cmp	r3, #0
 1946 0bbe 02D1     		bne	.L139
 1947              		.loc 1 1196 0 is_stmt 0 discriminator 1
 1948 0bc0 4FF00403 		mov	r3, #4
 1949 0bc4 86E0     		b	.L133
 1950              	.L139:
1197:../Sources/ff10b/src/ff.c **** 					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 1951              		.loc 1 1197 0 is_stmt 1
 1952 0bc6 7B68     		ldr	r3, [r7, #4]
 1953 0bc8 1A68     		ldr	r2, [r3, #0]
 1954 0bca 7B68     		ldr	r3, [r7, #4]
 1955 0bcc DB68     		ldr	r3, [r3, #12]
 1956 0bce 1046     		mov	r0, r2
 1957 0bd0 1946     		mov	r1, r3
 1958 0bd2 FFF76FFE 		bl	create_chain
 1959 0bd6 7861     		str	r0, [r7, #20]
1198:../Sources/ff10b/src/ff.c **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
 1960              		.loc 1 1198 0
 1961 0bd8 7B69     		ldr	r3, [r7, #20]
 1962 0bda 002B     		cmp	r3, #0
 1963 0bdc 02D1     		bne	.L140
 1964              		.loc 1 1198 0 is_stmt 0 discriminator 1
 1965 0bde 4FF00703 		mov	r3, #7
 1966 0be2 77E0     		b	.L133
 1967              	.L140:
1199:../Sources/ff10b/src/ff.c **** 					if (clst == 1) return FR_INT_ERR;
 1968              		.loc 1 1199 0 is_stmt 1
 1969 0be4 7B69     		ldr	r3, [r7, #20]
 1970 0be6 012B     		cmp	r3, #1
 1971 0be8 02D1     		bne	.L141
 1972              		.loc 1 1199 0 is_stmt 0 discriminator 1
 1973 0bea 4FF00203 		mov	r3, #2
 1974 0bee 71E0     		b	.L133
 1975              	.L141:
1200:../Sources/ff10b/src/ff.c **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 1976              		.loc 1 1200 0 is_stmt 1
 1977 0bf0 7B69     		ldr	r3, [r7, #20]
 1978 0bf2 B3F1FF3F 		cmp	r3, #-1
 1979 0bf6 02D1     		bne	.L142
 1980              		.loc 1 1200 0 is_stmt 0 discriminator 1
 1981 0bf8 4FF00103 		mov	r3, #1
 1982 0bfc 6AE0     		b	.L133
 1983              	.L142:
1201:../Sources/ff10b/src/ff.c **** 					/* Clean-up stretched table */
1202:../Sources/ff10b/src/ff.c **** 					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 1984              		.loc 1 1202 0 is_stmt 1
 1985 0bfe 7B68     		ldr	r3, [r7, #4]
 1986 0c00 1B68     		ldr	r3, [r3, #0]
 1987 0c02 1846     		mov	r0, r3
 1988 0c04 FFF79AFA 		bl	sync_window
 1989 0c08 0346     		mov	r3, r0
 1990 0c0a 002B     		cmp	r3, #0
 1991 0c0c 02D0     		beq	.L143
 1992              		.loc 1 1202 0 is_stmt 0 discriminator 1
 1993 0c0e 4FF00103 		mov	r3, #1
 1994 0c12 5FE0     		b	.L133
 1995              	.L143:
1203:../Sources/ff10b/src/ff.c **** 					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
 1996              		.loc 1 1203 0 is_stmt 1
 1997 0c14 7B68     		ldr	r3, [r7, #4]
 1998 0c16 1B68     		ldr	r3, [r3, #0]
 1999 0c18 03F13003 		add	r3, r3, #48
 2000 0c1c 1846     		mov	r0, r3
 2001 0c1e 4FF00001 		mov	r1, #0
 2002 0c22 4FF40072 		mov	r2, #512
 2003 0c26 FFF713FA 		bl	mem_set
1204:../Sources/ff10b/src/ff.c **** 					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 2004              		.loc 1 1204 0
 2005 0c2a 7B68     		ldr	r3, [r7, #4]
 2006 0c2c 1C68     		ldr	r4, [r3, #0]
 2007 0c2e 7B68     		ldr	r3, [r7, #4]
 2008 0c30 1B68     		ldr	r3, [r3, #0]
 2009 0c32 1846     		mov	r0, r3
 2010 0c34 7969     		ldr	r1, [r7, #20]
 2011 0c36 FFF7FEFF 		bl	clust2sect
 2012 0c3a 0346     		mov	r3, r0
 2013 0c3c E362     		str	r3, [r4, #44]
1205:../Sources/ff10b/src/ff.c **** 					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 2014              		.loc 1 1205 0
 2015 0c3e 4FF00003 		mov	r3, #0
 2016 0c42 3B61     		str	r3, [r7, #16]
 2017 0c44 19E0     		b	.L144
 2018              	.L146:
1206:../Sources/ff10b/src/ff.c **** 						dp->fs->wflag = 1;
 2019              		.loc 1 1206 0
 2020 0c46 7B68     		ldr	r3, [r7, #4]
 2021 0c48 1B68     		ldr	r3, [r3, #0]
 2022 0c4a 4FF00102 		mov	r2, #1
 2023 0c4e 1A71     		strb	r2, [r3, #4]
1207:../Sources/ff10b/src/ff.c **** 						if (sync_window(dp->fs)) return FR_DISK_ERR;
 2024              		.loc 1 1207 0
 2025 0c50 7B68     		ldr	r3, [r7, #4]
 2026 0c52 1B68     		ldr	r3, [r3, #0]
 2027 0c54 1846     		mov	r0, r3
 2028 0c56 FFF771FA 		bl	sync_window
 2029 0c5a 0346     		mov	r3, r0
 2030 0c5c 002B     		cmp	r3, #0
 2031 0c5e 02D0     		beq	.L145
 2032              		.loc 1 1207 0 is_stmt 0 discriminator 1
 2033 0c60 4FF00103 		mov	r3, #1
 2034 0c64 36E0     		b	.L133
 2035              	.L145:
1208:../Sources/ff10b/src/ff.c **** 						dp->fs->winsect++;
 2036              		.loc 1 1208 0 is_stmt 1
 2037 0c66 7B68     		ldr	r3, [r7, #4]
 2038 0c68 1B68     		ldr	r3, [r3, #0]
 2039 0c6a DA6A     		ldr	r2, [r3, #44]
 2040 0c6c 02F10102 		add	r2, r2, #1
 2041 0c70 DA62     		str	r2, [r3, #44]
1205:../Sources/ff10b/src/ff.c **** 					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 2042              		.loc 1 1205 0
 2043 0c72 3B69     		ldr	r3, [r7, #16]
 2044 0c74 03F10103 		add	r3, r3, #1
 2045 0c78 3B61     		str	r3, [r7, #16]
 2046              	.L144:
1205:../Sources/ff10b/src/ff.c **** 					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 2047              		.loc 1 1205 0 is_stmt 0 discriminator 1
 2048 0c7a 7B68     		ldr	r3, [r7, #4]
 2049 0c7c 1B68     		ldr	r3, [r3, #0]
 2050 0c7e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 2051 0c80 1A46     		mov	r2, r3
 2052 0c82 3B69     		ldr	r3, [r7, #16]
 2053 0c84 9A42     		cmp	r2, r3
 2054 0c86 DED8     		bhi	.L146
1209:../Sources/ff10b/src/ff.c **** 					}
1210:../Sources/ff10b/src/ff.c **** 					dp->fs->winsect -= c;						/* Rewind window offset */
 2055              		.loc 1 1210 0 is_stmt 1
 2056 0c88 7B68     		ldr	r3, [r7, #4]
 2057 0c8a 1B68     		ldr	r3, [r3, #0]
 2058 0c8c 7A68     		ldr	r2, [r7, #4]
 2059 0c8e 1268     		ldr	r2, [r2, #0]
 2060 0c90 D16A     		ldr	r1, [r2, #44]
 2061 0c92 3A69     		ldr	r2, [r7, #16]
 2062 0c94 8A1A     		subs	r2, r1, r2
 2063 0c96 DA62     		str	r2, [r3, #44]
 2064              	.L138:
 2065              	.LBE2:
1211:../Sources/ff10b/src/ff.c **** #else
1212:../Sources/ff10b/src/ff.c **** 					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warni
1213:../Sources/ff10b/src/ff.c **** 					return FR_NO_FILE;							/* Report EOT */
1214:../Sources/ff10b/src/ff.c **** #endif
1215:../Sources/ff10b/src/ff.c **** 				}
1216:../Sources/ff10b/src/ff.c **** 				dp->clust = clst;				/* Initialize data for new cluster */
 2066              		.loc 1 1216 0
 2067 0c98 7B68     		ldr	r3, [r7, #4]
 2068 0c9a 7A69     		ldr	r2, [r7, #20]
 2069 0c9c DA60     		str	r2, [r3, #12]
1217:../Sources/ff10b/src/ff.c **** 				dp->sect = clust2sect(dp->fs, clst);
 2070              		.loc 1 1217 0
 2071 0c9e 7B68     		ldr	r3, [r7, #4]
 2072 0ca0 1B68     		ldr	r3, [r3, #0]
 2073 0ca2 1846     		mov	r0, r3
 2074 0ca4 7969     		ldr	r1, [r7, #20]
 2075 0ca6 FFF7FEFF 		bl	clust2sect
 2076 0caa 0246     		mov	r2, r0
 2077 0cac 7B68     		ldr	r3, [r7, #4]
 2078 0cae 1A61     		str	r2, [r3, #16]
 2079              	.L134:
1218:../Sources/ff10b/src/ff.c **** 			}
1219:../Sources/ff10b/src/ff.c **** 		}
1220:../Sources/ff10b/src/ff.c **** 	}
1221:../Sources/ff10b/src/ff.c **** 
1222:../Sources/ff10b/src/ff.c **** 	dp->index = (WORD)i;	/* Current index */
 2080              		.loc 1 1222 0
 2081 0cb0 FB68     		ldr	r3, [r7, #12]
 2082 0cb2 9AB2     		uxth	r2, r3
 2083 0cb4 7B68     		ldr	r3, [r7, #4]
 2084 0cb6 DA80     		strh	r2, [r3, #6]	@ movhi
1223:../Sources/ff10b/src/ff.c **** 	dp->dir = dp->fs->win + (i % (SS(dp->fs) / SZ_DIR)) * SZ_DIR;	/* Current entry in the window */
 2085              		.loc 1 1223 0
 2086 0cb8 7B68     		ldr	r3, [r7, #4]
 2087 0cba 1A68     		ldr	r2, [r3, #0]
 2088 0cbc FB68     		ldr	r3, [r7, #12]
 2089 0cbe 03F00F03 		and	r3, r3, #15
 2090 0cc2 4FEA4313 		lsl	r3, r3, #5
 2091 0cc6 03F13003 		add	r3, r3, #48
 2092 0cca D218     		adds	r2, r2, r3
 2093 0ccc 7B68     		ldr	r3, [r7, #4]
 2094 0cce 5A61     		str	r2, [r3, #20]
1224:../Sources/ff10b/src/ff.c **** 
1225:../Sources/ff10b/src/ff.c **** 	return FR_OK;
 2095              		.loc 1 1225 0
 2096 0cd0 4FF00003 		mov	r3, #0
 2097              	.L133:
1226:../Sources/ff10b/src/ff.c **** }
 2098              		.loc 1 1226 0
 2099 0cd4 1846     		mov	r0, r3
 2100 0cd6 07F11C07 		add	r7, r7, #28
 2101 0cda BD46     		mov	sp, r7
 2102 0cdc 90BD     		pop	{r4, r7, pc}
 2103              		.cfi_endproc
 2104              	.LFE14:
 2106 0cde 00BF     		.align	2
 2107              		.thumb
 2108              		.thumb_func
 2110              	dir_alloc:
 2111              	.LFB15:
1227:../Sources/ff10b/src/ff.c **** 
1228:../Sources/ff10b/src/ff.c **** 
1229:../Sources/ff10b/src/ff.c **** 
1230:../Sources/ff10b/src/ff.c **** 
1231:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
1232:../Sources/ff10b/src/ff.c **** /* Directory handling - Reserve directory entry                          */
1233:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
1234:../Sources/ff10b/src/ff.c **** 
1235:../Sources/ff10b/src/ff.c **** #if !_FS_READONLY
1236:../Sources/ff10b/src/ff.c **** static
1237:../Sources/ff10b/src/ff.c **** FRESULT dir_alloc (
1238:../Sources/ff10b/src/ff.c **** 	DIR* dp,	/* Pointer to the directory object */
1239:../Sources/ff10b/src/ff.c **** 	UINT nent	/* Number of contiguous entries to allocate (1-21) */
1240:../Sources/ff10b/src/ff.c **** )
1241:../Sources/ff10b/src/ff.c **** {
 2112              		.loc 1 1241 0
 2113              		.cfi_startproc
 2114              		@ args = 0, pretend = 0, frame = 16
 2115              		@ frame_needed = 1, uses_anonymous_args = 0
 2116 0ce0 80B5     		push	{r7, lr}
 2117              	.LCFI44:
 2118              		.cfi_def_cfa_offset 8
 2119              		.cfi_offset 7, -8
 2120              		.cfi_offset 14, -4
 2121 0ce2 84B0     		sub	sp, sp, #16
 2122              	.LCFI45:
 2123              		.cfi_def_cfa_offset 24
 2124 0ce4 00AF     		add	r7, sp, #0
 2125              	.LCFI46:
 2126              		.cfi_def_cfa_register 7
 2127 0ce6 7860     		str	r0, [r7, #4]
 2128 0ce8 3960     		str	r1, [r7, #0]
1242:../Sources/ff10b/src/ff.c **** 	FRESULT res;
1243:../Sources/ff10b/src/ff.c **** 	UINT n;
1244:../Sources/ff10b/src/ff.c **** 
1245:../Sources/ff10b/src/ff.c **** 
1246:../Sources/ff10b/src/ff.c **** 	res = dir_sdi(dp, 0);
 2129              		.loc 1 1246 0
 2130 0cea 7868     		ldr	r0, [r7, #4]
 2131 0cec 4FF00001 		mov	r1, #0
 2132 0cf0 FFF77EFE 		bl	dir_sdi
 2133 0cf4 0346     		mov	r3, r0
 2134 0cf6 FB73     		strb	r3, [r7, #15]
1247:../Sources/ff10b/src/ff.c **** 	if (res == FR_OK) {
 2135              		.loc 1 1247 0
 2136 0cf8 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2137 0cfa 002B     		cmp	r3, #0
 2138 0cfc 31D1     		bne	.L148
1248:../Sources/ff10b/src/ff.c **** 		n = 0;
 2139              		.loc 1 1248 0
 2140 0cfe 4FF00003 		mov	r3, #0
 2141 0d02 BB60     		str	r3, [r7, #8]
 2142              	.L154:
1249:../Sources/ff10b/src/ff.c **** 		do {
1250:../Sources/ff10b/src/ff.c **** 			res = move_window(dp->fs, dp->sect);
 2143              		.loc 1 1250 0
 2144 0d04 7B68     		ldr	r3, [r7, #4]
 2145 0d06 1A68     		ldr	r2, [r3, #0]
 2146 0d08 7B68     		ldr	r3, [r7, #4]
 2147 0d0a 1B69     		ldr	r3, [r3, #16]
 2148 0d0c 1046     		mov	r0, r2
 2149 0d0e 1946     		mov	r1, r3
 2150 0d10 FFF760FA 		bl	move_window
 2151 0d14 0346     		mov	r3, r0
 2152 0d16 FB73     		strb	r3, [r7, #15]
1251:../Sources/ff10b/src/ff.c **** 			if (res != FR_OK) break;
 2153              		.loc 1 1251 0
 2154 0d18 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2155 0d1a 002B     		cmp	r3, #0
 2156 0d1c 20D1     		bne	.L157
 2157              	.L149:
1252:../Sources/ff10b/src/ff.c **** 			if (dp->dir[0] == DDE || dp->dir[0] == 0) {	/* Is it a blank entry? */
 2158              		.loc 1 1252 0
 2159 0d1e 7B68     		ldr	r3, [r7, #4]
 2160 0d20 5B69     		ldr	r3, [r3, #20]
 2161 0d22 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2162 0d24 E52B     		cmp	r3, #229
 2163 0d26 04D0     		beq	.L150
 2164              		.loc 1 1252 0 is_stmt 0 discriminator 1
 2165 0d28 7B68     		ldr	r3, [r7, #4]
 2166 0d2a 5B69     		ldr	r3, [r3, #20]
 2167 0d2c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2168 0d2e 002B     		cmp	r3, #0
 2169 0d30 08D1     		bne	.L151
 2170              	.L150:
1253:../Sources/ff10b/src/ff.c **** 				if (++n == nent) break;	/* A block of contiguous entries is found */
 2171              		.loc 1 1253 0 is_stmt 1
 2172 0d32 BB68     		ldr	r3, [r7, #8]
 2173 0d34 03F10103 		add	r3, r3, #1
 2174 0d38 BB60     		str	r3, [r7, #8]
 2175 0d3a BA68     		ldr	r2, [r7, #8]
 2176 0d3c 3B68     		ldr	r3, [r7, #0]
 2177 0d3e 9A42     		cmp	r2, r3
 2178 0d40 03D1     		bne	.L153
 2179 0d42 0EE0     		b	.L148
 2180              	.L151:
1254:../Sources/ff10b/src/ff.c **** 			} else {
1255:../Sources/ff10b/src/ff.c **** 				n = 0;					/* Not a blank entry. Restart to search */
 2181              		.loc 1 1255 0
 2182 0d44 4FF00003 		mov	r3, #0
 2183 0d48 BB60     		str	r3, [r7, #8]
 2184              	.L153:
1256:../Sources/ff10b/src/ff.c **** 			}
1257:../Sources/ff10b/src/ff.c **** 			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 2185              		.loc 1 1257 0
 2186 0d4a 7868     		ldr	r0, [r7, #4]
 2187 0d4c 4FF00101 		mov	r1, #1
 2188 0d50 FFF7D8FE 		bl	dir_next
 2189 0d54 0346     		mov	r3, r0
 2190 0d56 FB73     		strb	r3, [r7, #15]
1258:../Sources/ff10b/src/ff.c **** 		} while (res == FR_OK);
 2191              		.loc 1 1258 0
 2192 0d58 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2193 0d5a 002B     		cmp	r3, #0
 2194 0d5c D2D0     		beq	.L154
 2195 0d5e 00E0     		b	.L148
 2196              	.L157:
1251:../Sources/ff10b/src/ff.c **** 			if (res != FR_OK) break;
 2197              		.loc 1 1251 0
 2198 0d60 00BF     		nop
 2199              	.L148:
1259:../Sources/ff10b/src/ff.c **** 	}
1260:../Sources/ff10b/src/ff.c **** 	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 2200              		.loc 1 1260 0
 2201 0d62 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2202 0d64 042B     		cmp	r3, #4
 2203 0d66 02D1     		bne	.L155
 2204              		.loc 1 1260 0 is_stmt 0 discriminator 1
 2205 0d68 4FF00703 		mov	r3, #7
 2206 0d6c FB73     		strb	r3, [r7, #15]
 2207              	.L155:
1261:../Sources/ff10b/src/ff.c **** 	return res;
 2208              		.loc 1 1261 0 is_stmt 1
 2209 0d6e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1262:../Sources/ff10b/src/ff.c **** }
 2210              		.loc 1 1262 0
 2211 0d70 1846     		mov	r0, r3
 2212 0d72 07F11007 		add	r7, r7, #16
 2213 0d76 BD46     		mov	sp, r7
 2214 0d78 80BD     		pop	{r7, pc}
 2215              		.cfi_endproc
 2216              	.LFE15:
 2218 0d7a 00BF     		.align	2
 2219              		.thumb
 2220              		.thumb_func
 2222              	ld_clust:
 2223              	.LFB16:
1263:../Sources/ff10b/src/ff.c **** #endif
1264:../Sources/ff10b/src/ff.c **** 
1265:../Sources/ff10b/src/ff.c **** 
1266:../Sources/ff10b/src/ff.c **** 
1267:../Sources/ff10b/src/ff.c **** 
1268:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
1269:../Sources/ff10b/src/ff.c **** /* Directory handling - Load/Store start cluster number                  */
1270:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
1271:../Sources/ff10b/src/ff.c **** 
1272:../Sources/ff10b/src/ff.c **** static
1273:../Sources/ff10b/src/ff.c **** DWORD ld_clust (
1274:../Sources/ff10b/src/ff.c **** 	FATFS* fs,	/* Pointer to the fs object */
1275:../Sources/ff10b/src/ff.c **** 	BYTE* dir	/* Pointer to the directory entry */
1276:../Sources/ff10b/src/ff.c **** )
1277:../Sources/ff10b/src/ff.c **** {
 2224              		.loc 1 1277 0
 2225              		.cfi_startproc
 2226              		@ args = 0, pretend = 0, frame = 16
 2227              		@ frame_needed = 1, uses_anonymous_args = 0
 2228              		@ link register save eliminated.
 2229 0d7c 80B4     		push	{r7}
 2230              	.LCFI47:
 2231              		.cfi_def_cfa_offset 4
 2232              		.cfi_offset 7, -4
 2233 0d7e 85B0     		sub	sp, sp, #20
 2234              	.LCFI48:
 2235              		.cfi_def_cfa_offset 24
 2236 0d80 00AF     		add	r7, sp, #0
 2237              	.LCFI49:
 2238              		.cfi_def_cfa_register 7
 2239 0d82 7860     		str	r0, [r7, #4]
 2240 0d84 3960     		str	r1, [r7, #0]
1278:../Sources/ff10b/src/ff.c **** 	DWORD cl;
1279:../Sources/ff10b/src/ff.c **** 
1280:../Sources/ff10b/src/ff.c **** 	cl = LD_WORD(dir+DIR_FstClusLO);
 2241              		.loc 1 1280 0
 2242 0d86 3B68     		ldr	r3, [r7, #0]
 2243 0d88 03F11B03 		add	r3, r3, #27
 2244 0d8c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2245 0d8e 4FEA0323 		lsl	r3, r3, #8
 2246 0d92 9AB2     		uxth	r2, r3
 2247 0d94 3B68     		ldr	r3, [r7, #0]
 2248 0d96 03F11A03 		add	r3, r3, #26
 2249 0d9a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2250 0d9c 1343     		orrs	r3, r3, r2
 2251 0d9e 9BB2     		uxth	r3, r3
 2252 0da0 9BB2     		uxth	r3, r3
 2253 0da2 FB60     		str	r3, [r7, #12]
1281:../Sources/ff10b/src/ff.c **** 	if (fs->fs_type == FS_FAT32)
 2254              		.loc 1 1281 0
 2255 0da4 7B68     		ldr	r3, [r7, #4]
 2256 0da6 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2257 0da8 032B     		cmp	r3, #3
 2258 0daa 12D1     		bne	.L159
1282:../Sources/ff10b/src/ff.c **** 		cl |= (DWORD)LD_WORD(dir+DIR_FstClusHI) << 16;
 2259              		.loc 1 1282 0
 2260 0dac 3B68     		ldr	r3, [r7, #0]
 2261 0dae 03F11503 		add	r3, r3, #21
 2262 0db2 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2263 0db4 4FEA0323 		lsl	r3, r3, #8
 2264 0db8 9AB2     		uxth	r2, r3
 2265 0dba 3B68     		ldr	r3, [r7, #0]
 2266 0dbc 03F11403 		add	r3, r3, #20
 2267 0dc0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2268 0dc2 1343     		orrs	r3, r3, r2
 2269 0dc4 9BB2     		uxth	r3, r3
 2270 0dc6 9BB2     		uxth	r3, r3
 2271 0dc8 4FEA0343 		lsl	r3, r3, #16
 2272 0dcc FA68     		ldr	r2, [r7, #12]
 2273 0dce 1343     		orrs	r3, r3, r2
 2274 0dd0 FB60     		str	r3, [r7, #12]
 2275              	.L159:
1283:../Sources/ff10b/src/ff.c **** 
1284:../Sources/ff10b/src/ff.c **** 	return cl;
 2276              		.loc 1 1284 0
 2277 0dd2 FB68     		ldr	r3, [r7, #12]
1285:../Sources/ff10b/src/ff.c **** }
 2278              		.loc 1 1285 0
 2279 0dd4 1846     		mov	r0, r3
 2280 0dd6 07F11407 		add	r7, r7, #20
 2281 0dda BD46     		mov	sp, r7
 2282 0ddc 80BC     		pop	{r7}
 2283 0dde 7047     		bx	lr
 2284              		.cfi_endproc
 2285              	.LFE16:
 2287              		.align	2
 2288              		.thumb
 2289              		.thumb_func
 2291              	st_clust:
 2292              	.LFB17:
1286:../Sources/ff10b/src/ff.c **** 
1287:../Sources/ff10b/src/ff.c **** 
1288:../Sources/ff10b/src/ff.c **** #if !_FS_READONLY
1289:../Sources/ff10b/src/ff.c **** static
1290:../Sources/ff10b/src/ff.c **** void st_clust (
1291:../Sources/ff10b/src/ff.c **** 	BYTE* dir,	/* Pointer to the directory entry */
1292:../Sources/ff10b/src/ff.c **** 	DWORD cl	/* Value to be set */
1293:../Sources/ff10b/src/ff.c **** )
1294:../Sources/ff10b/src/ff.c **** {
 2293              		.loc 1 1294 0
 2294              		.cfi_startproc
 2295              		@ args = 0, pretend = 0, frame = 8
 2296              		@ frame_needed = 1, uses_anonymous_args = 0
 2297              		@ link register save eliminated.
 2298 0de0 80B4     		push	{r7}
 2299              	.LCFI50:
 2300              		.cfi_def_cfa_offset 4
 2301              		.cfi_offset 7, -4
 2302 0de2 83B0     		sub	sp, sp, #12
 2303              	.LCFI51:
 2304              		.cfi_def_cfa_offset 16
 2305 0de4 00AF     		add	r7, sp, #0
 2306              	.LCFI52:
 2307              		.cfi_def_cfa_register 7
 2308 0de6 7860     		str	r0, [r7, #4]
 2309 0de8 3960     		str	r1, [r7, #0]
1295:../Sources/ff10b/src/ff.c **** 	ST_WORD(dir+DIR_FstClusLO, cl);
 2310              		.loc 1 1295 0
 2311 0dea 7B68     		ldr	r3, [r7, #4]
 2312 0dec 03F11A03 		add	r3, r3, #26
 2313 0df0 3A68     		ldr	r2, [r7, #0]
 2314 0df2 D2B2     		uxtb	r2, r2
 2315 0df4 1A70     		strb	r2, [r3, #0]
 2316 0df6 7B68     		ldr	r3, [r7, #4]
 2317 0df8 03F11B03 		add	r3, r3, #27
 2318 0dfc 3A68     		ldr	r2, [r7, #0]
 2319 0dfe 92B2     		uxth	r2, r2
 2320 0e00 4FEA1222 		lsr	r2, r2, #8
 2321 0e04 92B2     		uxth	r2, r2
 2322 0e06 D2B2     		uxtb	r2, r2
 2323 0e08 1A70     		strb	r2, [r3, #0]
1296:../Sources/ff10b/src/ff.c **** 	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
 2324              		.loc 1 1296 0
 2325 0e0a 7B68     		ldr	r3, [r7, #4]
 2326 0e0c 03F11403 		add	r3, r3, #20
 2327 0e10 3A68     		ldr	r2, [r7, #0]
 2328 0e12 4FEA1242 		lsr	r2, r2, #16
 2329 0e16 D2B2     		uxtb	r2, r2
 2330 0e18 1A70     		strb	r2, [r3, #0]
 2331 0e1a 7B68     		ldr	r3, [r7, #4]
 2332 0e1c 03F11503 		add	r3, r3, #21
 2333 0e20 3A68     		ldr	r2, [r7, #0]
 2334 0e22 4FEA1242 		lsr	r2, r2, #16
 2335 0e26 92B2     		uxth	r2, r2
 2336 0e28 4FEA1222 		lsr	r2, r2, #8
 2337 0e2c 92B2     		uxth	r2, r2
 2338 0e2e D2B2     		uxtb	r2, r2
 2339 0e30 1A70     		strb	r2, [r3, #0]
1297:../Sources/ff10b/src/ff.c **** }
 2340              		.loc 1 1297 0
 2341 0e32 07F10C07 		add	r7, r7, #12
 2342 0e36 BD46     		mov	sp, r7
 2343 0e38 80BC     		pop	{r7}
 2344 0e3a 7047     		bx	lr
 2345              		.cfi_endproc
 2346              	.LFE17:
 2348              		.align	2
 2349              		.thumb
 2350              		.thumb_func
 2352              	dir_find:
 2353              	.LFB18:
1298:../Sources/ff10b/src/ff.c **** #endif
1299:../Sources/ff10b/src/ff.c **** 
1300:../Sources/ff10b/src/ff.c **** 
1301:../Sources/ff10b/src/ff.c **** 
1302:../Sources/ff10b/src/ff.c **** 
1303:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
1304:../Sources/ff10b/src/ff.c **** /* LFN handling - Test/Pick/Fit an LFN segment from/to directory entry   */
1305:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
1306:../Sources/ff10b/src/ff.c **** #if _USE_LFN
1307:../Sources/ff10b/src/ff.c **** static
1308:../Sources/ff10b/src/ff.c **** const BYTE LfnOfs[] = {1,3,5,7,9,14,16,18,20,22,24,28,30};	/* Offset of LFN characters in the direc
1309:../Sources/ff10b/src/ff.c **** 
1310:../Sources/ff10b/src/ff.c **** 
1311:../Sources/ff10b/src/ff.c **** static
1312:../Sources/ff10b/src/ff.c **** int cmp_lfn (			/* 1:Matched, 0:Not matched */
1313:../Sources/ff10b/src/ff.c **** 	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
1314:../Sources/ff10b/src/ff.c **** 	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
1315:../Sources/ff10b/src/ff.c **** )
1316:../Sources/ff10b/src/ff.c **** {
1317:../Sources/ff10b/src/ff.c **** 	UINT i, s;
1318:../Sources/ff10b/src/ff.c **** 	WCHAR wc, uc;
1319:../Sources/ff10b/src/ff.c **** 
1320:../Sources/ff10b/src/ff.c **** 
1321:../Sources/ff10b/src/ff.c **** 	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
1322:../Sources/ff10b/src/ff.c **** 	s = 0; wc = 1;
1323:../Sources/ff10b/src/ff.c **** 	do {
1324:../Sources/ff10b/src/ff.c **** 		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
1325:../Sources/ff10b/src/ff.c **** 		if (wc) {	/* Last character has not been processed */
1326:../Sources/ff10b/src/ff.c **** 			wc = ff_wtoupper(uc);		/* Convert it to upper case */
1327:../Sources/ff10b/src/ff.c **** 			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
1328:../Sources/ff10b/src/ff.c **** 				return 0;				/* Not matched */
1329:../Sources/ff10b/src/ff.c **** 		} else {
1330:../Sources/ff10b/src/ff.c **** 			if (uc != 0xFFFF) return 0;	/* Check filler */
1331:../Sources/ff10b/src/ff.c **** 		}
1332:../Sources/ff10b/src/ff.c **** 	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
1333:../Sources/ff10b/src/ff.c **** 
1334:../Sources/ff10b/src/ff.c **** 	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
1335:../Sources/ff10b/src/ff.c **** 		return 0;
1336:../Sources/ff10b/src/ff.c **** 
1337:../Sources/ff10b/src/ff.c **** 	return 1;						/* The part of LFN matched */
1338:../Sources/ff10b/src/ff.c **** }
1339:../Sources/ff10b/src/ff.c **** 
1340:../Sources/ff10b/src/ff.c **** 
1341:../Sources/ff10b/src/ff.c **** 
1342:../Sources/ff10b/src/ff.c **** static
1343:../Sources/ff10b/src/ff.c **** int pick_lfn (			/* 1:Succeeded, 0:Buffer overflow */
1344:../Sources/ff10b/src/ff.c **** 	WCHAR* lfnbuf,		/* Pointer to the Unicode-LFN buffer */
1345:../Sources/ff10b/src/ff.c **** 	BYTE* dir			/* Pointer to the directory entry */
1346:../Sources/ff10b/src/ff.c **** )
1347:../Sources/ff10b/src/ff.c **** {
1348:../Sources/ff10b/src/ff.c **** 	UINT i, s;
1349:../Sources/ff10b/src/ff.c **** 	WCHAR wc, uc;
1350:../Sources/ff10b/src/ff.c **** 
1351:../Sources/ff10b/src/ff.c **** 
1352:../Sources/ff10b/src/ff.c **** 	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
1353:../Sources/ff10b/src/ff.c **** 
1354:../Sources/ff10b/src/ff.c **** 	s = 0; wc = 1;
1355:../Sources/ff10b/src/ff.c **** 	do {
1356:../Sources/ff10b/src/ff.c **** 		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
1357:../Sources/ff10b/src/ff.c **** 		if (wc) {	/* Last character has not been processed */
1358:../Sources/ff10b/src/ff.c **** 			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
1359:../Sources/ff10b/src/ff.c **** 			lfnbuf[i++] = wc = uc;			/* Store it */
1360:../Sources/ff10b/src/ff.c **** 		} else {
1361:../Sources/ff10b/src/ff.c **** 			if (uc != 0xFFFF) return 0;		/* Check filler */
1362:../Sources/ff10b/src/ff.c **** 		}
1363:../Sources/ff10b/src/ff.c **** 	} while (++s < 13);						/* Read all character in the entry */
1364:../Sources/ff10b/src/ff.c **** 
1365:../Sources/ff10b/src/ff.c **** 	if (dir[LDIR_Ord] & LLE) {				/* Put terminator if it is the last LFN part */
1366:../Sources/ff10b/src/ff.c **** 		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
1367:../Sources/ff10b/src/ff.c **** 		lfnbuf[i] = 0;
1368:../Sources/ff10b/src/ff.c **** 	}
1369:../Sources/ff10b/src/ff.c **** 
1370:../Sources/ff10b/src/ff.c **** 	return 1;
1371:../Sources/ff10b/src/ff.c **** }
1372:../Sources/ff10b/src/ff.c **** 
1373:../Sources/ff10b/src/ff.c **** 
1374:../Sources/ff10b/src/ff.c **** #if !_FS_READONLY
1375:../Sources/ff10b/src/ff.c **** static
1376:../Sources/ff10b/src/ff.c **** void fit_lfn (
1377:../Sources/ff10b/src/ff.c **** 	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
1378:../Sources/ff10b/src/ff.c **** 	BYTE* dir,				/* Pointer to the directory entry */
1379:../Sources/ff10b/src/ff.c **** 	BYTE ord,				/* LFN order (1-20) */
1380:../Sources/ff10b/src/ff.c **** 	BYTE sum				/* SFN sum */
1381:../Sources/ff10b/src/ff.c **** )
1382:../Sources/ff10b/src/ff.c **** {
1383:../Sources/ff10b/src/ff.c **** 	UINT i, s;
1384:../Sources/ff10b/src/ff.c **** 	WCHAR wc;
1385:../Sources/ff10b/src/ff.c **** 
1386:../Sources/ff10b/src/ff.c **** 
1387:../Sources/ff10b/src/ff.c **** 	dir[LDIR_Chksum] = sum;			/* Set check sum */
1388:../Sources/ff10b/src/ff.c **** 	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
1389:../Sources/ff10b/src/ff.c **** 	dir[LDIR_Type] = 0;
1390:../Sources/ff10b/src/ff.c **** 	ST_WORD(dir+LDIR_FstClusLO, 0);
1391:../Sources/ff10b/src/ff.c **** 
1392:../Sources/ff10b/src/ff.c **** 	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
1393:../Sources/ff10b/src/ff.c **** 	s = wc = 0;
1394:../Sources/ff10b/src/ff.c **** 	do {
1395:../Sources/ff10b/src/ff.c **** 		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
1396:../Sources/ff10b/src/ff.c **** 		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
1397:../Sources/ff10b/src/ff.c **** 		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
1398:../Sources/ff10b/src/ff.c **** 	} while (++s < 13);
1399:../Sources/ff10b/src/ff.c **** 	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
1400:../Sources/ff10b/src/ff.c **** 	dir[LDIR_Ord] = ord;			/* Set the LFN order */
1401:../Sources/ff10b/src/ff.c **** }
1402:../Sources/ff10b/src/ff.c **** 
1403:../Sources/ff10b/src/ff.c **** #endif
1404:../Sources/ff10b/src/ff.c **** #endif
1405:../Sources/ff10b/src/ff.c **** 
1406:../Sources/ff10b/src/ff.c **** 
1407:../Sources/ff10b/src/ff.c **** 
1408:../Sources/ff10b/src/ff.c **** 
1409:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
1410:../Sources/ff10b/src/ff.c **** /* Create numbered name                                                  */
1411:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
1412:../Sources/ff10b/src/ff.c **** #if _USE_LFN
1413:../Sources/ff10b/src/ff.c **** static
1414:../Sources/ff10b/src/ff.c **** void gen_numname (
1415:../Sources/ff10b/src/ff.c **** 	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
1416:../Sources/ff10b/src/ff.c **** 	const BYTE* src,	/* Pointer to SFN */
1417:../Sources/ff10b/src/ff.c **** 	const WCHAR* lfn,	/* Pointer to LFN */
1418:../Sources/ff10b/src/ff.c **** 	UINT seq			/* Sequence number */
1419:../Sources/ff10b/src/ff.c **** )
1420:../Sources/ff10b/src/ff.c **** {
1421:../Sources/ff10b/src/ff.c **** 	BYTE ns[8], c;
1422:../Sources/ff10b/src/ff.c **** 	UINT i, j;
1423:../Sources/ff10b/src/ff.c **** 
1424:../Sources/ff10b/src/ff.c **** 
1425:../Sources/ff10b/src/ff.c **** 	mem_cpy(dst, src, 11);
1426:../Sources/ff10b/src/ff.c **** 
1427:../Sources/ff10b/src/ff.c **** 	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
1428:../Sources/ff10b/src/ff.c **** 		WCHAR wc;
1429:../Sources/ff10b/src/ff.c **** 		DWORD sr = seq;
1430:../Sources/ff10b/src/ff.c **** 
1431:../Sources/ff10b/src/ff.c **** 		while (*lfn) {	/* Create a CRC */
1432:../Sources/ff10b/src/ff.c **** 			wc = *lfn++;
1433:../Sources/ff10b/src/ff.c **** 			for (i = 0; i < 16; i++) {
1434:../Sources/ff10b/src/ff.c **** 				sr = (sr << 1) + (wc & 1);
1435:../Sources/ff10b/src/ff.c **** 				wc >>= 1;
1436:../Sources/ff10b/src/ff.c **** 				if (sr & 0x10000) sr ^= 0x11021;
1437:../Sources/ff10b/src/ff.c **** 			}
1438:../Sources/ff10b/src/ff.c **** 		}
1439:../Sources/ff10b/src/ff.c **** 		seq = (UINT)sr;
1440:../Sources/ff10b/src/ff.c **** 	}
1441:../Sources/ff10b/src/ff.c **** 
1442:../Sources/ff10b/src/ff.c **** 	/* itoa (hexdecimal) */
1443:../Sources/ff10b/src/ff.c **** 	i = 7;
1444:../Sources/ff10b/src/ff.c **** 	do {
1445:../Sources/ff10b/src/ff.c **** 		c = (seq % 16) + '0';
1446:../Sources/ff10b/src/ff.c **** 		if (c > '9') c += 7;
1447:../Sources/ff10b/src/ff.c **** 		ns[i--] = c;
1448:../Sources/ff10b/src/ff.c **** 		seq /= 16;
1449:../Sources/ff10b/src/ff.c **** 	} while (seq);
1450:../Sources/ff10b/src/ff.c **** 	ns[i] = '~';
1451:../Sources/ff10b/src/ff.c **** 
1452:../Sources/ff10b/src/ff.c **** 	/* Append the number */
1453:../Sources/ff10b/src/ff.c **** 	for (j = 0; j < i && dst[j] != ' '; j++) {
1454:../Sources/ff10b/src/ff.c **** 		if (IsDBCS1(dst[j])) {
1455:../Sources/ff10b/src/ff.c **** 			if (j == i - 1) break;
1456:../Sources/ff10b/src/ff.c **** 			j++;
1457:../Sources/ff10b/src/ff.c **** 		}
1458:../Sources/ff10b/src/ff.c **** 	}
1459:../Sources/ff10b/src/ff.c **** 	do {
1460:../Sources/ff10b/src/ff.c **** 		dst[j++] = (i < 8) ? ns[i++] : ' ';
1461:../Sources/ff10b/src/ff.c **** 	} while (j < 8);
1462:../Sources/ff10b/src/ff.c **** }
1463:../Sources/ff10b/src/ff.c **** #endif
1464:../Sources/ff10b/src/ff.c **** 
1465:../Sources/ff10b/src/ff.c **** 
1466:../Sources/ff10b/src/ff.c **** 
1467:../Sources/ff10b/src/ff.c **** 
1468:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
1469:../Sources/ff10b/src/ff.c **** /* Calculate sum of an SFN                                               */
1470:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
1471:../Sources/ff10b/src/ff.c **** #if _USE_LFN
1472:../Sources/ff10b/src/ff.c **** static
1473:../Sources/ff10b/src/ff.c **** BYTE sum_sfn (
1474:../Sources/ff10b/src/ff.c **** 	const BYTE* dir		/* Pointer to the SFN entry */
1475:../Sources/ff10b/src/ff.c **** )
1476:../Sources/ff10b/src/ff.c **** {
1477:../Sources/ff10b/src/ff.c **** 	BYTE sum = 0;
1478:../Sources/ff10b/src/ff.c **** 	UINT n = 11;
1479:../Sources/ff10b/src/ff.c **** 
1480:../Sources/ff10b/src/ff.c **** 	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
1481:../Sources/ff10b/src/ff.c **** 	return sum;
1482:../Sources/ff10b/src/ff.c **** }
1483:../Sources/ff10b/src/ff.c **** #endif
1484:../Sources/ff10b/src/ff.c **** 
1485:../Sources/ff10b/src/ff.c **** 
1486:../Sources/ff10b/src/ff.c **** 
1487:../Sources/ff10b/src/ff.c **** 
1488:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
1489:../Sources/ff10b/src/ff.c **** /* Directory handling - Find an object in the directory                  */
1490:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
1491:../Sources/ff10b/src/ff.c **** 
1492:../Sources/ff10b/src/ff.c **** static
1493:../Sources/ff10b/src/ff.c **** FRESULT dir_find (
1494:../Sources/ff10b/src/ff.c **** 	DIR* dp			/* Pointer to the directory object linked to the file name */
1495:../Sources/ff10b/src/ff.c **** )
1496:../Sources/ff10b/src/ff.c **** {
 2354              		.loc 1 1496 0
 2355              		.cfi_startproc
 2356              		@ args = 0, pretend = 0, frame = 24
 2357              		@ frame_needed = 1, uses_anonymous_args = 0
 2358 0e3c 80B5     		push	{r7, lr}
 2359              	.LCFI53:
 2360              		.cfi_def_cfa_offset 8
 2361              		.cfi_offset 7, -8
 2362              		.cfi_offset 14, -4
 2363 0e3e 86B0     		sub	sp, sp, #24
 2364              	.LCFI54:
 2365              		.cfi_def_cfa_offset 32
 2366 0e40 00AF     		add	r7, sp, #0
 2367              	.LCFI55:
 2368              		.cfi_def_cfa_register 7
 2369 0e42 7860     		str	r0, [r7, #4]
1497:../Sources/ff10b/src/ff.c **** 	FRESULT res;
1498:../Sources/ff10b/src/ff.c **** 	BYTE c, *dir;
1499:../Sources/ff10b/src/ff.c **** #if _USE_LFN
1500:../Sources/ff10b/src/ff.c **** 	BYTE a, ord, sum;
1501:../Sources/ff10b/src/ff.c **** #endif
1502:../Sources/ff10b/src/ff.c **** 
1503:../Sources/ff10b/src/ff.c **** 	res = dir_sdi(dp, 0);			/* Rewind directory object */
 2370              		.loc 1 1503 0
 2371 0e44 7868     		ldr	r0, [r7, #4]
 2372 0e46 4FF00001 		mov	r1, #0
 2373 0e4a FFF7D1FD 		bl	dir_sdi
 2374 0e4e 0346     		mov	r3, r0
 2375 0e50 FB75     		strb	r3, [r7, #23]
1504:../Sources/ff10b/src/ff.c **** 	if (res != FR_OK) return res;
 2376              		.loc 1 1504 0
 2377 0e52 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 2378 0e54 002B     		cmp	r3, #0
 2379 0e56 01D0     		beq	.L163
 2380              		.loc 1 1504 0 is_stmt 0 discriminator 1
 2381 0e58 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 2382 0e5a 3BE0     		b	.L164
 2383              	.L163:
1505:../Sources/ff10b/src/ff.c **** 
1506:../Sources/ff10b/src/ff.c **** #if _USE_LFN
1507:../Sources/ff10b/src/ff.c **** 	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
1508:../Sources/ff10b/src/ff.c **** #endif
1509:../Sources/ff10b/src/ff.c **** 	do {
1510:../Sources/ff10b/src/ff.c **** 		res = move_window(dp->fs, dp->sect);
 2384              		.loc 1 1510 0 is_stmt 1
 2385 0e5c 7B68     		ldr	r3, [r7, #4]
 2386 0e5e 1A68     		ldr	r2, [r3, #0]
 2387 0e60 7B68     		ldr	r3, [r7, #4]
 2388 0e62 1B69     		ldr	r3, [r3, #16]
 2389 0e64 1046     		mov	r0, r2
 2390 0e66 1946     		mov	r1, r3
 2391 0e68 FFF7B4F9 		bl	move_window
 2392 0e6c 0346     		mov	r3, r0
 2393 0e6e FB75     		strb	r3, [r7, #23]
1511:../Sources/ff10b/src/ff.c **** 		if (res != FR_OK) break;
 2394              		.loc 1 1511 0
 2395 0e70 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 2396 0e72 002B     		cmp	r3, #0
 2397 0e74 2AD1     		bne	.L169
 2398              	.L165:
1512:../Sources/ff10b/src/ff.c **** 		dir = dp->dir;					/* Ptr to the directory entry of current index */
 2399              		.loc 1 1512 0
 2400 0e76 7B68     		ldr	r3, [r7, #4]
 2401 0e78 5B69     		ldr	r3, [r3, #20]
 2402 0e7a 3B61     		str	r3, [r7, #16]
1513:../Sources/ff10b/src/ff.c **** 		c = dir[DIR_Name];
 2403              		.loc 1 1513 0
 2404 0e7c 3B69     		ldr	r3, [r7, #16]
 2405 0e7e 1B78     		ldrb	r3, [r3, #0]
 2406 0e80 FB73     		strb	r3, [r7, #15]
1514:../Sources/ff10b/src/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 2407              		.loc 1 1514 0
 2408 0e82 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2409 0e84 002B     		cmp	r3, #0
 2410 0e86 03D1     		bne	.L167
 2411              		.loc 1 1514 0 is_stmt 0 discriminator 1
 2412 0e88 4FF00403 		mov	r3, #4
 2413 0e8c FB75     		strb	r3, [r7, #23]
 2414 0e8e 20E0     		b	.L166
 2415              	.L167:
1515:../Sources/ff10b/src/ff.c **** #if _USE_LFN	/* LFN configuration */
1516:../Sources/ff10b/src/ff.c **** 		a = dir[DIR_Attr] & AM_MASK;
1517:../Sources/ff10b/src/ff.c **** 		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
1518:../Sources/ff10b/src/ff.c **** 			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
1519:../Sources/ff10b/src/ff.c **** 		} else {
1520:../Sources/ff10b/src/ff.c **** 			if (a == AM_LFN) {			/* An LFN entry is found */
1521:../Sources/ff10b/src/ff.c **** 				if (dp->lfn) {
1522:../Sources/ff10b/src/ff.c **** 					if (c & LLE) {		/* Is it start of LFN sequence? */
1523:../Sources/ff10b/src/ff.c **** 						sum = dir[LDIR_Chksum];
1524:../Sources/ff10b/src/ff.c **** 						c &= ~LLE; ord = c;	/* LFN start order */
1525:../Sources/ff10b/src/ff.c **** 						dp->lfn_idx = dp->index;	/* Start index of LFN */
1526:../Sources/ff10b/src/ff.c **** 					}
1527:../Sources/ff10b/src/ff.c **** 					/* Check validity of the LFN entry and compare it with given name */
1528:../Sources/ff10b/src/ff.c **** 					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
1529:../Sources/ff10b/src/ff.c **** 				}
1530:../Sources/ff10b/src/ff.c **** 			} else {					/* An SFN entry is found */
1531:../Sources/ff10b/src/ff.c **** 				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
1532:../Sources/ff10b/src/ff.c **** 				if (!(dp->fn[NS] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
1533:../Sources/ff10b/src/ff.c **** 				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
1534:../Sources/ff10b/src/ff.c **** 			}
1535:../Sources/ff10b/src/ff.c **** 		}
1536:../Sources/ff10b/src/ff.c **** #else		/* Non LFN configuration */
1537:../Sources/ff10b/src/ff.c **** 		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 2416              		.loc 1 1537 0 is_stmt 1
 2417 0e90 3B69     		ldr	r3, [r7, #16]
 2418 0e92 03F10B03 		add	r3, r3, #11
 2419 0e96 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2420 0e98 03F00803 		and	r3, r3, #8
 2421 0e9c 002B     		cmp	r3, #0
 2422 0e9e 0AD1     		bne	.L168
 2423              		.loc 1 1537 0 is_stmt 0 discriminator 1
 2424 0ea0 7B68     		ldr	r3, [r7, #4]
 2425 0ea2 9B69     		ldr	r3, [r3, #24]
 2426 0ea4 3869     		ldr	r0, [r7, #16]
 2427 0ea6 1946     		mov	r1, r3
 2428 0ea8 4FF00B02 		mov	r2, #11
 2429 0eac FFF7F2F8 		bl	mem_cmp
 2430 0eb0 0346     		mov	r3, r0
 2431 0eb2 002B     		cmp	r3, #0
 2432 0eb4 0CD0     		beq	.L170
 2433              	.L168:
1538:../Sources/ff10b/src/ff.c **** 			break;
1539:../Sources/ff10b/src/ff.c **** #endif
1540:../Sources/ff10b/src/ff.c **** 		res = dir_next(dp, 0);		/* Next entry */
 2434              		.loc 1 1540 0 is_stmt 1
 2435 0eb6 7868     		ldr	r0, [r7, #4]
 2436 0eb8 4FF00001 		mov	r1, #0
 2437 0ebc FFF722FE 		bl	dir_next
 2438 0ec0 0346     		mov	r3, r0
 2439 0ec2 FB75     		strb	r3, [r7, #23]
1541:../Sources/ff10b/src/ff.c **** 	} while (res == FR_OK);
 2440              		.loc 1 1541 0
 2441 0ec4 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 2442 0ec6 002B     		cmp	r3, #0
 2443 0ec8 C8D0     		beq	.L163
 2444 0eca 02E0     		b	.L166
 2445              	.L169:
1511:../Sources/ff10b/src/ff.c **** 		if (res != FR_OK) break;
 2446              		.loc 1 1511 0
 2447 0ecc 00BF     		nop
 2448 0ece 00E0     		b	.L166
 2449              	.L170:
1538:../Sources/ff10b/src/ff.c **** 			break;
 2450              		.loc 1 1538 0
 2451 0ed0 00BF     		nop
 2452              	.L166:
1542:../Sources/ff10b/src/ff.c **** 
1543:../Sources/ff10b/src/ff.c **** 	return res;
 2453              		.loc 1 1543 0
 2454 0ed2 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 2455              	.L164:
1544:../Sources/ff10b/src/ff.c **** }
 2456              		.loc 1 1544 0
 2457 0ed4 1846     		mov	r0, r3
 2458 0ed6 07F11807 		add	r7, r7, #24
 2459 0eda BD46     		mov	sp, r7
 2460 0edc 80BD     		pop	{r7, pc}
 2461              		.cfi_endproc
 2462              	.LFE18:
 2464 0ede 00BF     		.align	2
 2465              		.thumb
 2466              		.thumb_func
 2468              	dir_read:
 2469              	.LFB19:
1545:../Sources/ff10b/src/ff.c **** 
1546:../Sources/ff10b/src/ff.c **** 
1547:../Sources/ff10b/src/ff.c **** 
1548:../Sources/ff10b/src/ff.c **** 
1549:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
1550:../Sources/ff10b/src/ff.c **** /* Read an object from the directory                                     */
1551:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
1552:../Sources/ff10b/src/ff.c **** #if _FS_MINIMIZE <= 1 || _USE_LABEL || _FS_RPATH >= 2
1553:../Sources/ff10b/src/ff.c **** static
1554:../Sources/ff10b/src/ff.c **** FRESULT dir_read (
1555:../Sources/ff10b/src/ff.c **** 	DIR* dp,		/* Pointer to the directory object */
1556:../Sources/ff10b/src/ff.c **** 	int vol			/* Filtered by 0:file/directory or 1:volume label */
1557:../Sources/ff10b/src/ff.c **** )
1558:../Sources/ff10b/src/ff.c **** {
 2470              		.loc 1 1558 0
 2471              		.cfi_startproc
 2472              		@ args = 0, pretend = 0, frame = 24
 2473              		@ frame_needed = 1, uses_anonymous_args = 0
 2474 0ee0 80B5     		push	{r7, lr}
 2475              	.LCFI56:
 2476              		.cfi_def_cfa_offset 8
 2477              		.cfi_offset 7, -8
 2478              		.cfi_offset 14, -4
 2479 0ee2 86B0     		sub	sp, sp, #24
 2480              	.LCFI57:
 2481              		.cfi_def_cfa_offset 32
 2482 0ee4 00AF     		add	r7, sp, #0
 2483              	.LCFI58:
 2484              		.cfi_def_cfa_register 7
 2485 0ee6 7860     		str	r0, [r7, #4]
 2486 0ee8 3960     		str	r1, [r7, #0]
1559:../Sources/ff10b/src/ff.c **** 	FRESULT res;
1560:../Sources/ff10b/src/ff.c **** 	BYTE a, c, *dir;
1561:../Sources/ff10b/src/ff.c **** #if _USE_LFN
1562:../Sources/ff10b/src/ff.c **** 	BYTE ord = 0xFF, sum = 0xFF;
1563:../Sources/ff10b/src/ff.c **** #endif
1564:../Sources/ff10b/src/ff.c **** 
1565:../Sources/ff10b/src/ff.c **** 	res = FR_NO_FILE;
 2487              		.loc 1 1565 0
 2488 0eea 4FF00403 		mov	r3, #4
 2489 0eee FB75     		strb	r3, [r7, #23]
1566:../Sources/ff10b/src/ff.c **** 	while (dp->sect) {
 2490              		.loc 1 1566 0
 2491 0ef0 3DE0     		b	.L172
 2492              	.L177:
1567:../Sources/ff10b/src/ff.c **** 		res = move_window(dp->fs, dp->sect);
 2493              		.loc 1 1567 0
 2494 0ef2 7B68     		ldr	r3, [r7, #4]
 2495 0ef4 1A68     		ldr	r2, [r3, #0]
 2496 0ef6 7B68     		ldr	r3, [r7, #4]
 2497 0ef8 1B69     		ldr	r3, [r3, #16]
 2498 0efa 1046     		mov	r0, r2
 2499 0efc 1946     		mov	r1, r3
 2500 0efe FFF769F9 		bl	move_window
 2501 0f02 0346     		mov	r3, r0
 2502 0f04 FB75     		strb	r3, [r7, #23]
1568:../Sources/ff10b/src/ff.c **** 		if (res != FR_OK) break;
 2503              		.loc 1 1568 0
 2504 0f06 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 2505 0f08 002B     		cmp	r3, #0
 2506 0f0a 35D1     		bne	.L180
 2507              	.L173:
1569:../Sources/ff10b/src/ff.c **** 		dir = dp->dir;					/* Ptr to the directory entry of current index */
 2508              		.loc 1 1569 0
 2509 0f0c 7B68     		ldr	r3, [r7, #4]
 2510 0f0e 5B69     		ldr	r3, [r3, #20]
 2511 0f10 3B61     		str	r3, [r7, #16]
1570:../Sources/ff10b/src/ff.c **** 		c = dir[DIR_Name];
 2512              		.loc 1 1570 0
 2513 0f12 3B69     		ldr	r3, [r7, #16]
 2514 0f14 1B78     		ldrb	r3, [r3, #0]
 2515 0f16 FB73     		strb	r3, [r7, #15]
1571:../Sources/ff10b/src/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 2516              		.loc 1 1571 0
 2517 0f18 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2518 0f1a 002B     		cmp	r3, #0
 2519 0f1c 03D1     		bne	.L175
 2520              		.loc 1 1571 0 is_stmt 0 discriminator 1
 2521 0f1e 4FF00403 		mov	r3, #4
 2522 0f22 FB75     		strb	r3, [r7, #23]
 2523 0f24 2DE0     		b	.L174
 2524              	.L175:
1572:../Sources/ff10b/src/ff.c **** 		a = dir[DIR_Attr] & AM_MASK;
 2525              		.loc 1 1572 0 is_stmt 1
 2526 0f26 3B69     		ldr	r3, [r7, #16]
 2527 0f28 03F10B03 		add	r3, r3, #11
 2528 0f2c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2529 0f2e 03F03F03 		and	r3, r3, #63
 2530 0f32 BB73     		strb	r3, [r7, #14]
1573:../Sources/ff10b/src/ff.c **** #if _USE_LFN	/* LFN configuration */
1574:../Sources/ff10b/src/ff.c **** 		if (c == DDE || (!_FS_RPATH && c == '.') || (int)(a == AM_VOL) != vol) {	/* An entry without vali
1575:../Sources/ff10b/src/ff.c **** 			ord = 0xFF;
1576:../Sources/ff10b/src/ff.c **** 		} else {
1577:../Sources/ff10b/src/ff.c **** 			if (a == AM_LFN) {			/* An LFN entry is found */
1578:../Sources/ff10b/src/ff.c **** 				if (c & LLE) {			/* Is it start of LFN sequence? */
1579:../Sources/ff10b/src/ff.c **** 					sum = dir[LDIR_Chksum];
1580:../Sources/ff10b/src/ff.c **** 					c &= ~LLE; ord = c;
1581:../Sources/ff10b/src/ff.c **** 					dp->lfn_idx = dp->index;
1582:../Sources/ff10b/src/ff.c **** 				}
1583:../Sources/ff10b/src/ff.c **** 				/* Check LFN validity and capture it */
1584:../Sources/ff10b/src/ff.c **** 				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
1585:../Sources/ff10b/src/ff.c **** 			} else {					/* An SFN entry is found */
1586:../Sources/ff10b/src/ff.c **** 				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
1587:../Sources/ff10b/src/ff.c **** 					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
1588:../Sources/ff10b/src/ff.c **** 				break;
1589:../Sources/ff10b/src/ff.c **** 			}
1590:../Sources/ff10b/src/ff.c **** 		}
1591:../Sources/ff10b/src/ff.c **** #else		/* Non LFN configuration */
1592:../Sources/ff10b/src/ff.c **** 		if (c != DDE && (_FS_RPATH || c != '.') && a != AM_LFN && (int)(a == AM_VOL) == vol)	/* Is it a v
 2531              		.loc 1 1592 0
 2532 0f34 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2533 0f36 E52B     		cmp	r3, #229
 2534 0f38 0FD0     		beq	.L176
 2535              		.loc 1 1592 0 is_stmt 0 discriminator 1
 2536 0f3a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2537 0f3c 2E2B     		cmp	r3, #46
 2538 0f3e 0CD0     		beq	.L176
 2539 0f40 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 2540 0f42 0F2B     		cmp	r3, #15
 2541 0f44 09D0     		beq	.L176
 2542 0f46 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 2543 0f48 082B     		cmp	r3, #8
 2544 0f4a 14BF     		ite	ne
 2545 0f4c 0023     		movne	r3, #0
 2546 0f4e 0123     		moveq	r3, #1
 2547 0f50 DBB2     		uxtb	r3, r3
 2548 0f52 1A46     		mov	r2, r3
 2549 0f54 3B68     		ldr	r3, [r7, #0]
 2550 0f56 9A42     		cmp	r2, r3
 2551 0f58 10D0     		beq	.L181
 2552              	.L176:
1593:../Sources/ff10b/src/ff.c **** 			break;
1594:../Sources/ff10b/src/ff.c **** #endif
1595:../Sources/ff10b/src/ff.c **** 		res = dir_next(dp, 0);				/* Next entry */
 2553              		.loc 1 1595 0 is_stmt 1
 2554 0f5a 7868     		ldr	r0, [r7, #4]
 2555 0f5c 4FF00001 		mov	r1, #0
 2556 0f60 FFF7D0FD 		bl	dir_next
 2557 0f64 0346     		mov	r3, r0
 2558 0f66 FB75     		strb	r3, [r7, #23]
1596:../Sources/ff10b/src/ff.c **** 		if (res != FR_OK) break;
 2559              		.loc 1 1596 0
 2560 0f68 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 2561 0f6a 002B     		cmp	r3, #0
 2562 0f6c 08D1     		bne	.L182
 2563              	.L172:
1566:../Sources/ff10b/src/ff.c **** 	while (dp->sect) {
 2564              		.loc 1 1566 0 discriminator 1
 2565 0f6e 7B68     		ldr	r3, [r7, #4]
 2566 0f70 1B69     		ldr	r3, [r3, #16]
 2567 0f72 002B     		cmp	r3, #0
 2568 0f74 BDD1     		bne	.L177
 2569 0f76 04E0     		b	.L174
 2570              	.L180:
1568:../Sources/ff10b/src/ff.c **** 		if (res != FR_OK) break;
 2571              		.loc 1 1568 0
 2572 0f78 00BF     		nop
 2573 0f7a 02E0     		b	.L174
 2574              	.L181:
1593:../Sources/ff10b/src/ff.c **** 			break;
 2575              		.loc 1 1593 0
 2576 0f7c 00BF     		nop
 2577 0f7e 00E0     		b	.L174
 2578              	.L182:
 2579              		.loc 1 1596 0
 2580 0f80 00BF     		nop
 2581              	.L174:
1597:../Sources/ff10b/src/ff.c **** 	}
1598:../Sources/ff10b/src/ff.c **** 
1599:../Sources/ff10b/src/ff.c **** 	if (res != FR_OK) dp->sect = 0;
 2582              		.loc 1 1599 0
 2583 0f82 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 2584 0f84 002B     		cmp	r3, #0
 2585 0f86 03D0     		beq	.L178
 2586              		.loc 1 1599 0 is_stmt 0 discriminator 1
 2587 0f88 7B68     		ldr	r3, [r7, #4]
 2588 0f8a 4FF00002 		mov	r2, #0
 2589 0f8e 1A61     		str	r2, [r3, #16]
 2590              	.L178:
1600:../Sources/ff10b/src/ff.c **** 
1601:../Sources/ff10b/src/ff.c **** 	return res;
 2591              		.loc 1 1601 0 is_stmt 1
 2592 0f90 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1602:../Sources/ff10b/src/ff.c **** }
 2593              		.loc 1 1602 0
 2594 0f92 1846     		mov	r0, r3
 2595 0f94 07F11807 		add	r7, r7, #24
 2596 0f98 BD46     		mov	sp, r7
 2597 0f9a 80BD     		pop	{r7, pc}
 2598              		.cfi_endproc
 2599              	.LFE19:
 2601              		.align	2
 2602              		.thumb
 2603              		.thumb_func
 2605              	dir_register:
 2606              	.LFB20:
1603:../Sources/ff10b/src/ff.c **** #endif	/* _FS_MINIMIZE <= 1 || _USE_LABEL || _FS_RPATH >= 2 */
1604:../Sources/ff10b/src/ff.c **** 
1605:../Sources/ff10b/src/ff.c **** 
1606:../Sources/ff10b/src/ff.c **** 
1607:../Sources/ff10b/src/ff.c **** 
1608:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
1609:../Sources/ff10b/src/ff.c **** /* Register an object to the directory                                   */
1610:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
1611:../Sources/ff10b/src/ff.c **** #if !_FS_READONLY
1612:../Sources/ff10b/src/ff.c **** static
1613:../Sources/ff10b/src/ff.c **** FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_D
1614:../Sources/ff10b/src/ff.c **** 	DIR* dp				/* Target directory with object name to be created */
1615:../Sources/ff10b/src/ff.c **** )
1616:../Sources/ff10b/src/ff.c **** {
 2607              		.loc 1 1616 0
 2608              		.cfi_startproc
 2609              		@ args = 0, pretend = 0, frame = 16
 2610              		@ frame_needed = 1, uses_anonymous_args = 0
 2611 0f9c 80B5     		push	{r7, lr}
 2612              	.LCFI59:
 2613              		.cfi_def_cfa_offset 8
 2614              		.cfi_offset 7, -8
 2615              		.cfi_offset 14, -4
 2616 0f9e 84B0     		sub	sp, sp, #16
 2617              	.LCFI60:
 2618              		.cfi_def_cfa_offset 24
 2619 0fa0 00AF     		add	r7, sp, #0
 2620              	.LCFI61:
 2621              		.cfi_def_cfa_register 7
 2622 0fa2 7860     		str	r0, [r7, #4]
1617:../Sources/ff10b/src/ff.c **** 	FRESULT res;
1618:../Sources/ff10b/src/ff.c **** #if _USE_LFN	/* LFN configuration */
1619:../Sources/ff10b/src/ff.c **** 	UINT n, nent;
1620:../Sources/ff10b/src/ff.c **** 	BYTE sn[12], *fn, sum;
1621:../Sources/ff10b/src/ff.c **** 	WCHAR *lfn;
1622:../Sources/ff10b/src/ff.c **** 
1623:../Sources/ff10b/src/ff.c **** 
1624:../Sources/ff10b/src/ff.c **** 	fn = dp->fn; lfn = dp->lfn;
1625:../Sources/ff10b/src/ff.c **** 	mem_cpy(sn, fn, 12);
1626:../Sources/ff10b/src/ff.c **** 
1627:../Sources/ff10b/src/ff.c **** 	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
1628:../Sources/ff10b/src/ff.c **** 		return FR_INVALID_NAME;
1629:../Sources/ff10b/src/ff.c **** 
1630:../Sources/ff10b/src/ff.c **** 	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
1631:../Sources/ff10b/src/ff.c **** 		fn[NS] = 0; dp->lfn = 0;			/* Find only SFN */
1632:../Sources/ff10b/src/ff.c **** 		for (n = 1; n < 100; n++) {
1633:../Sources/ff10b/src/ff.c **** 			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
1634:../Sources/ff10b/src/ff.c **** 			res = dir_find(dp);				/* Check if the name collides with existing SFN */
1635:../Sources/ff10b/src/ff.c **** 			if (res != FR_OK) break;
1636:../Sources/ff10b/src/ff.c **** 		}
1637:../Sources/ff10b/src/ff.c **** 		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
1638:../Sources/ff10b/src/ff.c **** 		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
1639:../Sources/ff10b/src/ff.c **** 		fn[NS] = sn[NS]; dp->lfn = lfn;
1640:../Sources/ff10b/src/ff.c **** 	}
1641:../Sources/ff10b/src/ff.c **** 
1642:../Sources/ff10b/src/ff.c **** 	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
1643:../Sources/ff10b/src/ff.c **** 		for (n = 0; lfn[n]; n++) ;
1644:../Sources/ff10b/src/ff.c **** 		nent = (n + 25) / 13;
1645:../Sources/ff10b/src/ff.c **** 	} else {						/* Otherwise allocate an entry for an SFN  */
1646:../Sources/ff10b/src/ff.c **** 		nent = 1;
1647:../Sources/ff10b/src/ff.c **** 	}
1648:../Sources/ff10b/src/ff.c **** 	res = dir_alloc(dp, nent);		/* Allocate entries */
1649:../Sources/ff10b/src/ff.c **** 
1650:../Sources/ff10b/src/ff.c **** 	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
1651:../Sources/ff10b/src/ff.c **** 		res = dir_sdi(dp, dp->index - nent);
1652:../Sources/ff10b/src/ff.c **** 		if (res == FR_OK) {
1653:../Sources/ff10b/src/ff.c **** 			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
1654:../Sources/ff10b/src/ff.c **** 			do {					/* Store LFN entries in bottom first */
1655:../Sources/ff10b/src/ff.c **** 				res = move_window(dp->fs, dp->sect);
1656:../Sources/ff10b/src/ff.c **** 				if (res != FR_OK) break;
1657:../Sources/ff10b/src/ff.c **** 				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
1658:../Sources/ff10b/src/ff.c **** 				dp->fs->wflag = 1;
1659:../Sources/ff10b/src/ff.c **** 				res = dir_next(dp, 0);	/* Next entry */
1660:../Sources/ff10b/src/ff.c **** 			} while (res == FR_OK && --nent);
1661:../Sources/ff10b/src/ff.c **** 		}
1662:../Sources/ff10b/src/ff.c **** 	}
1663:../Sources/ff10b/src/ff.c **** #else	/* Non LFN configuration */
1664:../Sources/ff10b/src/ff.c **** 	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 2623              		.loc 1 1664 0
 2624 0fa4 7868     		ldr	r0, [r7, #4]
 2625 0fa6 4FF00101 		mov	r1, #1
 2626 0faa FFF799FE 		bl	dir_alloc
 2627 0fae 0346     		mov	r3, r0
 2628 0fb0 FB73     		strb	r3, [r7, #15]
1665:../Sources/ff10b/src/ff.c **** #endif
1666:../Sources/ff10b/src/ff.c **** 
1667:../Sources/ff10b/src/ff.c **** 	if (res == FR_OK) {				/* Set SFN entry */
 2629              		.loc 1 1667 0
 2630 0fb2 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2631 0fb4 002B     		cmp	r3, #0
 2632 0fb6 24D1     		bne	.L184
1668:../Sources/ff10b/src/ff.c **** 		res = move_window(dp->fs, dp->sect);
 2633              		.loc 1 1668 0
 2634 0fb8 7B68     		ldr	r3, [r7, #4]
 2635 0fba 1A68     		ldr	r2, [r3, #0]
 2636 0fbc 7B68     		ldr	r3, [r7, #4]
 2637 0fbe 1B69     		ldr	r3, [r3, #16]
 2638 0fc0 1046     		mov	r0, r2
 2639 0fc2 1946     		mov	r1, r3
 2640 0fc4 FFF706F9 		bl	move_window
 2641 0fc8 0346     		mov	r3, r0
 2642 0fca FB73     		strb	r3, [r7, #15]
1669:../Sources/ff10b/src/ff.c **** 		if (res == FR_OK) {
 2643              		.loc 1 1669 0
 2644 0fcc FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2645 0fce 002B     		cmp	r3, #0
 2646 0fd0 17D1     		bne	.L184
1670:../Sources/ff10b/src/ff.c **** 			mem_set(dp->dir, 0, SZ_DIR);	/* Clean the entry */
 2647              		.loc 1 1670 0
 2648 0fd2 7B68     		ldr	r3, [r7, #4]
 2649 0fd4 5B69     		ldr	r3, [r3, #20]
 2650 0fd6 1846     		mov	r0, r3
 2651 0fd8 4FF00001 		mov	r1, #0
 2652 0fdc 4FF02002 		mov	r2, #32
 2653 0fe0 FFF736F8 		bl	mem_set
1671:../Sources/ff10b/src/ff.c **** 			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 2654              		.loc 1 1671 0
 2655 0fe4 7B68     		ldr	r3, [r7, #4]
 2656 0fe6 5A69     		ldr	r2, [r3, #20]
 2657 0fe8 7B68     		ldr	r3, [r7, #4]
 2658 0fea 9B69     		ldr	r3, [r3, #24]
 2659 0fec 1046     		mov	r0, r2
 2660 0fee 1946     		mov	r1, r3
 2661 0ff0 4FF00B02 		mov	r2, #11
 2662 0ff4 FFF704F8 		bl	mem_cpy
1672:../Sources/ff10b/src/ff.c **** #if _USE_LFN
1673:../Sources/ff10b/src/ff.c **** 			dp->dir[DIR_NTres] = dp->fn[NS] & (NS_BODY | NS_EXT);	/* Put NT flag */
1674:../Sources/ff10b/src/ff.c **** #endif
1675:../Sources/ff10b/src/ff.c **** 			dp->fs->wflag = 1;
 2663              		.loc 1 1675 0
 2664 0ff8 7B68     		ldr	r3, [r7, #4]
 2665 0ffa 1B68     		ldr	r3, [r3, #0]
 2666 0ffc 4FF00102 		mov	r2, #1
 2667 1000 1A71     		strb	r2, [r3, #4]
 2668              	.L184:
1676:../Sources/ff10b/src/ff.c **** 		}
1677:../Sources/ff10b/src/ff.c **** 	}
1678:../Sources/ff10b/src/ff.c **** 
1679:../Sources/ff10b/src/ff.c **** 	return res;
 2669              		.loc 1 1679 0
 2670 1002 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1680:../Sources/ff10b/src/ff.c **** }
 2671              		.loc 1 1680 0
 2672 1004 1846     		mov	r0, r3
 2673 1006 07F11007 		add	r7, r7, #16
 2674 100a BD46     		mov	sp, r7
 2675 100c 80BD     		pop	{r7, pc}
 2676              		.cfi_endproc
 2677              	.LFE20:
 2679 100e 00BF     		.align	2
 2680              		.thumb
 2681              		.thumb_func
 2683              	dir_remove:
 2684              	.LFB21:
1681:../Sources/ff10b/src/ff.c **** #endif /* !_FS_READONLY */
1682:../Sources/ff10b/src/ff.c **** 
1683:../Sources/ff10b/src/ff.c **** 
1684:../Sources/ff10b/src/ff.c **** 
1685:../Sources/ff10b/src/ff.c **** 
1686:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
1687:../Sources/ff10b/src/ff.c **** /* Remove an object from the directory                                   */
1688:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
1689:../Sources/ff10b/src/ff.c **** #if !_FS_READONLY && !_FS_MINIMIZE
1690:../Sources/ff10b/src/ff.c **** static
1691:../Sources/ff10b/src/ff.c **** FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
1692:../Sources/ff10b/src/ff.c **** 	DIR* dp				/* Directory object pointing the entry to be removed */
1693:../Sources/ff10b/src/ff.c **** )
1694:../Sources/ff10b/src/ff.c **** {
 2685              		.loc 1 1694 0
 2686              		.cfi_startproc
 2687              		@ args = 0, pretend = 0, frame = 16
 2688              		@ frame_needed = 1, uses_anonymous_args = 0
 2689 1010 80B5     		push	{r7, lr}
 2690              	.LCFI62:
 2691              		.cfi_def_cfa_offset 8
 2692              		.cfi_offset 7, -8
 2693              		.cfi_offset 14, -4
 2694 1012 84B0     		sub	sp, sp, #16
 2695              	.LCFI63:
 2696              		.cfi_def_cfa_offset 24
 2697 1014 00AF     		add	r7, sp, #0
 2698              	.LCFI64:
 2699              		.cfi_def_cfa_register 7
 2700 1016 7860     		str	r0, [r7, #4]
1695:../Sources/ff10b/src/ff.c **** 	FRESULT res;
1696:../Sources/ff10b/src/ff.c **** #if _USE_LFN	/* LFN configuration */
1697:../Sources/ff10b/src/ff.c **** 	UINT i;
1698:../Sources/ff10b/src/ff.c **** 
1699:../Sources/ff10b/src/ff.c **** 	i = dp->index;	/* SFN index */
1700:../Sources/ff10b/src/ff.c **** 	res = dir_sdi(dp, (dp->lfn_idx == 0xFFFF) ? i : dp->lfn_idx);	/* Goto the SFN or top of the LFN en
1701:../Sources/ff10b/src/ff.c **** 	if (res == FR_OK) {
1702:../Sources/ff10b/src/ff.c **** 		do {
1703:../Sources/ff10b/src/ff.c **** 			res = move_window(dp->fs, dp->sect);
1704:../Sources/ff10b/src/ff.c **** 			if (res != FR_OK) break;
1705:../Sources/ff10b/src/ff.c **** 			mem_set(dp->dir, 0, SZ_DIR);	/* Clear and mark the entry "deleted" */
1706:../Sources/ff10b/src/ff.c **** 			*dp->dir = DDE;
1707:../Sources/ff10b/src/ff.c **** 			dp->fs->wflag = 1;
1708:../Sources/ff10b/src/ff.c **** 			if (dp->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
1709:../Sources/ff10b/src/ff.c **** 			res = dir_next(dp, 0);		/* Next entry */
1710:../Sources/ff10b/src/ff.c **** 		} while (res == FR_OK);
1711:../Sources/ff10b/src/ff.c **** 		if (res == FR_NO_FILE) res = FR_INT_ERR;
1712:../Sources/ff10b/src/ff.c **** 	}
1713:../Sources/ff10b/src/ff.c **** 
1714:../Sources/ff10b/src/ff.c **** #else			/* Non LFN configuration */
1715:../Sources/ff10b/src/ff.c **** 	res = dir_sdi(dp, dp->index);
 2701              		.loc 1 1715 0
 2702 1018 7B68     		ldr	r3, [r7, #4]
 2703 101a DB88     		ldrh	r3, [r3, #6]
 2704 101c 7868     		ldr	r0, [r7, #4]
 2705 101e 1946     		mov	r1, r3
 2706 1020 FFF7E6FC 		bl	dir_sdi
 2707 1024 0346     		mov	r3, r0
 2708 1026 FB73     		strb	r3, [r7, #15]
1716:../Sources/ff10b/src/ff.c **** 	if (res == FR_OK) {
 2709              		.loc 1 1716 0
 2710 1028 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2711 102a 002B     		cmp	r3, #0
 2712 102c 1FD1     		bne	.L187
1717:../Sources/ff10b/src/ff.c **** 		res = move_window(dp->fs, dp->sect);
 2713              		.loc 1 1717 0
 2714 102e 7B68     		ldr	r3, [r7, #4]
 2715 1030 1A68     		ldr	r2, [r3, #0]
 2716 1032 7B68     		ldr	r3, [r7, #4]
 2717 1034 1B69     		ldr	r3, [r3, #16]
 2718 1036 1046     		mov	r0, r2
 2719 1038 1946     		mov	r1, r3
 2720 103a FFF7CBF8 		bl	move_window
 2721 103e 0346     		mov	r3, r0
 2722 1040 FB73     		strb	r3, [r7, #15]
1718:../Sources/ff10b/src/ff.c **** 		if (res == FR_OK) {
 2723              		.loc 1 1718 0
 2724 1042 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2725 1044 002B     		cmp	r3, #0
 2726 1046 12D1     		bne	.L187
1719:../Sources/ff10b/src/ff.c **** 			mem_set(dp->dir, 0, SZ_DIR);	/* Clear and mark the entry "deleted" */
 2727              		.loc 1 1719 0
 2728 1048 7B68     		ldr	r3, [r7, #4]
 2729 104a 5B69     		ldr	r3, [r3, #20]
 2730 104c 1846     		mov	r0, r3
 2731 104e 4FF00001 		mov	r1, #0
 2732 1052 4FF02002 		mov	r2, #32
 2733 1056 FEF7FBFF 		bl	mem_set
1720:../Sources/ff10b/src/ff.c **** 			*dp->dir = DDE;
 2734              		.loc 1 1720 0
 2735 105a 7B68     		ldr	r3, [r7, #4]
 2736 105c 5B69     		ldr	r3, [r3, #20]
 2737 105e 4FF0E502 		mov	r2, #229
 2738 1062 1A70     		strb	r2, [r3, #0]
1721:../Sources/ff10b/src/ff.c **** 			dp->fs->wflag = 1;
 2739              		.loc 1 1721 0
 2740 1064 7B68     		ldr	r3, [r7, #4]
 2741 1066 1B68     		ldr	r3, [r3, #0]
 2742 1068 4FF00102 		mov	r2, #1
 2743 106c 1A71     		strb	r2, [r3, #4]
 2744              	.L187:
1722:../Sources/ff10b/src/ff.c **** 		}
1723:../Sources/ff10b/src/ff.c **** 	}
1724:../Sources/ff10b/src/ff.c **** #endif
1725:../Sources/ff10b/src/ff.c **** 
1726:../Sources/ff10b/src/ff.c **** 	return res;
 2745              		.loc 1 1726 0
 2746 106e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1727:../Sources/ff10b/src/ff.c **** }
 2747              		.loc 1 1727 0
 2748 1070 1846     		mov	r0, r3
 2749 1072 07F11007 		add	r7, r7, #16
 2750 1076 BD46     		mov	sp, r7
 2751 1078 80BD     		pop	{r7, pc}
 2752              		.cfi_endproc
 2753              	.LFE21:
 2755 107a 00BF     		.align	2
 2756              		.thumb
 2757              		.thumb_func
 2759              	get_fileinfo:
 2760              	.LFB22:
1728:../Sources/ff10b/src/ff.c **** #endif /* !_FS_READONLY */
1729:../Sources/ff10b/src/ff.c **** 
1730:../Sources/ff10b/src/ff.c **** 
1731:../Sources/ff10b/src/ff.c **** 
1732:../Sources/ff10b/src/ff.c **** 
1733:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
1734:../Sources/ff10b/src/ff.c **** /* Get file information from directory entry                             */
1735:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
1736:../Sources/ff10b/src/ff.c **** #if _FS_MINIMIZE <= 1 || _FS_RPATH >= 2
1737:../Sources/ff10b/src/ff.c **** static
1738:../Sources/ff10b/src/ff.c **** void get_fileinfo (		/* No return code */
1739:../Sources/ff10b/src/ff.c **** 	DIR* dp,			/* Pointer to the directory object */
1740:../Sources/ff10b/src/ff.c **** 	FILINFO* fno	 	/* Pointer to the file information to be filled */
1741:../Sources/ff10b/src/ff.c **** )
1742:../Sources/ff10b/src/ff.c **** {
 2761              		.loc 1 1742 0
 2762              		.cfi_startproc
 2763              		@ args = 0, pretend = 0, frame = 24
 2764              		@ frame_needed = 1, uses_anonymous_args = 0
 2765              		@ link register save eliminated.
 2766 107c 80B4     		push	{r7}
 2767              	.LCFI65:
 2768              		.cfi_def_cfa_offset 4
 2769              		.cfi_offset 7, -4
 2770 107e 87B0     		sub	sp, sp, #28
 2771              	.LCFI66:
 2772              		.cfi_def_cfa_offset 32
 2773 1080 00AF     		add	r7, sp, #0
 2774              	.LCFI67:
 2775              		.cfi_def_cfa_register 7
 2776 1082 7860     		str	r0, [r7, #4]
 2777 1084 3960     		str	r1, [r7, #0]
1743:../Sources/ff10b/src/ff.c **** 	UINT i;
1744:../Sources/ff10b/src/ff.c **** 	TCHAR *p, c;
1745:../Sources/ff10b/src/ff.c **** 
1746:../Sources/ff10b/src/ff.c **** 
1747:../Sources/ff10b/src/ff.c **** 	p = fno->fname;
 2778              		.loc 1 1747 0
 2779 1086 3B68     		ldr	r3, [r7, #0]
 2780 1088 03F10903 		add	r3, r3, #9
 2781 108c 3B61     		str	r3, [r7, #16]
1748:../Sources/ff10b/src/ff.c **** 	if (dp->sect) {		/* Get SFN */
 2782              		.loc 1 1748 0
 2783 108e 7B68     		ldr	r3, [r7, #4]
 2784 1090 1B69     		ldr	r3, [r3, #16]
 2785 1092 002B     		cmp	r3, #0
 2786 1094 6ED0     		beq	.L190
 2787              	.LBB3:
1749:../Sources/ff10b/src/ff.c **** 		BYTE *dir = dp->dir;
 2788              		.loc 1 1749 0
 2789 1096 7B68     		ldr	r3, [r7, #4]
 2790 1098 5B69     		ldr	r3, [r3, #20]
 2791 109a BB60     		str	r3, [r7, #8]
1750:../Sources/ff10b/src/ff.c **** 
1751:../Sources/ff10b/src/ff.c **** 		i = 0;
 2792              		.loc 1 1751 0
 2793 109c 4FF00003 		mov	r3, #0
 2794 10a0 7B61     		str	r3, [r7, #20]
1752:../Sources/ff10b/src/ff.c **** 		while (i < 11) {		/* Copy name body and extension */
 2795              		.loc 1 1752 0
 2796 10a2 25E0     		b	.L191
 2797              	.L195:
1753:../Sources/ff10b/src/ff.c **** 			c = (TCHAR)dir[i++];
 2798              		.loc 1 1753 0
 2799 10a4 BA68     		ldr	r2, [r7, #8]
 2800 10a6 7B69     		ldr	r3, [r7, #20]
 2801 10a8 D318     		adds	r3, r2, r3
 2802 10aa 1B78     		ldrb	r3, [r3, #0]
 2803 10ac FB73     		strb	r3, [r7, #15]
 2804 10ae 7B69     		ldr	r3, [r7, #20]
 2805 10b0 03F10103 		add	r3, r3, #1
 2806 10b4 7B61     		str	r3, [r7, #20]
1754:../Sources/ff10b/src/ff.c **** 			if (c == ' ') continue;			/* Skip padding spaces */
 2807              		.loc 1 1754 0
 2808 10b6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2809 10b8 202B     		cmp	r3, #32
 2810 10ba 18D0     		beq	.L196
 2811              	.L192:
1755:../Sources/ff10b/src/ff.c **** 			if (c == NDDE) c = (TCHAR)DDE;	/* Restore replaced DDE character */
 2812              		.loc 1 1755 0
 2813 10bc FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2814 10be 052B     		cmp	r3, #5
 2815 10c0 02D1     		bne	.L193
 2816              		.loc 1 1755 0 is_stmt 0 discriminator 1
 2817 10c2 4FF0E503 		mov	r3, #229
 2818 10c6 FB73     		strb	r3, [r7, #15]
 2819              	.L193:
1756:../Sources/ff10b/src/ff.c **** 			if (i == 9) *p++ = '.';			/* Insert a . if extension is exist */
 2820              		.loc 1 1756 0 is_stmt 1
 2821 10c8 7B69     		ldr	r3, [r7, #20]
 2822 10ca 092B     		cmp	r3, #9
 2823 10cc 07D1     		bne	.L194
 2824              		.loc 1 1756 0 is_stmt 0 discriminator 1
 2825 10ce 3B69     		ldr	r3, [r7, #16]
 2826 10d0 4FF02E02 		mov	r2, #46
 2827 10d4 1A70     		strb	r2, [r3, #0]
 2828 10d6 3B69     		ldr	r3, [r7, #16]
 2829 10d8 03F10103 		add	r3, r3, #1
 2830 10dc 3B61     		str	r3, [r7, #16]
 2831              	.L194:
1757:../Sources/ff10b/src/ff.c **** #if _USE_LFN
1758:../Sources/ff10b/src/ff.c **** 			if (IsUpper(c) && (dir[DIR_NTres] & (i >= 9 ? NS_EXT : NS_BODY)))
1759:../Sources/ff10b/src/ff.c **** 				c += 0x20;			/* To lower */
1760:../Sources/ff10b/src/ff.c **** #if _LFN_UNICODE
1761:../Sources/ff10b/src/ff.c **** 			if (IsDBCS1(c) && i != 8 && i != 11 && IsDBCS2(dir[i]))
1762:../Sources/ff10b/src/ff.c **** 				c = c << 8 | dir[i++];
1763:../Sources/ff10b/src/ff.c **** 			c = ff_convert(c, 1);	/* OEM -> Unicode */
1764:../Sources/ff10b/src/ff.c **** 			if (!c) c = '?';
1765:../Sources/ff10b/src/ff.c **** #endif
1766:../Sources/ff10b/src/ff.c **** #endif
1767:../Sources/ff10b/src/ff.c **** 			*p++ = c;
 2832              		.loc 1 1767 0 is_stmt 1
 2833 10de 3B69     		ldr	r3, [r7, #16]
 2834 10e0 FA7B     		ldrb	r2, [r7, #15]
 2835 10e2 1A70     		strb	r2, [r3, #0]
 2836 10e4 3B69     		ldr	r3, [r7, #16]
 2837 10e6 03F10103 		add	r3, r3, #1
 2838 10ea 3B61     		str	r3, [r7, #16]
 2839 10ec 00E0     		b	.L191
 2840              	.L196:
1754:../Sources/ff10b/src/ff.c **** 			if (c == ' ') continue;			/* Skip padding spaces */
 2841              		.loc 1 1754 0
 2842 10ee 00BF     		nop
 2843              	.L191:
1752:../Sources/ff10b/src/ff.c **** 		while (i < 11) {		/* Copy name body and extension */
 2844              		.loc 1 1752 0 discriminator 1
 2845 10f0 7B69     		ldr	r3, [r7, #20]
 2846 10f2 0A2B     		cmp	r3, #10
 2847 10f4 D6D9     		bls	.L195
1768:../Sources/ff10b/src/ff.c **** 		}
1769:../Sources/ff10b/src/ff.c **** 		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 2848              		.loc 1 1769 0
 2849 10f6 BB68     		ldr	r3, [r7, #8]
 2850 10f8 DA7A     		ldrb	r2, [r3, #11]	@ zero_extendqisi2
 2851 10fa 3B68     		ldr	r3, [r7, #0]
 2852 10fc 1A72     		strb	r2, [r3, #8]
1770:../Sources/ff10b/src/ff.c **** 		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
 2853              		.loc 1 1770 0
 2854 10fe BB68     		ldr	r3, [r7, #8]
 2855 1100 03F11F03 		add	r3, r3, #31
 2856 1104 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2857 1106 4FEA0362 		lsl	r2, r3, #24
 2858 110a BB68     		ldr	r3, [r7, #8]
 2859 110c 03F11E03 		add	r3, r3, #30
 2860 1110 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2861 1112 4FEA0343 		lsl	r3, r3, #16
 2862 1116 1A43     		orrs	r2, r2, r3
 2863 1118 BB68     		ldr	r3, [r7, #8]
 2864 111a 03F11D03 		add	r3, r3, #29
 2865 111e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2866 1120 4FEA0323 		lsl	r3, r3, #8
 2867 1124 1A43     		orrs	r2, r2, r3
 2868 1126 BB68     		ldr	r3, [r7, #8]
 2869 1128 03F11C03 		add	r3, r3, #28
 2870 112c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2871 112e 1A43     		orrs	r2, r2, r3
 2872 1130 3B68     		ldr	r3, [r7, #0]
 2873 1132 1A60     		str	r2, [r3, #0]
1771:../Sources/ff10b/src/ff.c **** 		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
 2874              		.loc 1 1771 0
 2875 1134 BB68     		ldr	r3, [r7, #8]
 2876 1136 03F11903 		add	r3, r3, #25
 2877 113a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2878 113c 4FEA0323 		lsl	r3, r3, #8
 2879 1140 9AB2     		uxth	r2, r3
 2880 1142 BB68     		ldr	r3, [r7, #8]
 2881 1144 03F11803 		add	r3, r3, #24
 2882 1148 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2883 114a 1343     		orrs	r3, r3, r2
 2884 114c 9BB2     		uxth	r3, r3
 2885 114e 9AB2     		uxth	r2, r3
 2886 1150 3B68     		ldr	r3, [r7, #0]
 2887 1152 9A80     		strh	r2, [r3, #4]	@ movhi
1772:../Sources/ff10b/src/ff.c **** 		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
 2888              		.loc 1 1772 0
 2889 1154 BB68     		ldr	r3, [r7, #8]
 2890 1156 03F11703 		add	r3, r3, #23
 2891 115a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2892 115c 4FEA0323 		lsl	r3, r3, #8
 2893 1160 9AB2     		uxth	r2, r3
 2894 1162 BB68     		ldr	r3, [r7, #8]
 2895 1164 03F11603 		add	r3, r3, #22
 2896 1168 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2897 116a 1343     		orrs	r3, r3, r2
 2898 116c 9BB2     		uxth	r3, r3
 2899 116e 9AB2     		uxth	r2, r3
 2900 1170 3B68     		ldr	r3, [r7, #0]
 2901 1172 DA80     		strh	r2, [r3, #6]	@ movhi
 2902              	.L190:
 2903              	.LBE3:
1773:../Sources/ff10b/src/ff.c **** 	}
1774:../Sources/ff10b/src/ff.c **** 	*p = 0;		/* Terminate SFN string by a \0 */
 2904              		.loc 1 1774 0
 2905 1174 3B69     		ldr	r3, [r7, #16]
 2906 1176 4FF00002 		mov	r2, #0
 2907 117a 1A70     		strb	r2, [r3, #0]
1775:../Sources/ff10b/src/ff.c **** 
1776:../Sources/ff10b/src/ff.c **** #if _USE_LFN
1777:../Sources/ff10b/src/ff.c **** 	if (fno->lfname) {
1778:../Sources/ff10b/src/ff.c **** 		WCHAR w, *lfn;
1779:../Sources/ff10b/src/ff.c **** 
1780:../Sources/ff10b/src/ff.c **** 		i = 0; p = fno->lfname;
1781:../Sources/ff10b/src/ff.c **** 		if (dp->sect && fno->lfsize && dp->lfn_idx != 0xFFFF) {	/* Get LFN if available */
1782:../Sources/ff10b/src/ff.c **** 			lfn = dp->lfn;
1783:../Sources/ff10b/src/ff.c **** 			while ((w = *lfn++) != 0) {		/* Get an LFN character */
1784:../Sources/ff10b/src/ff.c **** #if !_LFN_UNICODE
1785:../Sources/ff10b/src/ff.c **** 				w = ff_convert(w, 0);		/* Unicode -> OEM */
1786:../Sources/ff10b/src/ff.c **** 				if (!w) { i = 0; break; }	/* No LFN if it could not be converted */
1787:../Sources/ff10b/src/ff.c **** 				if (_DF1S && w >= 0x100)	/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
1788:../Sources/ff10b/src/ff.c **** 					p[i++] = (TCHAR)(w >> 8);
1789:../Sources/ff10b/src/ff.c **** #endif
1790:../Sources/ff10b/src/ff.c **** 				if (i >= fno->lfsize - 1) { i = 0; break; }	/* No LFN if buffer overflow */
1791:../Sources/ff10b/src/ff.c **** 				p[i++] = (TCHAR)w;
1792:../Sources/ff10b/src/ff.c **** 			}
1793:../Sources/ff10b/src/ff.c **** 		}
1794:../Sources/ff10b/src/ff.c **** 		p[i] = 0;	/* Terminate LFN string by a \0 */
1795:../Sources/ff10b/src/ff.c **** 	}
1796:../Sources/ff10b/src/ff.c **** #endif
1797:../Sources/ff10b/src/ff.c **** }
 2908              		.loc 1 1797 0
 2909 117c 07F11C07 		add	r7, r7, #28
 2910 1180 BD46     		mov	sp, r7
 2911 1182 80BC     		pop	{r7}
 2912 1184 7047     		bx	lr
 2913              		.cfi_endproc
 2914              	.LFE22:
 2916              		.section	.rodata
 2917              		.align	2
 2918              	.LC0:
 2919 0000 222A2B2C 		.ascii	"\"*+,:;<=>?[]|\177\000"
 2919      3A3B3C3D 
 2919      3E3F5B5D 
 2919      7C7F00
 2920 000f 00       		.text
 2921 1186 00BF     		.align	2
 2922              		.thumb
 2923              		.thumb_func
 2925              	create_name:
 2926              	.LFB23:
1798:../Sources/ff10b/src/ff.c **** #endif /* _FS_MINIMIZE <= 1 || _FS_RPATH >= 2*/
1799:../Sources/ff10b/src/ff.c **** 
1800:../Sources/ff10b/src/ff.c **** 
1801:../Sources/ff10b/src/ff.c **** 
1802:../Sources/ff10b/src/ff.c **** 
1803:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
1804:../Sources/ff10b/src/ff.c **** /* Pick a segment and create the object name in directory form           */
1805:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
1806:../Sources/ff10b/src/ff.c **** 
1807:../Sources/ff10b/src/ff.c **** static
1808:../Sources/ff10b/src/ff.c **** FRESULT create_name (
1809:../Sources/ff10b/src/ff.c **** 	DIR* dp,			/* Pointer to the directory object */
1810:../Sources/ff10b/src/ff.c **** 	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
1811:../Sources/ff10b/src/ff.c **** )
1812:../Sources/ff10b/src/ff.c **** {
 2927              		.loc 1 1812 0
 2928              		.cfi_startproc
 2929              		@ args = 0, pretend = 0, frame = 40
 2930              		@ frame_needed = 1, uses_anonymous_args = 0
 2931 1188 80B5     		push	{r7, lr}
 2932              	.LCFI68:
 2933              		.cfi_def_cfa_offset 8
 2934              		.cfi_offset 7, -8
 2935              		.cfi_offset 14, -4
 2936 118a 8AB0     		sub	sp, sp, #40
 2937              	.LCFI69:
 2938              		.cfi_def_cfa_offset 48
 2939 118c 00AF     		add	r7, sp, #0
 2940              	.LCFI70:
 2941              		.cfi_def_cfa_register 7
 2942 118e 7860     		str	r0, [r7, #4]
 2943 1190 3960     		str	r1, [r7, #0]
1813:../Sources/ff10b/src/ff.c **** #if _USE_LFN	/* LFN configuration */
1814:../Sources/ff10b/src/ff.c **** 	BYTE b, cf;
1815:../Sources/ff10b/src/ff.c **** 	WCHAR w, *lfn;
1816:../Sources/ff10b/src/ff.c **** 	UINT i, ni, si, di;
1817:../Sources/ff10b/src/ff.c **** 	const TCHAR *p;
1818:../Sources/ff10b/src/ff.c **** 
1819:../Sources/ff10b/src/ff.c **** 	/* Create LFN in Unicode */
1820:../Sources/ff10b/src/ff.c **** 	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
1821:../Sources/ff10b/src/ff.c **** 	lfn = dp->lfn;
1822:../Sources/ff10b/src/ff.c **** 	si = di = 0;
1823:../Sources/ff10b/src/ff.c **** 	for (;;) {
1824:../Sources/ff10b/src/ff.c **** 		w = p[si++];					/* Get a character */
1825:../Sources/ff10b/src/ff.c **** 		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
1826:../Sources/ff10b/src/ff.c **** 		if (di >= _MAX_LFN)				/* Reject too long name */
1827:../Sources/ff10b/src/ff.c **** 			return FR_INVALID_NAME;
1828:../Sources/ff10b/src/ff.c **** #if !_LFN_UNICODE
1829:../Sources/ff10b/src/ff.c **** 		w &= 0xFF;
1830:../Sources/ff10b/src/ff.c **** 		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
1831:../Sources/ff10b/src/ff.c **** 			b = (BYTE)p[si++];			/* Get 2nd byte */
1832:../Sources/ff10b/src/ff.c **** 			if (!IsDBCS2(b))
1833:../Sources/ff10b/src/ff.c **** 				return FR_INVALID_NAME;	/* Reject invalid sequence */
1834:../Sources/ff10b/src/ff.c **** 			w = (w << 8) + b;			/* Create a DBC */
1835:../Sources/ff10b/src/ff.c **** 		}
1836:../Sources/ff10b/src/ff.c **** 		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
1837:../Sources/ff10b/src/ff.c **** 		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
1838:../Sources/ff10b/src/ff.c **** #endif
1839:../Sources/ff10b/src/ff.c **** 		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
1840:../Sources/ff10b/src/ff.c **** 			return FR_INVALID_NAME;
1841:../Sources/ff10b/src/ff.c **** 		lfn[di++] = w;					/* Store the Unicode character */
1842:../Sources/ff10b/src/ff.c **** 	}
1843:../Sources/ff10b/src/ff.c **** 	*path = &p[si];						/* Return pointer to the next segment */
1844:../Sources/ff10b/src/ff.c **** 	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
1845:../Sources/ff10b/src/ff.c **** #if _FS_RPATH
1846:../Sources/ff10b/src/ff.c **** 	if ((di == 1 && lfn[di-1] == '.') || /* Is this a dot entry? */
1847:../Sources/ff10b/src/ff.c **** 		(di == 2 && lfn[di-1] == '.' && lfn[di-2] == '.')) {
1848:../Sources/ff10b/src/ff.c **** 		lfn[di] = 0;
1849:../Sources/ff10b/src/ff.c **** 		for (i = 0; i < 11; i++)
1850:../Sources/ff10b/src/ff.c **** 			dp->fn[i] = (i < di) ? '.' : ' ';
1851:../Sources/ff10b/src/ff.c **** 		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
1852:../Sources/ff10b/src/ff.c **** 		return FR_OK;
1853:../Sources/ff10b/src/ff.c **** 	}
1854:../Sources/ff10b/src/ff.c **** #endif
1855:../Sources/ff10b/src/ff.c **** 	while (di) {						/* Strip trailing spaces and dots */
1856:../Sources/ff10b/src/ff.c **** 		w = lfn[di-1];
1857:../Sources/ff10b/src/ff.c **** 		if (w != ' ' && w != '.') break;
1858:../Sources/ff10b/src/ff.c **** 		di--;
1859:../Sources/ff10b/src/ff.c **** 	}
1860:../Sources/ff10b/src/ff.c **** 	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
1861:../Sources/ff10b/src/ff.c **** 
1862:../Sources/ff10b/src/ff.c **** 	lfn[di] = 0;						/* LFN is created */
1863:../Sources/ff10b/src/ff.c **** 
1864:../Sources/ff10b/src/ff.c **** 	/* Create SFN in directory form */
1865:../Sources/ff10b/src/ff.c **** 	mem_set(dp->fn, ' ', 11);
1866:../Sources/ff10b/src/ff.c **** 	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
1867:../Sources/ff10b/src/ff.c **** 	if (si) cf |= NS_LOSS | NS_LFN;
1868:../Sources/ff10b/src/ff.c **** 	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
1869:../Sources/ff10b/src/ff.c **** 
1870:../Sources/ff10b/src/ff.c **** 	b = i = 0; ni = 8;
1871:../Sources/ff10b/src/ff.c **** 	for (;;) {
1872:../Sources/ff10b/src/ff.c **** 		w = lfn[si++];					/* Get an LFN character */
1873:../Sources/ff10b/src/ff.c **** 		if (!w) break;					/* Break on end of the LFN */
1874:../Sources/ff10b/src/ff.c **** 		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
1875:../Sources/ff10b/src/ff.c **** 			cf |= NS_LOSS | NS_LFN; continue;
1876:../Sources/ff10b/src/ff.c **** 		}
1877:../Sources/ff10b/src/ff.c **** 
1878:../Sources/ff10b/src/ff.c **** 		if (i >= ni || si == di) {		/* Extension or end of SFN */
1879:../Sources/ff10b/src/ff.c **** 			if (ni == 11) {				/* Long extension */
1880:../Sources/ff10b/src/ff.c **** 				cf |= NS_LOSS | NS_LFN; break;
1881:../Sources/ff10b/src/ff.c **** 			}
1882:../Sources/ff10b/src/ff.c **** 			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
1883:../Sources/ff10b/src/ff.c **** 			if (si > di) break;			/* No extension */
1884:../Sources/ff10b/src/ff.c **** 			si = di; i = 8; ni = 11;	/* Enter extension section */
1885:../Sources/ff10b/src/ff.c **** 			b <<= 2; continue;
1886:../Sources/ff10b/src/ff.c **** 		}
1887:../Sources/ff10b/src/ff.c **** 
1888:../Sources/ff10b/src/ff.c **** 		if (w >= 0x80) {				/* Non ASCII character */
1889:../Sources/ff10b/src/ff.c **** #ifdef _EXCVT
1890:../Sources/ff10b/src/ff.c **** 			w = ff_convert(w, 0);		/* Unicode -> OEM code */
1891:../Sources/ff10b/src/ff.c **** 			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
1892:../Sources/ff10b/src/ff.c **** #else
1893:../Sources/ff10b/src/ff.c **** 			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
1894:../Sources/ff10b/src/ff.c **** #endif
1895:../Sources/ff10b/src/ff.c **** 			cf |= NS_LFN;				/* Force create LFN entry */
1896:../Sources/ff10b/src/ff.c **** 		}
1897:../Sources/ff10b/src/ff.c **** 
1898:../Sources/ff10b/src/ff.c **** 		if (_DF1S && w >= 0x100) {		/* Double byte character (always false on SBCS cfg) */
1899:../Sources/ff10b/src/ff.c **** 			if (i >= ni - 1) {
1900:../Sources/ff10b/src/ff.c **** 				cf |= NS_LOSS | NS_LFN; i = ni; continue;
1901:../Sources/ff10b/src/ff.c **** 			}
1902:../Sources/ff10b/src/ff.c **** 			dp->fn[i++] = (BYTE)(w >> 8);
1903:../Sources/ff10b/src/ff.c **** 		} else {						/* Single byte character */
1904:../Sources/ff10b/src/ff.c **** 			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
1905:../Sources/ff10b/src/ff.c **** 				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
1906:../Sources/ff10b/src/ff.c **** 			} else {
1907:../Sources/ff10b/src/ff.c **** 				if (IsUpper(w)) {		/* ASCII large capital */
1908:../Sources/ff10b/src/ff.c **** 					b |= 2;
1909:../Sources/ff10b/src/ff.c **** 				} else {
1910:../Sources/ff10b/src/ff.c **** 					if (IsLower(w)) {	/* ASCII small capital */
1911:../Sources/ff10b/src/ff.c **** 						b |= 1; w -= 0x20;
1912:../Sources/ff10b/src/ff.c **** 					}
1913:../Sources/ff10b/src/ff.c **** 				}
1914:../Sources/ff10b/src/ff.c **** 			}
1915:../Sources/ff10b/src/ff.c **** 		}
1916:../Sources/ff10b/src/ff.c **** 		dp->fn[i++] = (BYTE)w;
1917:../Sources/ff10b/src/ff.c **** 	}
1918:../Sources/ff10b/src/ff.c **** 
1919:../Sources/ff10b/src/ff.c **** 	if (dp->fn[0] == DDE) dp->fn[0] = NDDE;	/* If the first character collides with deleted mark, repl
1920:../Sources/ff10b/src/ff.c **** 
1921:../Sources/ff10b/src/ff.c **** 	if (ni == 8) b <<= 2;
1922:../Sources/ff10b/src/ff.c **** 	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capital
1923:../Sources/ff10b/src/ff.c **** 		cf |= NS_LFN;
1924:../Sources/ff10b/src/ff.c **** 	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are c
1925:../Sources/ff10b/src/ff.c **** 		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
1926:../Sources/ff10b/src/ff.c **** 		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
1927:../Sources/ff10b/src/ff.c **** 	}
1928:../Sources/ff10b/src/ff.c **** 
1929:../Sources/ff10b/src/ff.c **** 	dp->fn[NS] = cf;	/* SFN is created */
1930:../Sources/ff10b/src/ff.c **** 
1931:../Sources/ff10b/src/ff.c **** 	return FR_OK;
1932:../Sources/ff10b/src/ff.c **** 
1933:../Sources/ff10b/src/ff.c **** 
1934:../Sources/ff10b/src/ff.c **** #else	/* Non-LFN configuration */
1935:../Sources/ff10b/src/ff.c **** 	BYTE b, c, d, *sfn;
1936:../Sources/ff10b/src/ff.c **** 	UINT ni, si, i;
1937:../Sources/ff10b/src/ff.c **** 	const char *p;
1938:../Sources/ff10b/src/ff.c **** 
1939:../Sources/ff10b/src/ff.c **** 	/* Create file name in directory form */
1940:../Sources/ff10b/src/ff.c **** 	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 2944              		.loc 1 1940 0
 2945 1192 3B68     		ldr	r3, [r7, #0]
 2946 1194 1B68     		ldr	r3, [r3, #0]
 2947 1196 7B61     		str	r3, [r7, #20]
 2948 1198 03E0     		b	.L198
 2949              	.L199:
 2950              		.loc 1 1940 0 is_stmt 0 discriminator 2
 2951 119a 7B69     		ldr	r3, [r7, #20]
 2952 119c 03F10103 		add	r3, r3, #1
 2953 11a0 7B61     		str	r3, [r7, #20]
 2954              	.L198:
 2955              		.loc 1 1940 0 discriminator 1
 2956 11a2 7B69     		ldr	r3, [r7, #20]
 2957 11a4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2958 11a6 2F2B     		cmp	r3, #47
 2959 11a8 F7D0     		beq	.L199
 2960              		.loc 1 1940 0 discriminator 3
 2961 11aa 7B69     		ldr	r3, [r7, #20]
 2962 11ac 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2963 11ae 5C2B     		cmp	r3, #92
 2964 11b0 F3D0     		beq	.L199
1941:../Sources/ff10b/src/ff.c **** 	sfn = dp->fn;
 2965              		.loc 1 1941 0 is_stmt 1
 2966 11b2 7B68     		ldr	r3, [r7, #4]
 2967 11b4 9B69     		ldr	r3, [r3, #24]
 2968 11b6 3B61     		str	r3, [r7, #16]
1942:../Sources/ff10b/src/ff.c **** 	mem_set(sfn, ' ', 11);
 2969              		.loc 1 1942 0
 2970 11b8 3869     		ldr	r0, [r7, #16]
 2971 11ba 4FF02001 		mov	r1, #32
 2972 11be 4FF00B02 		mov	r2, #11
 2973 11c2 FEF745FF 		bl	mem_set
1943:../Sources/ff10b/src/ff.c **** 	si = i = b = 0; ni = 8;
 2974              		.loc 1 1943 0
 2975 11c6 4FF00003 		mov	r3, #0
 2976 11ca 87F82730 		strb	r3, [r7, #39]
 2977 11ce 4FF00003 		mov	r3, #0
 2978 11d2 BB61     		str	r3, [r7, #24]
 2979 11d4 BB69     		ldr	r3, [r7, #24]
 2980 11d6 FB61     		str	r3, [r7, #28]
 2981 11d8 4FF00803 		mov	r3, #8
 2982 11dc 3B62     		str	r3, [r7, #32]
 2983              	.L218:
1944:../Sources/ff10b/src/ff.c **** #if _FS_RPATH
1945:../Sources/ff10b/src/ff.c **** 	if (p[si] == '.') { /* Is this a dot entry? */
1946:../Sources/ff10b/src/ff.c **** 		for (;;) {
1947:../Sources/ff10b/src/ff.c **** 			c = (BYTE)p[si++];
1948:../Sources/ff10b/src/ff.c **** 			if (c != '.' || si >= 3) break;
1949:../Sources/ff10b/src/ff.c **** 			sfn[i++] = c;
1950:../Sources/ff10b/src/ff.c **** 		}
1951:../Sources/ff10b/src/ff.c **** 		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
1952:../Sources/ff10b/src/ff.c **** 		*path = &p[si];									/* Return pointer to the next segment */
1953:../Sources/ff10b/src/ff.c **** 		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
1954:../Sources/ff10b/src/ff.c **** 		return FR_OK;
1955:../Sources/ff10b/src/ff.c **** 	}
1956:../Sources/ff10b/src/ff.c **** #endif
1957:../Sources/ff10b/src/ff.c **** 	for (;;) {
1958:../Sources/ff10b/src/ff.c **** 		c = (BYTE)p[si++];
 2984              		.loc 1 1958 0
 2985 11de 7A69     		ldr	r2, [r7, #20]
 2986 11e0 FB69     		ldr	r3, [r7, #28]
 2987 11e2 D318     		adds	r3, r2, r3
 2988 11e4 1B78     		ldrb	r3, [r3, #0]
 2989 11e6 87F82630 		strb	r3, [r7, #38]
 2990 11ea FB69     		ldr	r3, [r7, #28]
 2991 11ec 03F10103 		add	r3, r3, #1
 2992 11f0 FB61     		str	r3, [r7, #28]
1959:../Sources/ff10b/src/ff.c **** 		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 2993              		.loc 1 1959 0
 2994 11f2 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 2995 11f6 202B     		cmp	r3, #32
 2996 11f8 40F2B580 		bls	.L200
 2997              		.loc 1 1959 0 is_stmt 0 discriminator 1
 2998 11fc 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 2999 1200 2F2B     		cmp	r3, #47
 3000 1202 00F0B080 		beq	.L200
 3001 1206 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 3002 120a 5C2B     		cmp	r3, #92
 3003 120c 00F0AB80 		beq	.L200
1960:../Sources/ff10b/src/ff.c **** 		if (c == '.' || i >= ni) {
 3004              		.loc 1 1960 0 is_stmt 1
 3005 1210 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 3006 1214 2E2B     		cmp	r3, #46
 3007 1216 03D0     		beq	.L201
 3008              		.loc 1 1960 0 is_stmt 0 discriminator 1
 3009 1218 BA69     		ldr	r2, [r7, #24]
 3010 121a 3B6A     		ldr	r3, [r7, #32]
 3011 121c 9A42     		cmp	r2, r3
 3012 121e 16D3     		bcc	.L202
 3013              	.L201:
1961:../Sources/ff10b/src/ff.c **** 			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 3014              		.loc 1 1961 0 is_stmt 1
 3015 1220 3B6A     		ldr	r3, [r7, #32]
 3016 1222 082B     		cmp	r3, #8
 3017 1224 03D1     		bne	.L203
 3018              		.loc 1 1961 0 is_stmt 0 discriminator 2
 3019 1226 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 3020 122a 2E2B     		cmp	r3, #46
 3021 122c 02D0     		beq	.L204
 3022              	.L203:
 3023              		.loc 1 1961 0 discriminator 1
 3024 122e 4FF00603 		mov	r3, #6
 3025 1232 DFE0     		b	.L205
 3026              	.L204:
1962:../Sources/ff10b/src/ff.c **** 			i = 8; ni = 11;
 3027              		.loc 1 1962 0 is_stmt 1
 3028 1234 4FF00803 		mov	r3, #8
 3029 1238 BB61     		str	r3, [r7, #24]
 3030 123a 4FF00B03 		mov	r3, #11
 3031 123e 3B62     		str	r3, [r7, #32]
1963:../Sources/ff10b/src/ff.c **** 			b <<= 2; continue;
 3032              		.loc 1 1963 0
 3033 1240 97F82730 		ldrb	r3, [r7, #39]
 3034 1244 4FEA8303 		lsl	r3, r3, #2
 3035 1248 87F82730 		strb	r3, [r7, #39]
 3036 124c 8AE0     		b	.L206
 3037              	.L202:
1964:../Sources/ff10b/src/ff.c **** 		}
1965:../Sources/ff10b/src/ff.c **** 		if (c >= 0x80) {				/* Extended character? */
 3038              		.loc 1 1965 0
 3039 124e 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 3040 1252 5BB2     		sxtb	r3, r3
 3041 1254 002B     		cmp	r3, #0
 3042 1256 05DA     		bge	.L207
1966:../Sources/ff10b/src/ff.c **** 			b |= 3;						/* Eliminate NT flag */
 3043              		.loc 1 1966 0
 3044 1258 97F82730 		ldrb	r3, [r7, #39]
 3045 125c 43F00303 		orr	r3, r3, #3
 3046 1260 87F82730 		strb	r3, [r7, #39]
 3047              	.L207:
1967:../Sources/ff10b/src/ff.c **** #ifdef _EXCVT
1968:../Sources/ff10b/src/ff.c **** 			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
1969:../Sources/ff10b/src/ff.c **** #else
1970:../Sources/ff10b/src/ff.c **** #if !_DF1S
1971:../Sources/ff10b/src/ff.c **** 			return FR_INVALID_NAME;		/* Reject extended characters (ASCII cfg) */
1972:../Sources/ff10b/src/ff.c **** #endif
1973:../Sources/ff10b/src/ff.c **** #endif
1974:../Sources/ff10b/src/ff.c **** 		}
1975:../Sources/ff10b/src/ff.c **** 		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
 3048              		.loc 1 1975 0
 3049 1264 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 3050 1268 802B     		cmp	r3, #128
 3051 126a 03D9     		bls	.L208
 3052              		.loc 1 1975 0 is_stmt 0 discriminator 1
 3053 126c 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 3054 1270 9F2B     		cmp	r3, #159
 3055 1272 07D9     		bls	.L209
 3056              	.L208:
 3057              		.loc 1 1975 0 discriminator 2
 3058 1274 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 3059 1278 DF2B     		cmp	r3, #223
 3060 127a 36D9     		bls	.L210
 3061              		.loc 1 1975 0 discriminator 1
 3062 127c 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 3063 1280 FC2B     		cmp	r3, #252
 3064 1282 32D8     		bhi	.L210
 3065              	.L209:
1976:../Sources/ff10b/src/ff.c **** 			d = (BYTE)p[si++];			/* Get 2nd byte */
 3066              		.loc 1 1976 0 is_stmt 1
 3067 1284 7A69     		ldr	r2, [r7, #20]
 3068 1286 FB69     		ldr	r3, [r7, #28]
 3069 1288 D318     		adds	r3, r2, r3
 3070 128a 1B78     		ldrb	r3, [r3, #0]
 3071 128c FB73     		strb	r3, [r7, #15]
 3072 128e FB69     		ldr	r3, [r7, #28]
 3073 1290 03F10103 		add	r3, r3, #1
 3074 1294 FB61     		str	r3, [r7, #28]
1977:../Sources/ff10b/src/ff.c **** 			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
 3075              		.loc 1 1977 0
 3076 1296 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3077 1298 3F2B     		cmp	r3, #63
 3078 129a 02D9     		bls	.L211
 3079              		.loc 1 1977 0 is_stmt 0 discriminator 2
 3080 129c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3081 129e 7E2B     		cmp	r3, #126
 3082 12a0 06D9     		bls	.L212
 3083              	.L211:
 3084              		.loc 1 1977 0 discriminator 1
 3085 12a2 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3086 12a4 5BB2     		sxtb	r3, r3
 3087 12a6 002B     		cmp	r3, #0
 3088 12a8 08DA     		bge	.L213
 3089 12aa FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3090 12ac FC2B     		cmp	r3, #252
 3091 12ae 05D8     		bhi	.L213
 3092              	.L212:
 3093 12b0 3B6A     		ldr	r3, [r7, #32]
 3094 12b2 03F1FF32 		add	r2, r3, #-1
 3095 12b6 BB69     		ldr	r3, [r7, #24]
 3096 12b8 9A42     		cmp	r2, r3
 3097 12ba 02D8     		bhi	.L214
 3098              	.L213:
1978:../Sources/ff10b/src/ff.c **** 				return FR_INVALID_NAME;
 3099              		.loc 1 1978 0 is_stmt 1
 3100 12bc 4FF00603 		mov	r3, #6
 3101 12c0 98E0     		b	.L205
 3102              	.L214:
1979:../Sources/ff10b/src/ff.c **** 			sfn[i++] = c;
 3103              		.loc 1 1979 0
 3104 12c2 3A69     		ldr	r2, [r7, #16]
 3105 12c4 BB69     		ldr	r3, [r7, #24]
 3106 12c6 D318     		adds	r3, r2, r3
 3107 12c8 97F82620 		ldrb	r2, [r7, #38]
 3108 12cc 1A70     		strb	r2, [r3, #0]
 3109 12ce BB69     		ldr	r3, [r7, #24]
 3110 12d0 03F10103 		add	r3, r3, #1
 3111 12d4 BB61     		str	r3, [r7, #24]
1980:../Sources/ff10b/src/ff.c **** 			sfn[i++] = d;
 3112              		.loc 1 1980 0
 3113 12d6 3A69     		ldr	r2, [r7, #16]
 3114 12d8 BB69     		ldr	r3, [r7, #24]
 3115 12da D318     		adds	r3, r2, r3
 3116 12dc FA7B     		ldrb	r2, [r7, #15]
 3117 12de 1A70     		strb	r2, [r3, #0]
 3118 12e0 BB69     		ldr	r3, [r7, #24]
 3119 12e2 03F10103 		add	r3, r3, #1
 3120 12e6 BB61     		str	r3, [r7, #24]
 3121 12e8 3CE0     		b	.L206
 3122              	.L210:
1981:../Sources/ff10b/src/ff.c **** 		} else {						/* Single byte code */
1982:../Sources/ff10b/src/ff.c **** 			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 3123              		.loc 1 1982 0
 3124 12ea 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 3125 12ee 40F20000 		movw	r0, #:lower16:.LC0
 3126 12f2 C0F20000 		movt	r0, #:upper16:.LC0
 3127 12f6 1946     		mov	r1, r3
 3128 12f8 FEF704FF 		bl	chk_chr
 3129 12fc 0346     		mov	r3, r0
 3130 12fe 002B     		cmp	r3, #0
 3131 1300 02D0     		beq	.L215
1983:../Sources/ff10b/src/ff.c **** 				return FR_INVALID_NAME;
 3132              		.loc 1 1983 0
 3133 1302 4FF00603 		mov	r3, #6
 3134 1306 75E0     		b	.L205
 3135              	.L215:
1984:../Sources/ff10b/src/ff.c **** 			if (IsUpper(c)) {			/* ASCII large capital? */
 3136              		.loc 1 1984 0
 3137 1308 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 3138 130c 402B     		cmp	r3, #64
 3139 130e 0AD9     		bls	.L216
 3140              		.loc 1 1984 0 is_stmt 0 discriminator 1
 3141 1310 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 3142 1314 5A2B     		cmp	r3, #90
 3143 1316 06D8     		bhi	.L216
1985:../Sources/ff10b/src/ff.c **** 				b |= 2;
 3144              		.loc 1 1985 0 is_stmt 1
 3145 1318 97F82730 		ldrb	r3, [r7, #39]
 3146 131c 43F00203 		orr	r3, r3, #2
 3147 1320 87F82730 		strb	r3, [r7, #39]
 3148 1324 13E0     		b	.L217
 3149              	.L216:
1986:../Sources/ff10b/src/ff.c **** 			} else {
1987:../Sources/ff10b/src/ff.c **** 				if (IsLower(c)) {		/* ASCII small capital? */
 3150              		.loc 1 1987 0
 3151 1326 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 3152 132a 602B     		cmp	r3, #96
 3153 132c 0FD9     		bls	.L217
 3154              		.loc 1 1987 0 is_stmt 0 discriminator 1
 3155 132e 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 3156 1332 7A2B     		cmp	r3, #122
 3157 1334 0BD8     		bhi	.L217
1988:../Sources/ff10b/src/ff.c **** 					b |= 1; c -= 0x20;
 3158              		.loc 1 1988 0 is_stmt 1
 3159 1336 97F82730 		ldrb	r3, [r7, #39]
 3160 133a 43F00103 		orr	r3, r3, #1
 3161 133e 87F82730 		strb	r3, [r7, #39]
 3162 1342 97F82630 		ldrb	r3, [r7, #38]
 3163 1346 A3F12003 		sub	r3, r3, #32
 3164 134a 87F82630 		strb	r3, [r7, #38]
 3165              	.L217:
1989:../Sources/ff10b/src/ff.c **** 				}
1990:../Sources/ff10b/src/ff.c **** 			}
1991:../Sources/ff10b/src/ff.c **** 			sfn[i++] = c;
 3166              		.loc 1 1991 0
 3167 134e 3A69     		ldr	r2, [r7, #16]
 3168 1350 BB69     		ldr	r3, [r7, #24]
 3169 1352 D318     		adds	r3, r2, r3
 3170 1354 97F82620 		ldrb	r2, [r7, #38]
 3171 1358 1A70     		strb	r2, [r3, #0]
 3172 135a BB69     		ldr	r3, [r7, #24]
 3173 135c 03F10103 		add	r3, r3, #1
 3174 1360 BB61     		str	r3, [r7, #24]
1992:../Sources/ff10b/src/ff.c **** 		}
1993:../Sources/ff10b/src/ff.c **** 	}
 3175              		.loc 1 1993 0
 3176 1362 3CE7     		b	.L218
 3177              	.L206:
 3178 1364 3BE7     		b	.L218
 3179              	.L200:
1994:../Sources/ff10b/src/ff.c **** 	*path = &p[si];						/* Return pointer to the next segment */
 3180              		.loc 1 1994 0
 3181 1366 7A69     		ldr	r2, [r7, #20]
 3182 1368 FB69     		ldr	r3, [r7, #28]
 3183 136a D218     		adds	r2, r2, r3
 3184 136c 3B68     		ldr	r3, [r7, #0]
 3185 136e 1A60     		str	r2, [r3, #0]
1995:../Sources/ff10b/src/ff.c **** 	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 3186              		.loc 1 1995 0
 3187 1370 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 3188 1374 202B     		cmp	r3, #32
 3189 1376 02D8     		bhi	.L219
 3190              		.loc 1 1995 0 is_stmt 0 discriminator 1
 3191 1378 4FF00403 		mov	r3, #4
 3192 137c 01E0     		b	.L220
 3193              	.L219:
 3194              		.loc 1 1995 0 discriminator 2
 3195 137e 4FF00003 		mov	r3, #0
 3196              	.L220:
 3197              		.loc 1 1995 0 discriminator 3
 3198 1382 87F82630 		strb	r3, [r7, #38]
1996:../Sources/ff10b/src/ff.c **** 
1997:../Sources/ff10b/src/ff.c **** 	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 3199              		.loc 1 1997 0 is_stmt 1 discriminator 3
 3200 1386 BB69     		ldr	r3, [r7, #24]
 3201 1388 002B     		cmp	r3, #0
 3202 138a 02D1     		bne	.L221
 3203              		.loc 1 1997 0 is_stmt 0 discriminator 1
 3204 138c 4FF00603 		mov	r3, #6
 3205 1390 30E0     		b	.L205
 3206              	.L221:
1998:../Sources/ff10b/src/ff.c **** 	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first character collides with DDE, replace it with 0x05 
 3207              		.loc 1 1998 0 is_stmt 1
 3208 1392 3B69     		ldr	r3, [r7, #16]
 3209 1394 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3210 1396 E52B     		cmp	r3, #229
 3211 1398 03D1     		bne	.L222
 3212              		.loc 1 1998 0 is_stmt 0 discriminator 1
 3213 139a 3B69     		ldr	r3, [r7, #16]
 3214 139c 4FF00502 		mov	r2, #5
 3215 13a0 1A70     		strb	r2, [r3, #0]
 3216              	.L222:
1999:../Sources/ff10b/src/ff.c **** 
2000:../Sources/ff10b/src/ff.c **** 	if (ni == 8) b <<= 2;
 3217              		.loc 1 2000 0 is_stmt 1
 3218 13a2 3B6A     		ldr	r3, [r7, #32]
 3219 13a4 082B     		cmp	r3, #8
 3220 13a6 05D1     		bne	.L223
 3221              		.loc 1 2000 0 is_stmt 0 discriminator 1
 3222 13a8 97F82730 		ldrb	r3, [r7, #39]
 3223 13ac 4FEA8303 		lsl	r3, r3, #2
 3224 13b0 87F82730 		strb	r3, [r7, #39]
 3225              	.L223:
2001:../Sources/ff10b/src/ff.c **** 	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 3226              		.loc 1 2001 0 is_stmt 1
 3227 13b4 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 3228 13b8 03F00303 		and	r3, r3, #3
 3229 13bc 012B     		cmp	r3, #1
 3230 13be 05D1     		bne	.L224
 3231              		.loc 1 2001 0 is_stmt 0 discriminator 1
 3232 13c0 97F82630 		ldrb	r3, [r7, #38]
 3233 13c4 43F01003 		orr	r3, r3, #16
 3234 13c8 87F82630 		strb	r3, [r7, #38]
 3235              	.L224:
2002:../Sources/ff10b/src/ff.c **** 	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 3236              		.loc 1 2002 0 is_stmt 1
 3237 13cc 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 3238 13d0 03F00C03 		and	r3, r3, #12
 3239 13d4 042B     		cmp	r3, #4
 3240 13d6 05D1     		bne	.L225
 3241              		.loc 1 2002 0 is_stmt 0 discriminator 1
 3242 13d8 97F82630 		ldrb	r3, [r7, #38]
 3243 13dc 43F00803 		orr	r3, r3, #8
 3244 13e0 87F82630 		strb	r3, [r7, #38]
 3245              	.L225:
2003:../Sources/ff10b/src/ff.c **** 
2004:../Sources/ff10b/src/ff.c **** 	sfn[NS] = c;		/* Store NT flag, File name is created */
 3246              		.loc 1 2004 0 is_stmt 1
 3247 13e4 3B69     		ldr	r3, [r7, #16]
 3248 13e6 03F10B03 		add	r3, r3, #11
 3249 13ea 97F82620 		ldrb	r2, [r7, #38]
 3250 13ee 1A70     		strb	r2, [r3, #0]
2005:../Sources/ff10b/src/ff.c **** 
2006:../Sources/ff10b/src/ff.c **** 	return FR_OK;
 3251              		.loc 1 2006 0
 3252 13f0 4FF00003 		mov	r3, #0
 3253              	.L205:
2007:../Sources/ff10b/src/ff.c **** #endif
2008:../Sources/ff10b/src/ff.c **** }
 3254              		.loc 1 2008 0
 3255 13f4 1846     		mov	r0, r3
 3256 13f6 07F12807 		add	r7, r7, #40
 3257 13fa BD46     		mov	sp, r7
 3258 13fc 80BD     		pop	{r7, pc}
 3259              		.cfi_endproc
 3260              	.LFE23:
 3262 13fe 00BF     		.align	2
 3263              		.thumb
 3264              		.thumb_func
 3266              	follow_path:
 3267              	.LFB24:
2009:../Sources/ff10b/src/ff.c **** 
2010:../Sources/ff10b/src/ff.c **** 
2011:../Sources/ff10b/src/ff.c **** 
2012:../Sources/ff10b/src/ff.c **** 
2013:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
2014:../Sources/ff10b/src/ff.c **** /* Follow a file path                                                    */
2015:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
2016:../Sources/ff10b/src/ff.c **** 
2017:../Sources/ff10b/src/ff.c **** static
2018:../Sources/ff10b/src/ff.c **** FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
2019:../Sources/ff10b/src/ff.c **** 	DIR* dp,			/* Directory object to return last directory and found object */
2020:../Sources/ff10b/src/ff.c **** 	const TCHAR* path	/* Full-path string to find a file or directory */
2021:../Sources/ff10b/src/ff.c **** )
2022:../Sources/ff10b/src/ff.c **** {
 3268              		.loc 1 2022 0
 3269              		.cfi_startproc
 3270              		@ args = 0, pretend = 0, frame = 16
 3271              		@ frame_needed = 1, uses_anonymous_args = 0
 3272 1400 80B5     		push	{r7, lr}
 3273              	.LCFI71:
 3274              		.cfi_def_cfa_offset 8
 3275              		.cfi_offset 7, -8
 3276              		.cfi_offset 14, -4
 3277 1402 84B0     		sub	sp, sp, #16
 3278              	.LCFI72:
 3279              		.cfi_def_cfa_offset 24
 3280 1404 00AF     		add	r7, sp, #0
 3281              	.LCFI73:
 3282              		.cfi_def_cfa_register 7
 3283 1406 7860     		str	r0, [r7, #4]
 3284 1408 3960     		str	r1, [r7, #0]
2023:../Sources/ff10b/src/ff.c **** 	FRESULT res;
2024:../Sources/ff10b/src/ff.c **** 	BYTE *dir, ns;
2025:../Sources/ff10b/src/ff.c **** 
2026:../Sources/ff10b/src/ff.c **** 
2027:../Sources/ff10b/src/ff.c **** #if _FS_RPATH
2028:../Sources/ff10b/src/ff.c **** 	if (*path == '/' || *path == '\\') {	/* There is a heading separator */
2029:../Sources/ff10b/src/ff.c **** 		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
2030:../Sources/ff10b/src/ff.c **** 	} else {								/* No heading separator */
2031:../Sources/ff10b/src/ff.c **** 		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
2032:../Sources/ff10b/src/ff.c **** 	}
2033:../Sources/ff10b/src/ff.c **** #else
2034:../Sources/ff10b/src/ff.c **** 	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 3285              		.loc 1 2034 0
 3286 140a 3B68     		ldr	r3, [r7, #0]
 3287 140c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3288 140e 2F2B     		cmp	r3, #47
 3289 1410 03D0     		beq	.L227
 3290              		.loc 1 2034 0 is_stmt 0 discriminator 1
 3291 1412 3B68     		ldr	r3, [r7, #0]
 3292 1414 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3293 1416 5C2B     		cmp	r3, #92
 3294 1418 03D1     		bne	.L228
 3295              	.L227:
2035:../Sources/ff10b/src/ff.c **** 		path++;
 3296              		.loc 1 2035 0 is_stmt 1
 3297 141a 3B68     		ldr	r3, [r7, #0]
 3298 141c 03F10103 		add	r3, r3, #1
 3299 1420 3B60     		str	r3, [r7, #0]
 3300              	.L228:
2036:../Sources/ff10b/src/ff.c **** 	dp->sclust = 0;							/* Always start from the root directory */
 3301              		.loc 1 2036 0
 3302 1422 7B68     		ldr	r3, [r7, #4]
 3303 1424 4FF00002 		mov	r2, #0
 3304 1428 9A60     		str	r2, [r3, #8]
2037:../Sources/ff10b/src/ff.c **** #endif
2038:../Sources/ff10b/src/ff.c **** 
2039:../Sources/ff10b/src/ff.c **** 	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 3305              		.loc 1 2039 0
 3306 142a 3B68     		ldr	r3, [r7, #0]
 3307 142c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3308 142e 1F2B     		cmp	r3, #31
 3309 1430 0BD8     		bhi	.L229
2040:../Sources/ff10b/src/ff.c **** 		res = dir_sdi(dp, 0);
 3310              		.loc 1 2040 0
 3311 1432 7868     		ldr	r0, [r7, #4]
 3312 1434 4FF00001 		mov	r1, #0
 3313 1438 FFF7DAFA 		bl	dir_sdi
 3314 143c 0346     		mov	r3, r0
 3315 143e FB73     		strb	r3, [r7, #15]
2041:../Sources/ff10b/src/ff.c **** 		dp->dir = 0;
 3316              		.loc 1 2041 0
 3317 1440 7B68     		ldr	r3, [r7, #4]
 3318 1442 4FF00002 		mov	r2, #0
 3319 1446 5A61     		str	r2, [r3, #20]
 3320 1448 44E0     		b	.L230
 3321              	.L229:
2042:../Sources/ff10b/src/ff.c **** 	} else {								/* Follow path */
2043:../Sources/ff10b/src/ff.c **** 		for (;;) {
2044:../Sources/ff10b/src/ff.c **** 			res = create_name(dp, &path);	/* Get a segment name of the path */
 3322              		.loc 1 2044 0
 3323 144a 3B46     		mov	r3, r7
 3324 144c 7868     		ldr	r0, [r7, #4]
 3325 144e 1946     		mov	r1, r3
 3326 1450 FFF79AFE 		bl	create_name
 3327 1454 0346     		mov	r3, r0
 3328 1456 FB73     		strb	r3, [r7, #15]
2045:../Sources/ff10b/src/ff.c **** 			if (res != FR_OK) break;
 3329              		.loc 1 2045 0
 3330 1458 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3331 145a 002B     		cmp	r3, #0
 3332 145c 35D1     		bne	.L237
 3333              	.L231:
2046:../Sources/ff10b/src/ff.c **** 			res = dir_find(dp);				/* Find an object with the sagment name */
 3334              		.loc 1 2046 0
 3335 145e 7868     		ldr	r0, [r7, #4]
 3336 1460 FFF7ECFC 		bl	dir_find
 3337 1464 0346     		mov	r3, r0
 3338 1466 FB73     		strb	r3, [r7, #15]
2047:../Sources/ff10b/src/ff.c **** 			ns = dp->fn[NS];
 3339              		.loc 1 2047 0
 3340 1468 7B68     		ldr	r3, [r7, #4]
 3341 146a 9B69     		ldr	r3, [r3, #24]
 3342 146c DB7A     		ldrb	r3, [r3, #11]
 3343 146e BB73     		strb	r3, [r7, #14]
2048:../Sources/ff10b/src/ff.c **** 			if (res != FR_OK) {				/* Failed to find the object */
 3344              		.loc 1 2048 0
 3345 1470 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3346 1472 002B     		cmp	r3, #0
 3347 1474 0BD0     		beq	.L232
2049:../Sources/ff10b/src/ff.c **** 				if (res == FR_NO_FILE) {	/* Object is not found */
 3348              		.loc 1 2049 0
 3349 1476 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3350 1478 042B     		cmp	r3, #4
 3351 147a 28D1     		bne	.L238
2050:../Sources/ff10b/src/ff.c **** 					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
2051:../Sources/ff10b/src/ff.c **** 						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
2052:../Sources/ff10b/src/ff.c **** 						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
2053:../Sources/ff10b/src/ff.c **** 						res = FR_OK;					/* Ended at the root directroy. Function completed. */
2054:../Sources/ff10b/src/ff.c **** 					} else {							/* Could not find the object */
2055:../Sources/ff10b/src/ff.c **** 						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 3352              		.loc 1 2055 0
 3353 147c BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 3354 147e 03F00403 		and	r3, r3, #4
 3355 1482 002B     		cmp	r3, #0
 3356 1484 23D1     		bne	.L238
 3357              		.loc 1 2055 0 is_stmt 0 discriminator 1
 3358 1486 4FF00503 		mov	r3, #5
 3359 148a FB73     		strb	r3, [r7, #15]
2056:../Sources/ff10b/src/ff.c **** 					}
2057:../Sources/ff10b/src/ff.c **** 				}
2058:../Sources/ff10b/src/ff.c **** 				break;
 3360              		.loc 1 2058 0 is_stmt 1 discriminator 1
 3361 148c 1FE0     		b	.L238
 3362              	.L232:
2059:../Sources/ff10b/src/ff.c **** 			}
2060:../Sources/ff10b/src/ff.c **** 			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 3363              		.loc 1 2060 0
 3364 148e BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 3365 1490 03F00403 		and	r3, r3, #4
 3366 1494 002B     		cmp	r3, #0
 3367 1496 1CD1     		bne	.L239
 3368              	.L234:
2061:../Sources/ff10b/src/ff.c **** 			dir = dp->dir;						/* Follow the sub-directory */
 3369              		.loc 1 2061 0
 3370 1498 7B68     		ldr	r3, [r7, #4]
 3371 149a 5B69     		ldr	r3, [r3, #20]
 3372 149c BB60     		str	r3, [r7, #8]
2062:../Sources/ff10b/src/ff.c **** 			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 3373              		.loc 1 2062 0
 3374 149e BB68     		ldr	r3, [r7, #8]
 3375 14a0 03F10B03 		add	r3, r3, #11
 3376 14a4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3377 14a6 03F01003 		and	r3, r3, #16
 3378 14aa 002B     		cmp	r3, #0
 3379 14ac 03D1     		bne	.L235
2063:../Sources/ff10b/src/ff.c **** 				res = FR_NO_PATH; break;
 3380              		.loc 1 2063 0
 3381 14ae 4FF00503 		mov	r3, #5
 3382 14b2 FB73     		strb	r3, [r7, #15]
 3383 14b4 0EE0     		b	.L230
 3384              	.L235:
2064:../Sources/ff10b/src/ff.c **** 			}
2065:../Sources/ff10b/src/ff.c **** 			dp->sclust = ld_clust(dp->fs, dir);
 3385              		.loc 1 2065 0
 3386 14b6 7B68     		ldr	r3, [r7, #4]
 3387 14b8 1B68     		ldr	r3, [r3, #0]
 3388 14ba 1846     		mov	r0, r3
 3389 14bc B968     		ldr	r1, [r7, #8]
 3390 14be FFF75DFC 		bl	ld_clust
 3391 14c2 0246     		mov	r2, r0
 3392 14c4 7B68     		ldr	r3, [r7, #4]
 3393 14c6 9A60     		str	r2, [r3, #8]
2066:../Sources/ff10b/src/ff.c **** 		}
 3394              		.loc 1 2066 0
 3395 14c8 BFE7     		b	.L229
 3396              	.L237:
2045:../Sources/ff10b/src/ff.c **** 			if (res != FR_OK) break;
 3397              		.loc 1 2045 0
 3398 14ca 00BF     		nop
 3399 14cc 02E0     		b	.L230
 3400              	.L238:
2058:../Sources/ff10b/src/ff.c **** 				break;
 3401              		.loc 1 2058 0
 3402 14ce 00BF     		nop
 3403 14d0 00E0     		b	.L230
 3404              	.L239:
2060:../Sources/ff10b/src/ff.c **** 			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 3405              		.loc 1 2060 0
 3406 14d2 00BF     		nop
 3407              	.L230:
2067:../Sources/ff10b/src/ff.c **** 	}
2068:../Sources/ff10b/src/ff.c **** 
2069:../Sources/ff10b/src/ff.c **** 	return res;
 3408              		.loc 1 2069 0
 3409 14d4 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
2070:../Sources/ff10b/src/ff.c **** }
 3410              		.loc 1 2070 0
 3411 14d6 1846     		mov	r0, r3
 3412 14d8 07F11007 		add	r7, r7, #16
 3413 14dc BD46     		mov	sp, r7
 3414 14de 80BD     		pop	{r7, pc}
 3415              		.cfi_endproc
 3416              	.LFE24:
 3418              		.align	2
 3419              		.thumb
 3420              		.thumb_func
 3422              	get_ldnumber:
 3423              	.LFB25:
2071:../Sources/ff10b/src/ff.c **** 
2072:../Sources/ff10b/src/ff.c **** 
2073:../Sources/ff10b/src/ff.c **** 
2074:../Sources/ff10b/src/ff.c **** 
2075:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
2076:../Sources/ff10b/src/ff.c **** /* Get logical drive number from path name                               */
2077:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
2078:../Sources/ff10b/src/ff.c **** 
2079:../Sources/ff10b/src/ff.c **** static
2080:../Sources/ff10b/src/ff.c **** int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
2081:../Sources/ff10b/src/ff.c **** 	const TCHAR** path	/* Pointer to pointer to the path name */
2082:../Sources/ff10b/src/ff.c **** )
2083:../Sources/ff10b/src/ff.c **** {
 3424              		.loc 1 2083 0
 3425              		.cfi_startproc
 3426              		@ args = 0, pretend = 0, frame = 24
 3427              		@ frame_needed = 1, uses_anonymous_args = 0
 3428              		@ link register save eliminated.
 3429 14e0 80B4     		push	{r7}
 3430              	.LCFI74:
 3431              		.cfi_def_cfa_offset 4
 3432              		.cfi_offset 7, -4
 3433 14e2 87B0     		sub	sp, sp, #28
 3434              	.LCFI75:
 3435              		.cfi_def_cfa_offset 32
 3436 14e4 00AF     		add	r7, sp, #0
 3437              	.LCFI76:
 3438              		.cfi_def_cfa_register 7
 3439 14e6 7860     		str	r0, [r7, #4]
2084:../Sources/ff10b/src/ff.c **** 	const TCHAR *tp, *tt;
2085:../Sources/ff10b/src/ff.c **** 	UINT i;
2086:../Sources/ff10b/src/ff.c **** 	int vol = -1;
 3440              		.loc 1 2086 0
 3441 14e8 4FF0FF33 		mov	r3, #-1
 3442 14ec 3B61     		str	r3, [r7, #16]
2087:../Sources/ff10b/src/ff.c **** 
2088:../Sources/ff10b/src/ff.c **** 
2089:../Sources/ff10b/src/ff.c **** 	if (*path) {	/* If the pointer is not a null */
 3443              		.loc 1 2089 0
 3444 14ee 7B68     		ldr	r3, [r7, #4]
 3445 14f0 1B68     		ldr	r3, [r3, #0]
 3446 14f2 002B     		cmp	r3, #0
 3447 14f4 37D0     		beq	.L241
2090:../Sources/ff10b/src/ff.c **** 		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the pa
 3448              		.loc 1 2090 0
 3449 14f6 7B68     		ldr	r3, [r7, #4]
 3450 14f8 1B68     		ldr	r3, [r3, #0]
 3451 14fa 7B61     		str	r3, [r7, #20]
 3452 14fc 03E0     		b	.L242
 3453              	.L244:
 3454              		.loc 1 2090 0 is_stmt 0 discriminator 1
 3455 14fe 7B69     		ldr	r3, [r7, #20]
 3456 1500 03F10103 		add	r3, r3, #1
 3457 1504 7B61     		str	r3, [r7, #20]
 3458              	.L242:
 3459 1506 7B69     		ldr	r3, [r7, #20]
 3460 1508 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3461 150a 202B     		cmp	r3, #32
 3462 150c 03D9     		bls	.L243
 3463              		.loc 1 2090 0 discriminator 2
 3464 150e 7B69     		ldr	r3, [r7, #20]
 3465 1510 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3466 1512 3A2B     		cmp	r3, #58
 3467 1514 F3D1     		bne	.L244
 3468              	.L243:
2091:../Sources/ff10b/src/ff.c **** 		if (*tt == ':') {	/* If a ':' is exist in the path name */
 3469              		.loc 1 2091 0 is_stmt 1
 3470 1516 7B69     		ldr	r3, [r7, #20]
 3471 1518 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3472 151a 3A2B     		cmp	r3, #58
 3473 151c 20D1     		bne	.L245
2092:../Sources/ff10b/src/ff.c **** 			tp = *path;
 3474              		.loc 1 2092 0
 3475 151e 7B68     		ldr	r3, [r7, #4]
 3476 1520 1B68     		ldr	r3, [r3, #0]
 3477 1522 FB60     		str	r3, [r7, #12]
2093:../Sources/ff10b/src/ff.c **** 			i = *tp++ - '0'; 
 3478              		.loc 1 2093 0
 3479 1524 FB68     		ldr	r3, [r7, #12]
 3480 1526 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3481 1528 A3F13003 		sub	r3, r3, #48
 3482 152c BB60     		str	r3, [r7, #8]
 3483 152e FB68     		ldr	r3, [r7, #12]
 3484 1530 03F10103 		add	r3, r3, #1
 3485 1534 FB60     		str	r3, [r7, #12]
2094:../Sources/ff10b/src/ff.c **** 			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 3486              		.loc 1 2094 0
 3487 1536 BB68     		ldr	r3, [r7, #8]
 3488 1538 092B     		cmp	r3, #9
 3489 153a 0FD8     		bhi	.L246
 3490              		.loc 1 2094 0 is_stmt 0 discriminator 1
 3491 153c FA68     		ldr	r2, [r7, #12]
 3492 153e 7B69     		ldr	r3, [r7, #20]
 3493 1540 9A42     		cmp	r2, r3
 3494 1542 0BD1     		bne	.L246
2095:../Sources/ff10b/src/ff.c **** 				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 3495              		.loc 1 2095 0 is_stmt 1
 3496 1544 BB68     		ldr	r3, [r7, #8]
 3497 1546 002B     		cmp	r3, #0
 3498 1548 08D1     		bne	.L246
2096:../Sources/ff10b/src/ff.c **** 					vol = (int)i;
 3499              		.loc 1 2096 0
 3500 154a BB68     		ldr	r3, [r7, #8]
 3501 154c 3B61     		str	r3, [r7, #16]
2097:../Sources/ff10b/src/ff.c **** 					*path = ++tt;
 3502              		.loc 1 2097 0
 3503 154e 7B69     		ldr	r3, [r7, #20]
 3504 1550 03F10103 		add	r3, r3, #1
 3505 1554 7B61     		str	r3, [r7, #20]
 3506 1556 7B68     		ldr	r3, [r7, #4]
 3507 1558 7A69     		ldr	r2, [r7, #20]
 3508 155a 1A60     		str	r2, [r3, #0]
 3509              	.L246:
2098:../Sources/ff10b/src/ff.c **** 				}
2099:../Sources/ff10b/src/ff.c **** 			} else {	/* No numeric drive number */
2100:../Sources/ff10b/src/ff.c **** #if _STR_VOLUME_ID		/* Find string drive id */
2101:../Sources/ff10b/src/ff.c **** 				static const char* const str[] = {_VOLUME_STRS};
2102:../Sources/ff10b/src/ff.c **** 				const char *sp;
2103:../Sources/ff10b/src/ff.c **** 				char c;
2104:../Sources/ff10b/src/ff.c **** 				TCHAR tc;
2105:../Sources/ff10b/src/ff.c **** 
2106:../Sources/ff10b/src/ff.c **** 				i = 0; tt++;
2107:../Sources/ff10b/src/ff.c **** 				do {
2108:../Sources/ff10b/src/ff.c **** 					sp = str[i]; tp = *path;
2109:../Sources/ff10b/src/ff.c **** 					do {	/* Compare a string drive id with path name */
2110:../Sources/ff10b/src/ff.c **** 						c = *sp++; tc = *tp++;
2111:../Sources/ff10b/src/ff.c **** 						if (IsLower(tc)) tc -= 0x20;
2112:../Sources/ff10b/src/ff.c **** 					} while (c && (TCHAR)c == tc);
2113:../Sources/ff10b/src/ff.c **** 				} while ((c || tp != tt) && ++i < _VOLUMES);	/* Repeat for each id until pattern match */
2114:../Sources/ff10b/src/ff.c **** 				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
2115:../Sources/ff10b/src/ff.c **** 					vol = (int)i;
2116:../Sources/ff10b/src/ff.c **** 					*path = tt;
2117:../Sources/ff10b/src/ff.c **** 				}
2118:../Sources/ff10b/src/ff.c **** #endif
2119:../Sources/ff10b/src/ff.c **** 			}
2120:../Sources/ff10b/src/ff.c **** 			return vol;
 3510              		.loc 1 2120 0
 3511 155c 3B69     		ldr	r3, [r7, #16]
 3512 155e 03E0     		b	.L247
 3513              	.L245:
2121:../Sources/ff10b/src/ff.c **** 		}
2122:../Sources/ff10b/src/ff.c **** #if _FS_RPATH && _VOLUMES >= 2
2123:../Sources/ff10b/src/ff.c **** 		vol = CurrVol;	/* Current drive */
2124:../Sources/ff10b/src/ff.c **** #else
2125:../Sources/ff10b/src/ff.c **** 		vol = 0;		/* Drive 0 */
 3514              		.loc 1 2125 0
 3515 1560 4FF00003 		mov	r3, #0
 3516 1564 3B61     		str	r3, [r7, #16]
 3517              	.L241:
2126:../Sources/ff10b/src/ff.c **** #endif
2127:../Sources/ff10b/src/ff.c **** 	}
2128:../Sources/ff10b/src/ff.c **** 	return vol;
 3518              		.loc 1 2128 0
 3519 1566 3B69     		ldr	r3, [r7, #16]
 3520              	.L247:
2129:../Sources/ff10b/src/ff.c **** }
 3521              		.loc 1 2129 0
 3522 1568 1846     		mov	r0, r3
 3523 156a 07F11C07 		add	r7, r7, #28
 3524 156e BD46     		mov	sp, r7
 3525 1570 80BC     		pop	{r7}
 3526 1572 7047     		bx	lr
 3527              		.cfi_endproc
 3528              	.LFE25:
 3530              		.align	2
 3531              		.thumb
 3532              		.thumb_func
 3534              	check_fs:
 3535              	.LFB26:
2130:../Sources/ff10b/src/ff.c **** 
2131:../Sources/ff10b/src/ff.c **** 
2132:../Sources/ff10b/src/ff.c **** 
2133:../Sources/ff10b/src/ff.c **** 
2134:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
2135:../Sources/ff10b/src/ff.c **** /* Load a sector and check if it is an FAT boot sector                   */
2136:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
2137:../Sources/ff10b/src/ff.c **** 
2138:../Sources/ff10b/src/ff.c **** static
2139:../Sources/ff10b/src/ff.c **** BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk 
2140:../Sources/ff10b/src/ff.c **** 	FATFS* fs,	/* File system object */
2141:../Sources/ff10b/src/ff.c **** 	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
2142:../Sources/ff10b/src/ff.c **** )
2143:../Sources/ff10b/src/ff.c **** {
 3536              		.loc 1 2143 0
 3537              		.cfi_startproc
 3538              		@ args = 0, pretend = 0, frame = 8
 3539              		@ frame_needed = 1, uses_anonymous_args = 0
 3540 1574 80B5     		push	{r7, lr}
 3541              	.LCFI77:
 3542              		.cfi_def_cfa_offset 8
 3543              		.cfi_offset 7, -8
 3544              		.cfi_offset 14, -4
 3545 1576 82B0     		sub	sp, sp, #8
 3546              	.LCFI78:
 3547              		.cfi_def_cfa_offset 16
 3548 1578 00AF     		add	r7, sp, #0
 3549              	.LCFI79:
 3550              		.cfi_def_cfa_register 7
 3551 157a 7860     		str	r0, [r7, #4]
 3552 157c 3960     		str	r1, [r7, #0]
2144:../Sources/ff10b/src/ff.c **** 	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 3553              		.loc 1 2144 0
 3554 157e 7B68     		ldr	r3, [r7, #4]
 3555 1580 4FF00002 		mov	r2, #0
 3556 1584 1A71     		strb	r2, [r3, #4]
 3557 1586 7B68     		ldr	r3, [r7, #4]
 3558 1588 4FF0FF32 		mov	r2, #-1
 3559 158c DA62     		str	r2, [r3, #44]
2145:../Sources/ff10b/src/ff.c **** 	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 3560              		.loc 1 2145 0
 3561 158e 7868     		ldr	r0, [r7, #4]
 3562 1590 3968     		ldr	r1, [r7, #0]
 3563 1592 FEF71FFE 		bl	move_window
 3564 1596 0346     		mov	r3, r0
 3565 1598 002B     		cmp	r3, #0
 3566 159a 02D0     		beq	.L249
2146:../Sources/ff10b/src/ff.c **** 		return 3;
 3567              		.loc 1 2146 0
 3568 159c 4FF00303 		mov	r3, #3
 3569 15a0 56E0     		b	.L250
 3570              	.L249:
2147:../Sources/ff10b/src/ff.c **** 
2148:../Sources/ff10b/src/ff.c **** 	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 
 3571              		.loc 1 2148 0
 3572 15a2 7B68     		ldr	r3, [r7, #4]
 3573 15a4 93F82F32 		ldrb	r3, [r3, #559]	@ zero_extendqisi2
 3574 15a8 4FEA0323 		lsl	r3, r3, #8
 3575 15ac 9AB2     		uxth	r2, r3
 3576 15ae 7B68     		ldr	r3, [r7, #4]
 3577 15b0 93F82E32 		ldrb	r3, [r3, #558]	@ zero_extendqisi2
 3578 15b4 1343     		orrs	r3, r3, r2
 3579 15b6 9BB2     		uxth	r3, r3
 3580 15b8 1AB2     		sxth	r2, r3
 3581 15ba 4AF65523 		movw	r3, #43605
 3582 15be CFF6FF73 		movt	r3, 65535
 3583 15c2 9A42     		cmp	r2, r3
 3584 15c4 02D0     		beq	.L251
2149:../Sources/ff10b/src/ff.c **** 		return 2;
 3585              		.loc 1 2149 0
 3586 15c6 4FF00203 		mov	r3, #2
 3587 15ca 41E0     		b	.L250
 3588              	.L251:
2150:../Sources/ff10b/src/ff.c **** 
2151:../Sources/ff10b/src/ff.c **** 	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 3589              		.loc 1 2151 0
 3590 15cc 7B68     		ldr	r3, [r7, #4]
 3591 15ce 93F86930 		ldrb	r3, [r3, #105]	@ zero_extendqisi2
 3592 15d2 4FEA0362 		lsl	r2, r3, #24
 3593 15d6 7B68     		ldr	r3, [r7, #4]
 3594 15d8 93F86830 		ldrb	r3, [r3, #104]	@ zero_extendqisi2
 3595 15dc 4FEA0343 		lsl	r3, r3, #16
 3596 15e0 1A43     		orrs	r2, r2, r3
 3597 15e2 7B68     		ldr	r3, [r7, #4]
 3598 15e4 93F86730 		ldrb	r3, [r3, #103]	@ zero_extendqisi2
 3599 15e8 4FEA0323 		lsl	r3, r3, #8
 3600 15ec 1A43     		orrs	r2, r2, r3
 3601 15ee 7B68     		ldr	r3, [r7, #4]
 3602 15f0 93F86630 		ldrb	r3, [r3, #102]	@ zero_extendqisi2
 3603 15f4 1343     		orrs	r3, r3, r2
 3604 15f6 23F07F42 		bic	r2, r3, #-16777216
 3605 15fa 44F24613 		movw	r3, #16710
 3606 15fe C0F25403 		movt	r3, 84
 3607 1602 9A42     		cmp	r2, r3
 3608 1604 02D1     		bne	.L252
2152:../Sources/ff10b/src/ff.c **** 		return 0;
 3609              		.loc 1 2152 0
 3610 1606 4FF00003 		mov	r3, #0
 3611 160a 21E0     		b	.L250
 3612              	.L252:
2153:../Sources/ff10b/src/ff.c **** 	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 3613              		.loc 1 2153 0
 3614 160c 7B68     		ldr	r3, [r7, #4]
 3615 160e 93F88530 		ldrb	r3, [r3, #133]	@ zero_extendqisi2
 3616 1612 4FEA0362 		lsl	r2, r3, #24
 3617 1616 7B68     		ldr	r3, [r7, #4]
 3618 1618 93F88430 		ldrb	r3, [r3, #132]	@ zero_extendqisi2
 3619 161c 4FEA0343 		lsl	r3, r3, #16
 3620 1620 1A43     		orrs	r2, r2, r3
 3621 1622 7B68     		ldr	r3, [r7, #4]
 3622 1624 93F88330 		ldrb	r3, [r3, #131]	@ zero_extendqisi2
 3623 1628 4FEA0323 		lsl	r3, r3, #8
 3624 162c 1A43     		orrs	r2, r2, r3
 3625 162e 7B68     		ldr	r3, [r7, #4]
 3626 1630 93F88230 		ldrb	r3, [r3, #130]	@ zero_extendqisi2
 3627 1634 1343     		orrs	r3, r3, r2
 3628 1636 23F07F42 		bic	r2, r3, #-16777216
 3629 163a 44F24613 		movw	r3, #16710
 3630 163e C0F25403 		movt	r3, 84
 3631 1642 9A42     		cmp	r2, r3
 3632 1644 02D1     		bne	.L253
2154:../Sources/ff10b/src/ff.c **** 		return 0;
 3633              		.loc 1 2154 0
 3634 1646 4FF00003 		mov	r3, #0
 3635 164a 01E0     		b	.L250
 3636              	.L253:
2155:../Sources/ff10b/src/ff.c **** 
2156:../Sources/ff10b/src/ff.c **** 	return 1;
 3637              		.loc 1 2156 0
 3638 164c 4FF00103 		mov	r3, #1
 3639              	.L250:
2157:../Sources/ff10b/src/ff.c **** }
 3640              		.loc 1 2157 0
 3641 1650 1846     		mov	r0, r3
 3642 1652 07F10807 		add	r7, r7, #8
 3643 1656 BD46     		mov	sp, r7
 3644 1658 80BD     		pop	{r7, pc}
 3645              		.cfi_endproc
 3646              	.LFE26:
 3648 165a 00BF     		.align	2
 3649              		.thumb
 3650              		.thumb_func
 3652              	find_volume:
 3653              	.LFB27:
2158:../Sources/ff10b/src/ff.c **** 
2159:../Sources/ff10b/src/ff.c **** 
2160:../Sources/ff10b/src/ff.c **** 
2161:../Sources/ff10b/src/ff.c **** 
2162:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
2163:../Sources/ff10b/src/ff.c **** /* Find logical drive and check if the volume is mounted                 */
2164:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
2165:../Sources/ff10b/src/ff.c **** 
2166:../Sources/ff10b/src/ff.c **** static
2167:../Sources/ff10b/src/ff.c **** FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
2168:../Sources/ff10b/src/ff.c **** 	FATFS** rfs,		/* Pointer to pointer to the found file system object */
2169:../Sources/ff10b/src/ff.c **** 	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
2170:../Sources/ff10b/src/ff.c **** 	BYTE wmode			/* !=0: Check write protection for write access */
2171:../Sources/ff10b/src/ff.c **** )
2172:../Sources/ff10b/src/ff.c **** {
 3654              		.loc 1 2172 0
 3655              		.cfi_startproc
 3656              		@ args = 0, pretend = 0, frame = 88
 3657              		@ frame_needed = 1, uses_anonymous_args = 0
 3658 165c 80B5     		push	{r7, lr}
 3659              	.LCFI80:
 3660              		.cfi_def_cfa_offset 8
 3661              		.cfi_offset 7, -8
 3662              		.cfi_offset 14, -4
 3663 165e 96B0     		sub	sp, sp, #88
 3664              	.LCFI81:
 3665              		.cfi_def_cfa_offset 96
 3666 1660 00AF     		add	r7, sp, #0
 3667              	.LCFI82:
 3668              		.cfi_def_cfa_register 7
 3669 1662 F860     		str	r0, [r7, #12]
 3670 1664 B960     		str	r1, [r7, #8]
 3671 1666 1346     		mov	r3, r2
 3672 1668 FB71     		strb	r3, [r7, #7]
2173:../Sources/ff10b/src/ff.c **** 	BYTE fmt;
2174:../Sources/ff10b/src/ff.c **** 	int vol;
2175:../Sources/ff10b/src/ff.c **** 	DSTATUS stat;
2176:../Sources/ff10b/src/ff.c **** 	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
2177:../Sources/ff10b/src/ff.c **** 	WORD nrsv;
2178:../Sources/ff10b/src/ff.c **** 	FATFS *fs;
2179:../Sources/ff10b/src/ff.c **** 
2180:../Sources/ff10b/src/ff.c **** 
2181:../Sources/ff10b/src/ff.c **** 	/* Get logical drive number from the path name */
2182:../Sources/ff10b/src/ff.c **** 	*rfs = 0;
 3673              		.loc 1 2182 0
 3674 166a FB68     		ldr	r3, [r7, #12]
 3675 166c 4FF00002 		mov	r2, #0
 3676 1670 1A60     		str	r2, [r3, #0]
2183:../Sources/ff10b/src/ff.c **** 	vol = get_ldnumber(path);
 3677              		.loc 1 2183 0
 3678 1672 B868     		ldr	r0, [r7, #8]
 3679 1674 FFF734FF 		bl	get_ldnumber
 3680 1678 F863     		str	r0, [r7, #60]
2184:../Sources/ff10b/src/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
 3681              		.loc 1 2184 0
 3682 167a FB6B     		ldr	r3, [r7, #60]
 3683 167c 002B     		cmp	r3, #0
 3684 167e 02DA     		bge	.L255
 3685              		.loc 1 2184 0 is_stmt 0 discriminator 1
 3686 1680 4FF00B03 		mov	r3, #11
 3687 1684 F1E2     		b	.L256
 3688              	.L255:
2185:../Sources/ff10b/src/ff.c **** 
2186:../Sources/ff10b/src/ff.c **** 	/* Check if the file system object is valid or not */
2187:../Sources/ff10b/src/ff.c **** 	fs = FatFs[vol];					/* Get pointer to the file system object */
 3689              		.loc 1 2187 0 is_stmt 1
 3690 1686 40F20003 		movw	r3, #:lower16:FatFs
 3691 168a C0F20003 		movt	r3, #:upper16:FatFs
 3692 168e FA6B     		ldr	r2, [r7, #60]
 3693 1690 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3694 1694 BB63     		str	r3, [r7, #56]
2188:../Sources/ff10b/src/ff.c **** 	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 3695              		.loc 1 2188 0
 3696 1696 BB6B     		ldr	r3, [r7, #56]
 3697 1698 002B     		cmp	r3, #0
 3698 169a 02D1     		bne	.L257
 3699              		.loc 1 2188 0 is_stmt 0 discriminator 1
 3700 169c 4FF00C03 		mov	r3, #12
 3701 16a0 E3E2     		b	.L256
 3702              	.L257:
2189:../Sources/ff10b/src/ff.c **** 
2190:../Sources/ff10b/src/ff.c **** 	ENTER_FF(fs);						/* Lock the volume */
2191:../Sources/ff10b/src/ff.c **** 	*rfs = fs;							/* Return pointer to the file system object */
 3703              		.loc 1 2191 0 is_stmt 1
 3704 16a2 FB68     		ldr	r3, [r7, #12]
 3705 16a4 BA6B     		ldr	r2, [r7, #56]
 3706 16a6 1A60     		str	r2, [r3, #0]
2192:../Sources/ff10b/src/ff.c **** 
2193:../Sources/ff10b/src/ff.c **** 	if (fs->fs_type) {					/* If the volume has been mounted */
 3707              		.loc 1 2193 0
 3708 16a8 BB6B     		ldr	r3, [r7, #56]
 3709 16aa 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3710 16ac 002B     		cmp	r3, #0
 3711 16ae 1CD0     		beq	.L258
2194:../Sources/ff10b/src/ff.c **** 		stat = disk_status(fs->drv);
 3712              		.loc 1 2194 0
 3713 16b0 BB6B     		ldr	r3, [r7, #56]
 3714 16b2 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3715 16b4 1846     		mov	r0, r3
 3716 16b6 FFF7FEFF 		bl	disk_status
 3717 16ba 0346     		mov	r3, r0
 3718 16bc 87F83730 		strb	r3, [r7, #55]
2195:../Sources/ff10b/src/ff.c **** 		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 3719              		.loc 1 2195 0
 3720 16c0 97F83730 		ldrb	r3, [r7, #55]	@ zero_extendqisi2
 3721 16c4 03F00103 		and	r3, r3, #1
 3722 16c8 002B     		cmp	r3, #0
 3723 16ca 0ED1     		bne	.L258
2196:../Sources/ff10b/src/ff.c **** 			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 3724              		.loc 1 2196 0
 3725 16cc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3726 16ce 002B     		cmp	r3, #0
 3727 16d0 08D0     		beq	.L259
 3728              		.loc 1 2196 0 is_stmt 0 discriminator 1
 3729 16d2 97F83730 		ldrb	r3, [r7, #55]	@ zero_extendqisi2
 3730 16d6 03F00403 		and	r3, r3, #4
 3731 16da 002B     		cmp	r3, #0
 3732 16dc 02D0     		beq	.L259
2197:../Sources/ff10b/src/ff.c **** 				return FR_WRITE_PROTECTED;
 3733              		.loc 1 2197 0 is_stmt 1
 3734 16de 4FF00A03 		mov	r3, #10
 3735 16e2 C2E2     		b	.L256
 3736              	.L259:
2198:../Sources/ff10b/src/ff.c **** 			return FR_OK;				/* The file system object is valid */
 3737              		.loc 1 2198 0
 3738 16e4 4FF00003 		mov	r3, #0
 3739 16e8 BFE2     		b	.L256
 3740              	.L258:
2199:../Sources/ff10b/src/ff.c **** 		}
2200:../Sources/ff10b/src/ff.c **** 	}
2201:../Sources/ff10b/src/ff.c **** 
2202:../Sources/ff10b/src/ff.c **** 	/* The file system object is not valid. */
2203:../Sources/ff10b/src/ff.c **** 	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */
2204:../Sources/ff10b/src/ff.c **** 
2205:../Sources/ff10b/src/ff.c **** 	fs->fs_type = 0;					/* Clear the file system object */
 3741              		.loc 1 2205 0
 3742 16ea BB6B     		ldr	r3, [r7, #56]
 3743 16ec 4FF00002 		mov	r2, #0
 3744 16f0 1A70     		strb	r2, [r3, #0]
2206:../Sources/ff10b/src/ff.c **** 	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 3745              		.loc 1 2206 0
 3746 16f2 FB6B     		ldr	r3, [r7, #60]
 3747 16f4 DAB2     		uxtb	r2, r3
 3748 16f6 BB6B     		ldr	r3, [r7, #56]
 3749 16f8 5A70     		strb	r2, [r3, #1]
2207:../Sources/ff10b/src/ff.c **** 	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 3750              		.loc 1 2207 0
 3751 16fa BB6B     		ldr	r3, [r7, #56]
 3752 16fc 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3753 16fe 1846     		mov	r0, r3
 3754 1700 FFF7FEFF 		bl	disk_initialize
 3755 1704 0346     		mov	r3, r0
 3756 1706 87F83730 		strb	r3, [r7, #55]
2208:../Sources/ff10b/src/ff.c **** 	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 3757              		.loc 1 2208 0
 3758 170a 97F83730 		ldrb	r3, [r7, #55]	@ zero_extendqisi2
 3759 170e 03F00103 		and	r3, r3, #1
 3760 1712 002B     		cmp	r3, #0
 3761 1714 02D0     		beq	.L260
2209:../Sources/ff10b/src/ff.c **** 		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 3762              		.loc 1 2209 0
 3763 1716 4FF00303 		mov	r3, #3
 3764 171a A6E2     		b	.L256
 3765              	.L260:
2210:../Sources/ff10b/src/ff.c **** 	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 3766              		.loc 1 2210 0
 3767 171c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3768 171e 002B     		cmp	r3, #0
 3769 1720 08D0     		beq	.L261
 3770              		.loc 1 2210 0 is_stmt 0 discriminator 1
 3771 1722 97F83730 		ldrb	r3, [r7, #55]	@ zero_extendqisi2
 3772 1726 03F00403 		and	r3, r3, #4
 3773 172a 002B     		cmp	r3, #0
 3774 172c 02D0     		beq	.L261
2211:../Sources/ff10b/src/ff.c **** 		return FR_WRITE_PROTECTED;
 3775              		.loc 1 2211 0 is_stmt 1
 3776 172e 4FF00A03 		mov	r3, #10
 3777 1732 9AE2     		b	.L256
 3778              	.L261:
2212:../Sources/ff10b/src/ff.c **** #if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
2213:../Sources/ff10b/src/ff.c **** 	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
2214:../Sources/ff10b/src/ff.c **** 		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
2215:../Sources/ff10b/src/ff.c **** #endif
2216:../Sources/ff10b/src/ff.c **** 	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
2217:../Sources/ff10b/src/ff.c **** 	bsect = 0;
 3779              		.loc 1 2217 0
 3780 1734 4FF00003 		mov	r3, #0
 3781 1738 3B65     		str	r3, [r7, #80]
2218:../Sources/ff10b/src/ff.c **** 	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 3782              		.loc 1 2218 0
 3783 173a B86B     		ldr	r0, [r7, #56]
 3784 173c 396D     		ldr	r1, [r7, #80]
 3785 173e FFF719FF 		bl	check_fs
 3786 1742 0346     		mov	r3, r0
 3787 1744 87F85730 		strb	r3, [r7, #87]
2219:../Sources/ff10b/src/ff.c **** 	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 3788              		.loc 1 2219 0
 3789 1748 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 3790 174c 012B     		cmp	r3, #1
 3791 174e 69D1     		bne	.L262
 3792              	.LBB4:
2220:../Sources/ff10b/src/ff.c **** 		UINT i;
2221:../Sources/ff10b/src/ff.c **** 		DWORD br[4];
2222:../Sources/ff10b/src/ff.c **** 
2223:../Sources/ff10b/src/ff.c **** 		for (i = 0; i < 4; i++) {			/* Get partition offset */
 3793              		.loc 1 2223 0
 3794 1750 4FF00003 		mov	r3, #0
 3795 1754 3B64     		str	r3, [r7, #64]
 3796 1756 37E0     		b	.L263
 3797              	.L266:
 3798              	.LBB5:
2224:../Sources/ff10b/src/ff.c **** 			BYTE *pt = fs->win+MBR_Table + i * SZ_PTE;
 3799              		.loc 1 2224 0
 3800 1758 3B6C     		ldr	r3, [r7, #64]
 3801 175a 4FEA0313 		lsl	r3, r3, #4
 3802 175e 03F5DF73 		add	r3, r3, #446
 3803 1762 03F13003 		add	r3, r3, #48
 3804 1766 BA6B     		ldr	r2, [r7, #56]
 3805 1768 D318     		adds	r3, r2, r3
 3806 176a 3B63     		str	r3, [r7, #48]
2225:../Sources/ff10b/src/ff.c **** 			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 3807              		.loc 1 2225 0
 3808 176c 3B6B     		ldr	r3, [r7, #48]
 3809 176e 03F10403 		add	r3, r3, #4
 3810 1772 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3811 1774 002B     		cmp	r3, #0
 3812 1776 19D0     		beq	.L264
 3813              		.loc 1 2225 0 is_stmt 0 discriminator 1
 3814 1778 3B6B     		ldr	r3, [r7, #48]
 3815 177a 03F10B03 		add	r3, r3, #11
 3816 177e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3817 1780 4FEA0362 		lsl	r2, r3, #24
 3818 1784 3B6B     		ldr	r3, [r7, #48]
 3819 1786 03F10A03 		add	r3, r3, #10
 3820 178a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3821 178c 4FEA0343 		lsl	r3, r3, #16
 3822 1790 1A43     		orrs	r2, r2, r3
 3823 1792 3B6B     		ldr	r3, [r7, #48]
 3824 1794 03F10903 		add	r3, r3, #9
 3825 1798 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3826 179a 4FEA0323 		lsl	r3, r3, #8
 3827 179e 1A43     		orrs	r2, r2, r3
 3828 17a0 3B6B     		ldr	r3, [r7, #48]
 3829 17a2 03F10803 		add	r3, r3, #8
 3830 17a6 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3831 17a8 1A43     		orrs	r2, r2, r3
 3832 17aa 01E0     		b	.L265
 3833              	.L264:
 3834              		.loc 1 2225 0 discriminator 2
 3835 17ac 4FF00002 		mov	r2, #0
 3836              	.L265:
 3837              		.loc 1 2225 0 discriminator 3
 3838 17b0 3B6C     		ldr	r3, [r7, #64]
 3839 17b2 4FEA8303 		lsl	r3, r3, #2
 3840 17b6 07F15801 		add	r1, r7, #88
 3841 17ba CB18     		adds	r3, r1, r3
 3842 17bc 43F8442C 		str	r2, [r3, #-68]
 3843              	.LBE5:
2223:../Sources/ff10b/src/ff.c **** 		for (i = 0; i < 4; i++) {			/* Get partition offset */
 3844              		.loc 1 2223 0 is_stmt 1 discriminator 3
 3845 17c0 3B6C     		ldr	r3, [r7, #64]
 3846 17c2 03F10103 		add	r3, r3, #1
 3847 17c6 3B64     		str	r3, [r7, #64]
 3848              	.L263:
2223:../Sources/ff10b/src/ff.c **** 		for (i = 0; i < 4; i++) {			/* Get partition offset */
 3849              		.loc 1 2223 0 is_stmt 0 discriminator 1
 3850 17c8 3B6C     		ldr	r3, [r7, #64]
 3851 17ca 032B     		cmp	r3, #3
 3852 17cc C4D9     		bls	.L266
2226:../Sources/ff10b/src/ff.c **** 		}
2227:../Sources/ff10b/src/ff.c **** 		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 3853              		.loc 1 2227 0 is_stmt 1
 3854 17ce 4FF00003 		mov	r3, #0
 3855 17d2 3B64     		str	r3, [r7, #64]
2228:../Sources/ff10b/src/ff.c **** 		if (i) i--;
 3856              		.loc 1 2228 0
 3857 17d4 3B6C     		ldr	r3, [r7, #64]
 3858 17d6 002B     		cmp	r3, #0
 3859 17d8 03D0     		beq	.L267
 3860              		.loc 1 2228 0 is_stmt 0 discriminator 1
 3861 17da 3B6C     		ldr	r3, [r7, #64]
 3862 17dc 03F1FF33 		add	r3, r3, #-1
 3863 17e0 3B64     		str	r3, [r7, #64]
 3864              	.L267:
2229:../Sources/ff10b/src/ff.c **** 		do {								/* Find an FAT volume */
2230:../Sources/ff10b/src/ff.c **** 			bsect = br[i];
 3865              		.loc 1 2230 0 is_stmt 1
 3866 17e2 3B6C     		ldr	r3, [r7, #64]
 3867 17e4 4FEA8303 		lsl	r3, r3, #2
 3868 17e8 07F15802 		add	r2, r7, #88
 3869 17ec D318     		adds	r3, r2, r3
 3870 17ee 53F8443C 		ldr	r3, [r3, #-68]
 3871 17f2 3B65     		str	r3, [r7, #80]
2231:../Sources/ff10b/src/ff.c **** 			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 3872              		.loc 1 2231 0
 3873 17f4 3B6D     		ldr	r3, [r7, #80]
 3874 17f6 002B     		cmp	r3, #0
 3875 17f8 05D0     		beq	.L268
 3876              		.loc 1 2231 0 is_stmt 0 discriminator 1
 3877 17fa B86B     		ldr	r0, [r7, #56]
 3878 17fc 396D     		ldr	r1, [r7, #80]
 3879 17fe FFF7B9FE 		bl	check_fs
 3880 1802 0346     		mov	r3, r0
 3881 1804 01E0     		b	.L269
 3882              	.L268:
 3883              		.loc 1 2231 0 discriminator 2
 3884 1806 4FF00203 		mov	r3, #2
 3885              	.L269:
 3886              		.loc 1 2231 0 discriminator 3
 3887 180a 87F85730 		strb	r3, [r7, #87]
2232:../Sources/ff10b/src/ff.c **** 		} while (!LD2PT(vol) && fmt && ++i < 4);
 3888              		.loc 1 2232 0 is_stmt 1 discriminator 3
 3889 180e 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 3890 1812 002B     		cmp	r3, #0
 3891 1814 06D0     		beq	.L262
 3892              		.loc 1 2232 0 is_stmt 0 discriminator 1
 3893 1816 3B6C     		ldr	r3, [r7, #64]
 3894 1818 03F10103 		add	r3, r3, #1
 3895 181c 3B64     		str	r3, [r7, #64]
 3896 181e 3B6C     		ldr	r3, [r7, #64]
 3897 1820 032B     		cmp	r3, #3
 3898 1822 DED9     		bls	.L267
 3899              	.L262:
 3900              	.LBE4:
2233:../Sources/ff10b/src/ff.c **** 	}
2234:../Sources/ff10b/src/ff.c **** 	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 3901              		.loc 1 2234 0 is_stmt 1
 3902 1824 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 3903 1828 032B     		cmp	r3, #3
 3904 182a 02D1     		bne	.L271
 3905              		.loc 1 2234 0 is_stmt 0 discriminator 1
 3906 182c 4FF00103 		mov	r3, #1
 3907 1830 1BE2     		b	.L256
 3908              	.L271:
2235:../Sources/ff10b/src/ff.c **** 	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 3909              		.loc 1 2235 0 is_stmt 1
 3910 1832 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 3911 1836 002B     		cmp	r3, #0
 3912 1838 02D0     		beq	.L272
 3913              		.loc 1 2235 0 is_stmt 0 discriminator 1
 3914 183a 4FF00D03 		mov	r3, #13
 3915 183e 14E2     		b	.L256
 3916              	.L272:
2236:../Sources/ff10b/src/ff.c **** 
2237:../Sources/ff10b/src/ff.c **** 	/* An FAT volume is found. Following code initializes the file system object */
2238:../Sources/ff10b/src/ff.c **** 
2239:../Sources/ff10b/src/ff.c **** 	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical s
 3917              		.loc 1 2239 0 is_stmt 1
 3918 1840 BB6B     		ldr	r3, [r7, #56]
 3919 1842 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 3920 1846 4FEA0323 		lsl	r3, r3, #8
 3921 184a 9AB2     		uxth	r2, r3
 3922 184c BB6B     		ldr	r3, [r7, #56]
 3923 184e 93F83B30 		ldrb	r3, [r3, #59]	@ zero_extendqisi2
 3924 1852 1343     		orrs	r3, r3, r2
 3925 1854 9BB2     		uxth	r3, r3
 3926 1856 1BB2     		sxth	r3, r3
 3927 1858 B3F5007F 		cmp	r3, #512
 3928 185c 02D0     		beq	.L273
2240:../Sources/ff10b/src/ff.c **** 		return FR_NO_FILESYSTEM;
 3929              		.loc 1 2240 0
 3930 185e 4FF00D03 		mov	r3, #13
 3931 1862 02E2     		b	.L256
 3932              	.L273:
2241:../Sources/ff10b/src/ff.c **** 
2242:../Sources/ff10b/src/ff.c **** 	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
 3933              		.loc 1 2242 0
 3934 1864 BB6B     		ldr	r3, [r7, #56]
 3935 1866 93F84730 		ldrb	r3, [r3, #71]	@ zero_extendqisi2
 3936 186a 4FEA0323 		lsl	r3, r3, #8
 3937 186e 9AB2     		uxth	r2, r3
 3938 1870 BB6B     		ldr	r3, [r7, #56]
 3939 1872 93F84630 		ldrb	r3, [r3, #70]	@ zero_extendqisi2
 3940 1876 1343     		orrs	r3, r3, r2
 3941 1878 9BB2     		uxth	r3, r3
 3942 187a 9BB2     		uxth	r3, r3
 3943 187c FB64     		str	r3, [r7, #76]
2243:../Sources/ff10b/src/ff.c **** 	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
 3944              		.loc 1 2243 0
 3945 187e FB6C     		ldr	r3, [r7, #76]
 3946 1880 002B     		cmp	r3, #0
 3947 1882 15D1     		bne	.L274
 3948              		.loc 1 2243 0 is_stmt 0 discriminator 1
 3949 1884 BB6B     		ldr	r3, [r7, #56]
 3950 1886 93F85730 		ldrb	r3, [r3, #87]	@ zero_extendqisi2
 3951 188a 4FEA0362 		lsl	r2, r3, #24
 3952 188e BB6B     		ldr	r3, [r7, #56]
 3953 1890 93F85630 		ldrb	r3, [r3, #86]	@ zero_extendqisi2
 3954 1894 4FEA0343 		lsl	r3, r3, #16
 3955 1898 1A43     		orrs	r2, r2, r3
 3956 189a BB6B     		ldr	r3, [r7, #56]
 3957 189c 93F85530 		ldrb	r3, [r3, #85]	@ zero_extendqisi2
 3958 18a0 4FEA0323 		lsl	r3, r3, #8
 3959 18a4 1A43     		orrs	r2, r2, r3
 3960 18a6 BB6B     		ldr	r3, [r7, #56]
 3961 18a8 93F85430 		ldrb	r3, [r3, #84]	@ zero_extendqisi2
 3962 18ac 1343     		orrs	r3, r3, r2
 3963 18ae FB64     		str	r3, [r7, #76]
 3964              	.L274:
2244:../Sources/ff10b/src/ff.c **** 	fs->fsize = fasize;
 3965              		.loc 1 2244 0 is_stmt 1
 3966 18b0 BB6B     		ldr	r3, [r7, #56]
 3967 18b2 FA6C     		ldr	r2, [r7, #76]
 3968 18b4 9A61     		str	r2, [r3, #24]
2245:../Sources/ff10b/src/ff.c **** 
2246:../Sources/ff10b/src/ff.c **** 	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
 3969              		.loc 1 2246 0
 3970 18b6 BB6B     		ldr	r3, [r7, #56]
 3971 18b8 93F84020 		ldrb	r2, [r3, #64]	@ zero_extendqisi2
 3972 18bc BB6B     		ldr	r3, [r7, #56]
 3973 18be DA70     		strb	r2, [r3, #3]
2247:../Sources/ff10b/src/ff.c **** 	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 3974              		.loc 1 2247 0
 3975 18c0 BB6B     		ldr	r3, [r7, #56]
 3976 18c2 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 3977 18c4 012B     		cmp	r3, #1
 3978 18c6 06D0     		beq	.L275
 3979              		.loc 1 2247 0 is_stmt 0 discriminator 1
 3980 18c8 BB6B     		ldr	r3, [r7, #56]
 3981 18ca DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 3982 18cc 022B     		cmp	r3, #2
 3983 18ce 02D0     		beq	.L275
2248:../Sources/ff10b/src/ff.c **** 		return FR_NO_FILESYSTEM;
 3984              		.loc 1 2248 0 is_stmt 1
 3985 18d0 4FF00D03 		mov	r3, #13
 3986 18d4 C9E1     		b	.L256
 3987              	.L275:
2249:../Sources/ff10b/src/ff.c **** 	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 3988              		.loc 1 2249 0
 3989 18d6 BB6B     		ldr	r3, [r7, #56]
 3990 18d8 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 3991 18da 1A46     		mov	r2, r3
 3992 18dc FB6C     		ldr	r3, [r7, #76]
 3993 18de 02FB03F3 		mul	r3, r2, r3
 3994 18e2 FB64     		str	r3, [r7, #76]
2250:../Sources/ff10b/src/ff.c **** 
2251:../Sources/ff10b/src/ff.c **** 	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
 3995              		.loc 1 2251 0
 3996 18e4 BB6B     		ldr	r3, [r7, #56]
 3997 18e6 93F83D20 		ldrb	r2, [r3, #61]	@ zero_extendqisi2
 3998 18ea BB6B     		ldr	r3, [r7, #56]
 3999 18ec 9A70     		strb	r2, [r3, #2]
2252:../Sources/ff10b/src/ff.c **** 	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 4000              		.loc 1 2252 0
 4001 18ee BB6B     		ldr	r3, [r7, #56]
 4002 18f0 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 4003 18f2 002B     		cmp	r3, #0
 4004 18f4 09D0     		beq	.L276
 4005              		.loc 1 2252 0 is_stmt 0 discriminator 1
 4006 18f6 BB6B     		ldr	r3, [r7, #56]
 4007 18f8 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 4008 18fa 1A46     		mov	r2, r3
 4009 18fc BB6B     		ldr	r3, [r7, #56]
 4010 18fe 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 4011 1900 03F1FF33 		add	r3, r3, #-1
 4012 1904 1340     		ands	r3, r3, r2
 4013 1906 002B     		cmp	r3, #0
 4014 1908 02D0     		beq	.L277
 4015              	.L276:
2253:../Sources/ff10b/src/ff.c **** 		return FR_NO_FILESYSTEM;
 4016              		.loc 1 2253 0 is_stmt 1
 4017 190a 4FF00D03 		mov	r3, #13
 4018 190e ACE1     		b	.L256
 4019              	.L277:
2254:../Sources/ff10b/src/ff.c **** 
2255:../Sources/ff10b/src/ff.c **** 	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
 4020              		.loc 1 2255 0
 4021 1910 BB6B     		ldr	r3, [r7, #56]
 4022 1912 93F84230 		ldrb	r3, [r3, #66]	@ zero_extendqisi2
 4023 1916 4FEA0323 		lsl	r3, r3, #8
 4024 191a 9AB2     		uxth	r2, r3
 4025 191c BB6B     		ldr	r3, [r7, #56]
 4026 191e 93F84130 		ldrb	r3, [r3, #65]	@ zero_extendqisi2
 4027 1922 1343     		orrs	r3, r3, r2
 4028 1924 9BB2     		uxth	r3, r3
 4029 1926 9AB2     		uxth	r2, r3
 4030 1928 BB6B     		ldr	r3, [r7, #56]
 4031 192a 1A81     		strh	r2, [r3, #8]	@ movhi
2256:../Sources/ff10b/src/ff.c **** 	if (fs->n_rootdir % (SS(fs) / SZ_DIR))				/* (Must be sector aligned) */
 4032              		.loc 1 2256 0
 4033 192c BB6B     		ldr	r3, [r7, #56]
 4034 192e 1B89     		ldrh	r3, [r3, #8]
 4035 1930 03F00F03 		and	r3, r3, #15
 4036 1934 9BB2     		uxth	r3, r3
 4037 1936 002B     		cmp	r3, #0
 4038 1938 02D0     		beq	.L278
2257:../Sources/ff10b/src/ff.c **** 		return FR_NO_FILESYSTEM;
 4039              		.loc 1 2257 0
 4040 193a 4FF00D03 		mov	r3, #13
 4041 193e 94E1     		b	.L256
 4042              	.L278:
2258:../Sources/ff10b/src/ff.c **** 
2259:../Sources/ff10b/src/ff.c **** 	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
 4043              		.loc 1 2259 0
 4044 1940 BB6B     		ldr	r3, [r7, #56]
 4045 1942 93F84430 		ldrb	r3, [r3, #68]	@ zero_extendqisi2
 4046 1946 4FEA0323 		lsl	r3, r3, #8
 4047 194a 9AB2     		uxth	r2, r3
 4048 194c BB6B     		ldr	r3, [r7, #56]
 4049 194e 93F84330 		ldrb	r3, [r3, #67]	@ zero_extendqisi2
 4050 1952 1343     		orrs	r3, r3, r2
 4051 1954 9BB2     		uxth	r3, r3
 4052 1956 9BB2     		uxth	r3, r3
 4053 1958 BB64     		str	r3, [r7, #72]
2260:../Sources/ff10b/src/ff.c **** 	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
 4054              		.loc 1 2260 0
 4055 195a BB6C     		ldr	r3, [r7, #72]
 4056 195c 002B     		cmp	r3, #0
 4057 195e 15D1     		bne	.L279
 4058              		.loc 1 2260 0 is_stmt 0 discriminator 1
 4059 1960 BB6B     		ldr	r3, [r7, #56]
 4060 1962 93F85330 		ldrb	r3, [r3, #83]	@ zero_extendqisi2
 4061 1966 4FEA0362 		lsl	r2, r3, #24
 4062 196a BB6B     		ldr	r3, [r7, #56]
 4063 196c 93F85230 		ldrb	r3, [r3, #82]	@ zero_extendqisi2
 4064 1970 4FEA0343 		lsl	r3, r3, #16
 4065 1974 1A43     		orrs	r2, r2, r3
 4066 1976 BB6B     		ldr	r3, [r7, #56]
 4067 1978 93F85130 		ldrb	r3, [r3, #81]	@ zero_extendqisi2
 4068 197c 4FEA0323 		lsl	r3, r3, #8
 4069 1980 1A43     		orrs	r2, r2, r3
 4070 1982 BB6B     		ldr	r3, [r7, #56]
 4071 1984 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 4072 1988 1343     		orrs	r3, r3, r2
 4073 198a BB64     		str	r3, [r7, #72]
 4074              	.L279:
2261:../Sources/ff10b/src/ff.c **** 
2262:../Sources/ff10b/src/ff.c **** 	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
 4075              		.loc 1 2262 0 is_stmt 1
 4076 198c BB6B     		ldr	r3, [r7, #56]
 4077 198e 93F83F30 		ldrb	r3, [r3, #63]	@ zero_extendqisi2
 4078 1992 4FEA0323 		lsl	r3, r3, #8
 4079 1996 9AB2     		uxth	r2, r3
 4080 1998 BB6B     		ldr	r3, [r7, #56]
 4081 199a 93F83E30 		ldrb	r3, [r3, #62]	@ zero_extendqisi2
 4082 199e 1343     		orrs	r3, r3, r2
 4083 19a0 9BB2     		uxth	r3, r3
 4084 19a2 FB85     		strh	r3, [r7, #46]	@ movhi
2263:../Sources/ff10b/src/ff.c **** 	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 4085              		.loc 1 2263 0
 4086 19a4 FB8D     		ldrh	r3, [r7, #46]
 4087 19a6 002B     		cmp	r3, #0
 4088 19a8 02D1     		bne	.L280
 4089              		.loc 1 2263 0 is_stmt 0 discriminator 1
 4090 19aa 4FF00D03 		mov	r3, #13
 4091 19ae 5CE1     		b	.L256
 4092              	.L280:
2264:../Sources/ff10b/src/ff.c **** 
2265:../Sources/ff10b/src/ff.c **** 	/* Determine the FAT sub type */
2266:../Sources/ff10b/src/ff.c **** 	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
 4093              		.loc 1 2266 0 is_stmt 1
 4094 19b0 FA8D     		ldrh	r2, [r7, #46]
 4095 19b2 FB6C     		ldr	r3, [r7, #76]
 4096 19b4 D218     		adds	r2, r2, r3
 4097 19b6 BB6B     		ldr	r3, [r7, #56]
 4098 19b8 1B89     		ldrh	r3, [r3, #8]
 4099 19ba 4FEA1313 		lsr	r3, r3, #4
 4100 19be 9BB2     		uxth	r3, r3
 4101 19c0 D318     		adds	r3, r2, r3
 4102 19c2 BB62     		str	r3, [r7, #40]
2267:../Sources/ff10b/src/ff.c **** 	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 4103              		.loc 1 2267 0
 4104 19c4 BA6C     		ldr	r2, [r7, #72]
 4105 19c6 BB6A     		ldr	r3, [r7, #40]
 4106 19c8 9A42     		cmp	r2, r3
 4107 19ca 02D2     		bcs	.L281
 4108              		.loc 1 2267 0 is_stmt 0 discriminator 1
 4109 19cc 4FF00D03 		mov	r3, #13
 4110 19d0 4BE1     		b	.L256
 4111              	.L281:
2268:../Sources/ff10b/src/ff.c **** 	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 4112              		.loc 1 2268 0 is_stmt 1
 4113 19d2 BA6C     		ldr	r2, [r7, #72]
 4114 19d4 BB6A     		ldr	r3, [r7, #40]
 4115 19d6 D21A     		subs	r2, r2, r3
 4116 19d8 BB6B     		ldr	r3, [r7, #56]
 4117 19da 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 4118 19dc B2FBF3F3 		udiv	r3, r2, r3
 4119 19e0 7B62     		str	r3, [r7, #36]
2269:../Sources/ff10b/src/ff.c **** 	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 4120              		.loc 1 2269 0
 4121 19e2 7B6A     		ldr	r3, [r7, #36]
 4122 19e4 002B     		cmp	r3, #0
 4123 19e6 02D1     		bne	.L282
 4124              		.loc 1 2269 0 is_stmt 0 discriminator 1
 4125 19e8 4FF00D03 		mov	r3, #13
 4126 19ec 3DE1     		b	.L256
 4127              	.L282:
2270:../Sources/ff10b/src/ff.c **** 	fmt = FS_FAT12;
 4128              		.loc 1 2270 0 is_stmt 1
 4129 19ee 4FF00103 		mov	r3, #1
 4130 19f2 87F85730 		strb	r3, [r7, #87]
2271:../Sources/ff10b/src/ff.c **** 	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 4131              		.loc 1 2271 0
 4132 19f6 7A6A     		ldr	r2, [r7, #36]
 4133 19f8 40F6F573 		movw	r3, #4085
 4134 19fc 9A42     		cmp	r2, r3
 4135 19fe 03D9     		bls	.L283
 4136              		.loc 1 2271 0 is_stmt 0 discriminator 1
 4137 1a00 4FF00203 		mov	r3, #2
 4138 1a04 87F85730 		strb	r3, [r7, #87]
 4139              	.L283:
2272:../Sources/ff10b/src/ff.c **** 	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 4140              		.loc 1 2272 0 is_stmt 1
 4141 1a08 7A6A     		ldr	r2, [r7, #36]
 4142 1a0a 4FF6F573 		movw	r3, #65525
 4143 1a0e 9A42     		cmp	r2, r3
 4144 1a10 03D9     		bls	.L284
 4145              		.loc 1 2272 0 is_stmt 0 discriminator 1
 4146 1a12 4FF00303 		mov	r3, #3
 4147 1a16 87F85730 		strb	r3, [r7, #87]
 4148              	.L284:
2273:../Sources/ff10b/src/ff.c **** 
2274:../Sources/ff10b/src/ff.c **** 	/* Boundaries and Limits */
2275:../Sources/ff10b/src/ff.c **** 	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 4149              		.loc 1 2275 0 is_stmt 1
 4150 1a1a 7B6A     		ldr	r3, [r7, #36]
 4151 1a1c 03F10202 		add	r2, r3, #2
 4152 1a20 BB6B     		ldr	r3, [r7, #56]
 4153 1a22 5A61     		str	r2, [r3, #20]
2276:../Sources/ff10b/src/ff.c **** 	fs->volbase = bsect;								/* Volume start sector */
 4154              		.loc 1 2276 0
 4155 1a24 BB6B     		ldr	r3, [r7, #56]
 4156 1a26 3A6D     		ldr	r2, [r7, #80]
 4157 1a28 DA61     		str	r2, [r3, #28]
2277:../Sources/ff10b/src/ff.c **** 	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 4158              		.loc 1 2277 0
 4159 1a2a FA8D     		ldrh	r2, [r7, #46]
 4160 1a2c 3B6D     		ldr	r3, [r7, #80]
 4161 1a2e D218     		adds	r2, r2, r3
 4162 1a30 BB6B     		ldr	r3, [r7, #56]
 4163 1a32 1A62     		str	r2, [r3, #32]
2278:../Sources/ff10b/src/ff.c **** 	fs->database = bsect + sysect;						/* Data start sector */
 4164              		.loc 1 2278 0
 4165 1a34 3A6D     		ldr	r2, [r7, #80]
 4166 1a36 BB6A     		ldr	r3, [r7, #40]
 4167 1a38 D218     		adds	r2, r2, r3
 4168 1a3a BB6B     		ldr	r3, [r7, #56]
 4169 1a3c 9A62     		str	r2, [r3, #40]
2279:../Sources/ff10b/src/ff.c **** 	if (fmt == FS_FAT32) {
 4170              		.loc 1 2279 0
 4171 1a3e 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 4172 1a42 032B     		cmp	r3, #3
 4173 1a44 23D1     		bne	.L285
2280:../Sources/ff10b/src/ff.c **** 		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 4174              		.loc 1 2280 0
 4175 1a46 BB6B     		ldr	r3, [r7, #56]
 4176 1a48 1B89     		ldrh	r3, [r3, #8]
 4177 1a4a 002B     		cmp	r3, #0
 4178 1a4c 02D0     		beq	.L286
 4179              		.loc 1 2280 0 is_stmt 0 discriminator 1
 4180 1a4e 4FF00D03 		mov	r3, #13
 4181 1a52 0AE1     		b	.L256
 4182              	.L286:
2281:../Sources/ff10b/src/ff.c **** 		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
 4183              		.loc 1 2281 0 is_stmt 1
 4184 1a54 BB6B     		ldr	r3, [r7, #56]
 4185 1a56 93F85F30 		ldrb	r3, [r3, #95]	@ zero_extendqisi2
 4186 1a5a 4FEA0362 		lsl	r2, r3, #24
 4187 1a5e BB6B     		ldr	r3, [r7, #56]
 4188 1a60 93F85E30 		ldrb	r3, [r3, #94]	@ zero_extendqisi2
 4189 1a64 4FEA0343 		lsl	r3, r3, #16
 4190 1a68 1A43     		orrs	r2, r2, r3
 4191 1a6a BB6B     		ldr	r3, [r7, #56]
 4192 1a6c 93F85D30 		ldrb	r3, [r3, #93]	@ zero_extendqisi2
 4193 1a70 4FEA0323 		lsl	r3, r3, #8
 4194 1a74 1A43     		orrs	r2, r2, r3
 4195 1a76 BB6B     		ldr	r3, [r7, #56]
 4196 1a78 93F85C30 		ldrb	r3, [r3, #92]	@ zero_extendqisi2
 4197 1a7c 1A43     		orrs	r2, r2, r3
 4198 1a7e BB6B     		ldr	r3, [r7, #56]
 4199 1a80 5A62     		str	r2, [r3, #36]
2282:../Sources/ff10b/src/ff.c **** 		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 4200              		.loc 1 2282 0
 4201 1a82 BB6B     		ldr	r3, [r7, #56]
 4202 1a84 5B69     		ldr	r3, [r3, #20]
 4203 1a86 4FEA8303 		lsl	r3, r3, #2
 4204 1a8a 7B64     		str	r3, [r7, #68]
 4205 1a8c 23E0     		b	.L287
 4206              	.L285:
2283:../Sources/ff10b/src/ff.c **** 	} else {
2284:../Sources/ff10b/src/ff.c **** 		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 4207              		.loc 1 2284 0
 4208 1a8e BB6B     		ldr	r3, [r7, #56]
 4209 1a90 1B89     		ldrh	r3, [r3, #8]
 4210 1a92 002B     		cmp	r3, #0
 4211 1a94 02D1     		bne	.L288
 4212              		.loc 1 2284 0 is_stmt 0 discriminator 1
 4213 1a96 4FF00D03 		mov	r3, #13
 4214 1a9a E6E0     		b	.L256
 4215              	.L288:
2285:../Sources/ff10b/src/ff.c **** 		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 4216              		.loc 1 2285 0 is_stmt 1
 4217 1a9c BB6B     		ldr	r3, [r7, #56]
 4218 1a9e 1A6A     		ldr	r2, [r3, #32]
 4219 1aa0 FB6C     		ldr	r3, [r7, #76]
 4220 1aa2 D218     		adds	r2, r2, r3
 4221 1aa4 BB6B     		ldr	r3, [r7, #56]
 4222 1aa6 5A62     		str	r2, [r3, #36]
2286:../Sources/ff10b/src/ff.c **** 		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
2287:../Sources/ff10b/src/ff.c **** 			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 4223              		.loc 1 2287 0
 4224 1aa8 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 4225 1aac 022B     		cmp	r3, #2
 4226 1aae 04D1     		bne	.L289
 4227              		.loc 1 2287 0 is_stmt 0 discriminator 1
 4228 1ab0 BB6B     		ldr	r3, [r7, #56]
 4229 1ab2 5B69     		ldr	r3, [r3, #20]
 4230 1ab4 4FEA4303 		lsl	r3, r3, #1
 4231 1ab8 0CE0     		b	.L290
 4232              	.L289:
 4233              		.loc 1 2287 0 discriminator 2
 4234 1aba BB6B     		ldr	r3, [r7, #56]
 4235 1abc 5A69     		ldr	r2, [r3, #20]
 4236 1abe 1346     		mov	r3, r2
 4237 1ac0 4FEA4303 		lsl	r3, r3, #1
 4238 1ac4 9B18     		adds	r3, r3, r2
 4239 1ac6 4FEA5302 		lsr	r2, r3, #1
 4240 1aca BB6B     		ldr	r3, [r7, #56]
 4241 1acc 5B69     		ldr	r3, [r3, #20]
 4242 1ace 03F00103 		and	r3, r3, #1
 4243 1ad2 D318     		adds	r3, r2, r3
 4244              	.L290:
2286:../Sources/ff10b/src/ff.c **** 		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 4245              		.loc 1 2286 0 is_stmt 1
 4246 1ad4 7B64     		str	r3, [r7, #68]
 4247              	.L287:
2288:../Sources/ff10b/src/ff.c **** 	}
2289:../Sources/ff10b/src/ff.c **** 	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than needed) */
 4248              		.loc 1 2289 0
 4249 1ad6 BB6B     		ldr	r3, [r7, #56]
 4250 1ad8 9A69     		ldr	r2, [r3, #24]
 4251 1ada 7B6C     		ldr	r3, [r7, #68]
 4252 1adc 03F2FF13 		addw	r3, r3, #511
 4253 1ae0 4FEA5323 		lsr	r3, r3, #9
 4254 1ae4 9A42     		cmp	r2, r3
 4255 1ae6 02D2     		bcs	.L291
2290:../Sources/ff10b/src/ff.c **** 		return FR_NO_FILESYSTEM;
 4256              		.loc 1 2290 0
 4257 1ae8 4FF00D03 		mov	r3, #13
 4258 1aec BDE0     		b	.L256
 4259              	.L291:
2291:../Sources/ff10b/src/ff.c **** 
2292:../Sources/ff10b/src/ff.c **** #if !_FS_READONLY
2293:../Sources/ff10b/src/ff.c **** 	/* Initialize cluster allocation information */
2294:../Sources/ff10b/src/ff.c **** 	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 4260              		.loc 1 2294 0
 4261 1aee BB6B     		ldr	r3, [r7, #56]
 4262 1af0 4FF0FF32 		mov	r2, #-1
 4263 1af4 1A61     		str	r2, [r3, #16]
 4264 1af6 BB6B     		ldr	r3, [r7, #56]
 4265 1af8 1A69     		ldr	r2, [r3, #16]
 4266 1afa BB6B     		ldr	r3, [r7, #56]
 4267 1afc DA60     		str	r2, [r3, #12]
2295:../Sources/ff10b/src/ff.c **** 
2296:../Sources/ff10b/src/ff.c **** 	/* Get fsinfo if available */
2297:../Sources/ff10b/src/ff.c **** 	fs->fsi_flag = 0x80;
 4268              		.loc 1 2297 0
 4269 1afe BB6B     		ldr	r3, [r7, #56]
 4270 1b00 4FF08002 		mov	r2, #128
 4271 1b04 5A71     		strb	r2, [r3, #5]
2298:../Sources/ff10b/src/ff.c **** #if (_FS_NOFSINFO & 3) != 3
2299:../Sources/ff10b/src/ff.c **** 	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 4272              		.loc 1 2299 0
 4273 1b06 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 4274 1b0a 032B     		cmp	r3, #3
 4275 1b0c 40F09380 		bne	.L292
2300:../Sources/ff10b/src/ff.c **** 		&& LD_WORD(fs->win+BPB_FSInfo) == 1
 4276              		.loc 1 2300 0
 4277 1b10 BB6B     		ldr	r3, [r7, #56]
 4278 1b12 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 4279 1b16 4FEA0323 		lsl	r3, r3, #8
 4280 1b1a 9AB2     		uxth	r2, r3
 4281 1b1c BB6B     		ldr	r3, [r7, #56]
 4282 1b1e 93F86030 		ldrb	r3, [r3, #96]	@ zero_extendqisi2
 4283 1b22 1343     		orrs	r3, r3, r2
 4284 1b24 9BB2     		uxth	r3, r3
 4285 1b26 1BB2     		sxth	r3, r3
 4286 1b28 012B     		cmp	r3, #1
 4287 1b2a 40F08480 		bne	.L292
2301:../Sources/ff10b/src/ff.c **** 		&& move_window(fs, bsect + 1) == FR_OK)
 4288              		.loc 1 2301 0
 4289 1b2e 3B6D     		ldr	r3, [r7, #80]
 4290 1b30 03F10103 		add	r3, r3, #1
 4291 1b34 B86B     		ldr	r0, [r7, #56]
 4292 1b36 1946     		mov	r1, r3
 4293 1b38 FEF74CFB 		bl	move_window
 4294 1b3c 0346     		mov	r3, r0
 4295 1b3e 002B     		cmp	r3, #0
 4296 1b40 79D1     		bne	.L292
2302:../Sources/ff10b/src/ff.c **** 	{
2303:../Sources/ff10b/src/ff.c **** 		fs->fsi_flag = 0;
 4297              		.loc 1 2303 0
 4298 1b42 BB6B     		ldr	r3, [r7, #56]
 4299 1b44 4FF00002 		mov	r2, #0
 4300 1b48 5A71     		strb	r2, [r3, #5]
2304:../Sources/ff10b/src/ff.c **** 		if (LD_WORD(fs->win+BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 4301              		.loc 1 2304 0
 4302 1b4a BB6B     		ldr	r3, [r7, #56]
 4303 1b4c 93F82F32 		ldrb	r3, [r3, #559]	@ zero_extendqisi2
 4304 1b50 4FEA0323 		lsl	r3, r3, #8
 4305 1b54 9AB2     		uxth	r2, r3
 4306 1b56 BB6B     		ldr	r3, [r7, #56]
 4307 1b58 93F82E32 		ldrb	r3, [r3, #558]	@ zero_extendqisi2
 4308 1b5c 1343     		orrs	r3, r3, r2
 4309 1b5e 9BB2     		uxth	r3, r3
 4310 1b60 1AB2     		sxth	r2, r3
 4311 1b62 4AF65523 		movw	r3, #43605
 4312 1b66 CFF6FF73 		movt	r3, 65535
 4313 1b6a 9A42     		cmp	r2, r3
 4314 1b6c 63D1     		bne	.L292
2305:../Sources/ff10b/src/ff.c **** 			&& LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252
 4315              		.loc 1 2305 0
 4316 1b6e BB6B     		ldr	r3, [r7, #56]
 4317 1b70 93F83330 		ldrb	r3, [r3, #51]	@ zero_extendqisi2
 4318 1b74 4FEA0362 		lsl	r2, r3, #24
 4319 1b78 BB6B     		ldr	r3, [r7, #56]
 4320 1b7a 93F83230 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 4321 1b7e 4FEA0343 		lsl	r3, r3, #16
 4322 1b82 1A43     		orrs	r2, r2, r3
 4323 1b84 BB6B     		ldr	r3, [r7, #56]
 4324 1b86 93F83130 		ldrb	r3, [r3, #49]	@ zero_extendqisi2
 4325 1b8a 4FEA0323 		lsl	r3, r3, #8
 4326 1b8e 1A43     		orrs	r2, r2, r3
 4327 1b90 BB6B     		ldr	r3, [r7, #56]
 4328 1b92 93F83030 		ldrb	r3, [r3, #48]	@ zero_extendqisi2
 4329 1b96 1A43     		orrs	r2, r2, r3
 4330 1b98 45F25223 		movw	r3, #21074
 4331 1b9c C4F26113 		movt	r3, 16737
 4332 1ba0 9A42     		cmp	r2, r3
 4333 1ba2 48D1     		bne	.L292
2306:../Sources/ff10b/src/ff.c **** 			&& LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272)
 4334              		.loc 1 2306 0
 4335 1ba4 BB6B     		ldr	r3, [r7, #56]
 4336 1ba6 93F81732 		ldrb	r3, [r3, #535]	@ zero_extendqisi2
 4337 1baa 4FEA0362 		lsl	r2, r3, #24
 4338 1bae BB6B     		ldr	r3, [r7, #56]
 4339 1bb0 93F81632 		ldrb	r3, [r3, #534]	@ zero_extendqisi2
 4340 1bb4 4FEA0343 		lsl	r3, r3, #16
 4341 1bb8 1A43     		orrs	r2, r2, r3
 4342 1bba BB6B     		ldr	r3, [r7, #56]
 4343 1bbc 93F81532 		ldrb	r3, [r3, #533]	@ zero_extendqisi2
 4344 1bc0 4FEA0323 		lsl	r3, r3, #8
 4345 1bc4 1A43     		orrs	r2, r2, r3
 4346 1bc6 BB6B     		ldr	r3, [r7, #56]
 4347 1bc8 93F81432 		ldrb	r3, [r3, #532]	@ zero_extendqisi2
 4348 1bcc 1A43     		orrs	r2, r2, r3
 4349 1bce 47F27223 		movw	r3, #29298
 4350 1bd2 C6F24113 		movt	r3, 24897
 4351 1bd6 9A42     		cmp	r2, r3
 4352 1bd8 2DD1     		bne	.L292
2307:../Sources/ff10b/src/ff.c **** 		{
2308:../Sources/ff10b/src/ff.c **** #if (_FS_NOFSINFO & 1) == 0
2309:../Sources/ff10b/src/ff.c **** 			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 4353              		.loc 1 2309 0
 4354 1bda BB6B     		ldr	r3, [r7, #56]
 4355 1bdc 93F81B32 		ldrb	r3, [r3, #539]	@ zero_extendqisi2
 4356 1be0 4FEA0362 		lsl	r2, r3, #24
 4357 1be4 BB6B     		ldr	r3, [r7, #56]
 4358 1be6 93F81A32 		ldrb	r3, [r3, #538]	@ zero_extendqisi2
 4359 1bea 4FEA0343 		lsl	r3, r3, #16
 4360 1bee 1A43     		orrs	r2, r2, r3
 4361 1bf0 BB6B     		ldr	r3, [r7, #56]
 4362 1bf2 93F81932 		ldrb	r3, [r3, #537]	@ zero_extendqisi2
 4363 1bf6 4FEA0323 		lsl	r3, r3, #8
 4364 1bfa 1A43     		orrs	r2, r2, r3
 4365 1bfc BB6B     		ldr	r3, [r7, #56]
 4366 1bfe 93F81832 		ldrb	r3, [r3, #536]	@ zero_extendqisi2
 4367 1c02 1A43     		orrs	r2, r2, r3
 4368 1c04 BB6B     		ldr	r3, [r7, #56]
 4369 1c06 1A61     		str	r2, [r3, #16]
2310:../Sources/ff10b/src/ff.c **** #endif
2311:../Sources/ff10b/src/ff.c **** #if (_FS_NOFSINFO & 2) == 0
2312:../Sources/ff10b/src/ff.c **** 			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 4370              		.loc 1 2312 0
 4371 1c08 BB6B     		ldr	r3, [r7, #56]
 4372 1c0a 93F81F32 		ldrb	r3, [r3, #543]	@ zero_extendqisi2
 4373 1c0e 4FEA0362 		lsl	r2, r3, #24
 4374 1c12 BB6B     		ldr	r3, [r7, #56]
 4375 1c14 93F81E32 		ldrb	r3, [r3, #542]	@ zero_extendqisi2
 4376 1c18 4FEA0343 		lsl	r3, r3, #16
 4377 1c1c 1A43     		orrs	r2, r2, r3
 4378 1c1e BB6B     		ldr	r3, [r7, #56]
 4379 1c20 93F81D32 		ldrb	r3, [r3, #541]	@ zero_extendqisi2
 4380 1c24 4FEA0323 		lsl	r3, r3, #8
 4381 1c28 1A43     		orrs	r2, r2, r3
 4382 1c2a BB6B     		ldr	r3, [r7, #56]
 4383 1c2c 93F81C32 		ldrb	r3, [r3, #540]	@ zero_extendqisi2
 4384 1c30 1A43     		orrs	r2, r2, r3
 4385 1c32 BB6B     		ldr	r3, [r7, #56]
 4386 1c34 DA60     		str	r2, [r3, #12]
 4387              	.L292:
2313:../Sources/ff10b/src/ff.c **** #endif
2314:../Sources/ff10b/src/ff.c **** 		}
2315:../Sources/ff10b/src/ff.c **** 	}
2316:../Sources/ff10b/src/ff.c **** #endif
2317:../Sources/ff10b/src/ff.c **** #endif
2318:../Sources/ff10b/src/ff.c **** 	fs->fs_type = fmt;	/* FAT sub-type */
 4388              		.loc 1 2318 0
 4389 1c36 BB6B     		ldr	r3, [r7, #56]
 4390 1c38 97F85720 		ldrb	r2, [r7, #87]
 4391 1c3c 1A70     		strb	r2, [r3, #0]
2319:../Sources/ff10b/src/ff.c **** 	fs->id = ++Fsid;	/* File system mount ID */
 4392              		.loc 1 2319 0
 4393 1c3e 40F20003 		movw	r3, #:lower16:Fsid
 4394 1c42 C0F20003 		movt	r3, #:upper16:Fsid
 4395 1c46 1B88     		ldrh	r3, [r3, #0]
 4396 1c48 03F10103 		add	r3, r3, #1
 4397 1c4c 9AB2     		uxth	r2, r3
 4398 1c4e 40F20003 		movw	r3, #:lower16:Fsid
 4399 1c52 C0F20003 		movt	r3, #:upper16:Fsid
 4400 1c56 1A80     		strh	r2, [r3, #0]	@ movhi
 4401 1c58 40F20003 		movw	r3, #:lower16:Fsid
 4402 1c5c C0F20003 		movt	r3, #:upper16:Fsid
 4403 1c60 1A88     		ldrh	r2, [r3, #0]
 4404 1c62 BB6B     		ldr	r3, [r7, #56]
 4405 1c64 DA80     		strh	r2, [r3, #6]	@ movhi
2320:../Sources/ff10b/src/ff.c **** #if _FS_RPATH
2321:../Sources/ff10b/src/ff.c **** 	fs->cdir = 0;		/* Set current directory to root */
2322:../Sources/ff10b/src/ff.c **** #endif
2323:../Sources/ff10b/src/ff.c **** #if _FS_LOCK			/* Clear file lock semaphores */
2324:../Sources/ff10b/src/ff.c **** 	clear_lock(fs);
2325:../Sources/ff10b/src/ff.c **** #endif
2326:../Sources/ff10b/src/ff.c **** 
2327:../Sources/ff10b/src/ff.c **** 	return FR_OK;
 4406              		.loc 1 2327 0
 4407 1c66 4FF00003 		mov	r3, #0
 4408              	.L256:
2328:../Sources/ff10b/src/ff.c **** }
 4409              		.loc 1 2328 0
 4410 1c6a 1846     		mov	r0, r3
 4411 1c6c 07F15807 		add	r7, r7, #88
 4412 1c70 BD46     		mov	sp, r7
 4413 1c72 80BD     		pop	{r7, pc}
 4414              		.cfi_endproc
 4415              	.LFE27:
 4417              		.align	2
 4418              		.thumb
 4419              		.thumb_func
 4421              	validate:
 4422              	.LFB28:
2329:../Sources/ff10b/src/ff.c **** 
2330:../Sources/ff10b/src/ff.c **** 
2331:../Sources/ff10b/src/ff.c **** 
2332:../Sources/ff10b/src/ff.c **** 
2333:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
2334:../Sources/ff10b/src/ff.c **** /* Check if the file/directory object is valid or not                    */
2335:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
2336:../Sources/ff10b/src/ff.c **** 
2337:../Sources/ff10b/src/ff.c **** static
2338:../Sources/ff10b/src/ff.c **** FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
2339:../Sources/ff10b/src/ff.c **** 	void* obj		/* Pointer to the object FIL/DIR to check validity */
2340:../Sources/ff10b/src/ff.c **** )
2341:../Sources/ff10b/src/ff.c **** {
 4423              		.loc 1 2341 0
 4424              		.cfi_startproc
 4425              		@ args = 0, pretend = 0, frame = 16
 4426              		@ frame_needed = 1, uses_anonymous_args = 0
 4427 1c74 80B5     		push	{r7, lr}
 4428              	.LCFI83:
 4429              		.cfi_def_cfa_offset 8
 4430              		.cfi_offset 7, -8
 4431              		.cfi_offset 14, -4
 4432 1c76 84B0     		sub	sp, sp, #16
 4433              	.LCFI84:
 4434              		.cfi_def_cfa_offset 24
 4435 1c78 00AF     		add	r7, sp, #0
 4436              	.LCFI85:
 4437              		.cfi_def_cfa_register 7
 4438 1c7a 7860     		str	r0, [r7, #4]
2342:../Sources/ff10b/src/ff.c **** 	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 4439              		.loc 1 2342 0
 4440 1c7c 7B68     		ldr	r3, [r7, #4]
 4441 1c7e FB60     		str	r3, [r7, #12]
2343:../Sources/ff10b/src/ff.c **** 
2344:../Sources/ff10b/src/ff.c **** 
2345:../Sources/ff10b/src/ff.c **** 	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
 4442              		.loc 1 2345 0
 4443 1c80 FB68     		ldr	r3, [r7, #12]
 4444 1c82 002B     		cmp	r3, #0
 4445 1c84 0FD0     		beq	.L294
 4446              		.loc 1 2345 0 is_stmt 0 discriminator 1
 4447 1c86 FB68     		ldr	r3, [r7, #12]
 4448 1c88 1B68     		ldr	r3, [r3, #0]
 4449 1c8a 002B     		cmp	r3, #0
 4450 1c8c 0BD0     		beq	.L294
 4451 1c8e FB68     		ldr	r3, [r7, #12]
 4452 1c90 1B68     		ldr	r3, [r3, #0]
 4453 1c92 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4454 1c94 002B     		cmp	r3, #0
 4455 1c96 06D0     		beq	.L294
 4456 1c98 FB68     		ldr	r3, [r7, #12]
 4457 1c9a 1B68     		ldr	r3, [r3, #0]
 4458 1c9c DA88     		ldrh	r2, [r3, #6]
 4459 1c9e FB68     		ldr	r3, [r7, #12]
 4460 1ca0 9B88     		ldrh	r3, [r3, #4]
 4461 1ca2 9A42     		cmp	r2, r3
 4462 1ca4 02D0     		beq	.L295
 4463              	.L294:
2346:../Sources/ff10b/src/ff.c **** 		return FR_INVALID_OBJECT;
 4464              		.loc 1 2346 0 is_stmt 1
 4465 1ca6 4FF00903 		mov	r3, #9
 4466 1caa 0FE0     		b	.L296
 4467              	.L295:
2347:../Sources/ff10b/src/ff.c **** 
2348:../Sources/ff10b/src/ff.c **** 	ENTER_FF(fil->fs);		/* Lock file system */
2349:../Sources/ff10b/src/ff.c **** 
2350:../Sources/ff10b/src/ff.c **** 	if (disk_status(fil->fs->drv) & STA_NOINIT)
 4468              		.loc 1 2350 0
 4469 1cac FB68     		ldr	r3, [r7, #12]
 4470 1cae 1B68     		ldr	r3, [r3, #0]
 4471 1cb0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 4472 1cb2 1846     		mov	r0, r3
 4473 1cb4 FFF7FEFF 		bl	disk_status
 4474 1cb8 0346     		mov	r3, r0
 4475 1cba 03F00103 		and	r3, r3, #1
 4476 1cbe 002B     		cmp	r3, #0
 4477 1cc0 02D0     		beq	.L297
2351:../Sources/ff10b/src/ff.c **** 		return FR_NOT_READY;
 4478              		.loc 1 2351 0
 4479 1cc2 4FF00303 		mov	r3, #3
 4480 1cc6 01E0     		b	.L296
 4481              	.L297:
2352:../Sources/ff10b/src/ff.c **** 
2353:../Sources/ff10b/src/ff.c **** 	return FR_OK;
 4482              		.loc 1 2353 0
 4483 1cc8 4FF00003 		mov	r3, #0
 4484              	.L296:
2354:../Sources/ff10b/src/ff.c **** }
 4485              		.loc 1 2354 0
 4486 1ccc 1846     		mov	r0, r3
 4487 1cce 07F11007 		add	r7, r7, #16
 4488 1cd2 BD46     		mov	sp, r7
 4489 1cd4 80BD     		pop	{r7, pc}
 4490              		.cfi_endproc
 4491              	.LFE28:
 4493 1cd6 00BF     		.align	2
 4494              		.global	f_mount
 4495              		.thumb
 4496              		.thumb_func
 4498              	f_mount:
 4499              	.LFB29:
2355:../Sources/ff10b/src/ff.c **** 
2356:../Sources/ff10b/src/ff.c **** 
2357:../Sources/ff10b/src/ff.c **** 
2358:../Sources/ff10b/src/ff.c **** 
2359:../Sources/ff10b/src/ff.c **** /*--------------------------------------------------------------------------
2360:../Sources/ff10b/src/ff.c **** 
2361:../Sources/ff10b/src/ff.c ****    Public Functions
2362:../Sources/ff10b/src/ff.c **** 
2363:../Sources/ff10b/src/ff.c **** --------------------------------------------------------------------------*/
2364:../Sources/ff10b/src/ff.c **** 
2365:../Sources/ff10b/src/ff.c **** 
2366:../Sources/ff10b/src/ff.c **** 
2367:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
2368:../Sources/ff10b/src/ff.c **** /* Mount/Unmount a Logical Drive                                         */
2369:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
2370:../Sources/ff10b/src/ff.c **** 
2371:../Sources/ff10b/src/ff.c **** FRESULT f_mount (
2372:../Sources/ff10b/src/ff.c **** 	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
2373:../Sources/ff10b/src/ff.c **** 	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
2374:../Sources/ff10b/src/ff.c **** 	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
2375:../Sources/ff10b/src/ff.c **** )
2376:../Sources/ff10b/src/ff.c **** {
 4500              		.loc 1 2376 0
 4501              		.cfi_startproc
 4502              		@ args = 0, pretend = 0, frame = 32
 4503              		@ frame_needed = 1, uses_anonymous_args = 0
 4504 1cd8 80B5     		push	{r7, lr}
 4505              	.LCFI86:
 4506              		.cfi_def_cfa_offset 8
 4507              		.cfi_offset 7, -8
 4508              		.cfi_offset 14, -4
 4509 1cda 88B0     		sub	sp, sp, #32
 4510              	.LCFI87:
 4511              		.cfi_def_cfa_offset 40
 4512 1cdc 00AF     		add	r7, sp, #0
 4513              	.LCFI88:
 4514              		.cfi_def_cfa_register 7
 4515 1cde F860     		str	r0, [r7, #12]
 4516 1ce0 B960     		str	r1, [r7, #8]
 4517 1ce2 1346     		mov	r3, r2
 4518 1ce4 FB71     		strb	r3, [r7, #7]
2377:../Sources/ff10b/src/ff.c **** 	FATFS *cfs;
2378:../Sources/ff10b/src/ff.c **** 	int vol;
2379:../Sources/ff10b/src/ff.c **** 	FRESULT res;
2380:../Sources/ff10b/src/ff.c **** 	const TCHAR *rp = path;
 4519              		.loc 1 2380 0
 4520 1ce6 BB68     		ldr	r3, [r7, #8]
 4521 1ce8 3B61     		str	r3, [r7, #16]
2381:../Sources/ff10b/src/ff.c **** 
2382:../Sources/ff10b/src/ff.c **** 
2383:../Sources/ff10b/src/ff.c **** 	vol = get_ldnumber(&rp);
 4522              		.loc 1 2383 0
 4523 1cea 07F11003 		add	r3, r7, #16
 4524 1cee 1846     		mov	r0, r3
 4525 1cf0 FFF7F6FB 		bl	get_ldnumber
 4526 1cf4 F861     		str	r0, [r7, #28]
2384:../Sources/ff10b/src/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
 4527              		.loc 1 2384 0
 4528 1cf6 FB69     		ldr	r3, [r7, #28]
 4529 1cf8 002B     		cmp	r3, #0
 4530 1cfa 02DA     		bge	.L299
 4531              		.loc 1 2384 0 is_stmt 0 discriminator 1
 4532 1cfc 4FF00B03 		mov	r3, #11
 4533 1d00 33E0     		b	.L305
 4534              	.L299:
2385:../Sources/ff10b/src/ff.c **** 	cfs = FatFs[vol];					/* Pointer to fs object */
 4535              		.loc 1 2385 0 is_stmt 1
 4536 1d02 40F20003 		movw	r3, #:lower16:FatFs
 4537 1d06 C0F20003 		movt	r3, #:upper16:FatFs
 4538 1d0a FA69     		ldr	r2, [r7, #28]
 4539 1d0c 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4540 1d10 BB61     		str	r3, [r7, #24]
2386:../Sources/ff10b/src/ff.c **** 
2387:../Sources/ff10b/src/ff.c **** 	if (cfs) {
 4541              		.loc 1 2387 0
 4542 1d12 BB69     		ldr	r3, [r7, #24]
 4543 1d14 002B     		cmp	r3, #0
 4544 1d16 03D0     		beq	.L301
2388:../Sources/ff10b/src/ff.c **** #if _FS_LOCK
2389:../Sources/ff10b/src/ff.c **** 		clear_lock(cfs);
2390:../Sources/ff10b/src/ff.c **** #endif
2391:../Sources/ff10b/src/ff.c **** #if _FS_REENTRANT						/* Discard sync object of the current volume */
2392:../Sources/ff10b/src/ff.c **** 		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
2393:../Sources/ff10b/src/ff.c **** #endif
2394:../Sources/ff10b/src/ff.c **** 		cfs->fs_type = 0;				/* Clear old fs object */
 4545              		.loc 1 2394 0
 4546 1d18 BB69     		ldr	r3, [r7, #24]
 4547 1d1a 4FF00002 		mov	r2, #0
 4548 1d1e 1A70     		strb	r2, [r3, #0]
 4549              	.L301:
2395:../Sources/ff10b/src/ff.c **** 	}
2396:../Sources/ff10b/src/ff.c **** 
2397:../Sources/ff10b/src/ff.c **** 	if (fs) {
 4550              		.loc 1 2397 0
 4551 1d20 FB68     		ldr	r3, [r7, #12]
 4552 1d22 002B     		cmp	r3, #0
 4553 1d24 03D0     		beq	.L302
2398:../Sources/ff10b/src/ff.c **** 		fs->fs_type = 0;				/* Clear new fs object */
 4554              		.loc 1 2398 0
 4555 1d26 FB68     		ldr	r3, [r7, #12]
 4556 1d28 4FF00002 		mov	r2, #0
 4557 1d2c 1A70     		strb	r2, [r3, #0]
 4558              	.L302:
2399:../Sources/ff10b/src/ff.c **** #if _FS_REENTRANT						/* Create sync object for the new volume */
2400:../Sources/ff10b/src/ff.c **** 		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
2401:../Sources/ff10b/src/ff.c **** #endif
2402:../Sources/ff10b/src/ff.c **** 	}
2403:../Sources/ff10b/src/ff.c **** 	FatFs[vol] = fs;					/* Register new fs object */
 4559              		.loc 1 2403 0
 4560 1d2e F968     		ldr	r1, [r7, #12]
 4561 1d30 40F20003 		movw	r3, #:lower16:FatFs
 4562 1d34 C0F20003 		movt	r3, #:upper16:FatFs
 4563 1d38 FA69     		ldr	r2, [r7, #28]
 4564 1d3a 43F82210 		str	r1, [r3, r2, lsl #2]
2404:../Sources/ff10b/src/ff.c **** 
2405:../Sources/ff10b/src/ff.c **** 	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 4565              		.loc 1 2405 0
 4566 1d3e FB68     		ldr	r3, [r7, #12]
 4567 1d40 002B     		cmp	r3, #0
 4568 1d42 02D0     		beq	.L303
 4569              		.loc 1 2405 0 is_stmt 0 discriminator 2
 4570 1d44 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4571 1d46 012B     		cmp	r3, #1
 4572 1d48 02D0     		beq	.L304
 4573              	.L303:
 4574              		.loc 1 2405 0 discriminator 1
 4575 1d4a 4FF00003 		mov	r3, #0
 4576 1d4e 0CE0     		b	.L305
 4577              	.L304:
2406:../Sources/ff10b/src/ff.c **** 
2407:../Sources/ff10b/src/ff.c **** 	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 4578              		.loc 1 2407 0 is_stmt 1
 4579 1d50 07F10C02 		add	r2, r7, #12
 4580 1d54 07F10803 		add	r3, r7, #8
 4581 1d58 1046     		mov	r0, r2
 4582 1d5a 1946     		mov	r1, r3
 4583 1d5c 4FF00002 		mov	r2, #0
 4584 1d60 FFF77CFC 		bl	find_volume
 4585 1d64 0346     		mov	r3, r0
 4586 1d66 FB75     		strb	r3, [r7, #23]
2408:../Sources/ff10b/src/ff.c **** 	LEAVE_FF(fs, res);
 4587              		.loc 1 2408 0
 4588 1d68 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4589              	.L305:
2409:../Sources/ff10b/src/ff.c **** }
 4590              		.loc 1 2409 0
 4591 1d6a 1846     		mov	r0, r3
 4592 1d6c 07F12007 		add	r7, r7, #32
 4593 1d70 BD46     		mov	sp, r7
 4594 1d72 80BD     		pop	{r7, pc}
 4595              		.cfi_endproc
 4596              	.LFE29:
 4598              		.align	2
 4599              		.global	f_open
 4600              		.thumb
 4601              		.thumb_func
 4603              	f_open:
 4604              	.LFB30:
2410:../Sources/ff10b/src/ff.c **** 
2411:../Sources/ff10b/src/ff.c **** 
2412:../Sources/ff10b/src/ff.c **** 
2413:../Sources/ff10b/src/ff.c **** 
2414:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
2415:../Sources/ff10b/src/ff.c **** /* Open or Create a File                                                 */
2416:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
2417:../Sources/ff10b/src/ff.c **** 
2418:../Sources/ff10b/src/ff.c **** FRESULT f_open (
2419:../Sources/ff10b/src/ff.c **** 	FIL* fp,			/* Pointer to the blank file object */
2420:../Sources/ff10b/src/ff.c **** 	const TCHAR* path,	/* Pointer to the file name */
2421:../Sources/ff10b/src/ff.c **** 	BYTE mode			/* Access mode and file open mode flags */
2422:../Sources/ff10b/src/ff.c **** )
2423:../Sources/ff10b/src/ff.c **** {
 4605              		.loc 1 2423 0
 4606              		.cfi_startproc
 4607              		@ args = 0, pretend = 0, frame = 72
 4608              		@ frame_needed = 1, uses_anonymous_args = 0
 4609 1d74 80B5     		push	{r7, lr}
 4610              	.LCFI89:
 4611              		.cfi_def_cfa_offset 8
 4612              		.cfi_offset 7, -8
 4613              		.cfi_offset 14, -4
 4614 1d76 92B0     		sub	sp, sp, #72
 4615              	.LCFI90:
 4616              		.cfi_def_cfa_offset 80
 4617 1d78 00AF     		add	r7, sp, #0
 4618              	.LCFI91:
 4619              		.cfi_def_cfa_register 7
 4620 1d7a F860     		str	r0, [r7, #12]
 4621 1d7c B960     		str	r1, [r7, #8]
 4622 1d7e 1346     		mov	r3, r2
 4623 1d80 FB71     		strb	r3, [r7, #7]
2424:../Sources/ff10b/src/ff.c **** 	FRESULT res;
2425:../Sources/ff10b/src/ff.c **** 	DIR dj;
2426:../Sources/ff10b/src/ff.c **** 	BYTE *dir;
2427:../Sources/ff10b/src/ff.c **** 	DEF_NAMEBUF;
2428:../Sources/ff10b/src/ff.c **** 
2429:../Sources/ff10b/src/ff.c **** 
2430:../Sources/ff10b/src/ff.c **** 	if (!fp) return FR_INVALID_OBJECT;
 4624              		.loc 1 2430 0
 4625 1d82 FB68     		ldr	r3, [r7, #12]
 4626 1d84 002B     		cmp	r3, #0
 4627 1d86 02D1     		bne	.L307
 4628              		.loc 1 2430 0 is_stmt 0 discriminator 1
 4629 1d88 4FF00903 		mov	r3, #9
 4630 1d8c 5AE1     		b	.L320
 4631              	.L307:
2431:../Sources/ff10b/src/ff.c **** 	fp->fs = 0;			/* Clear file object */
 4632              		.loc 1 2431 0 is_stmt 1
 4633 1d8e FB68     		ldr	r3, [r7, #12]
 4634 1d90 4FF00002 		mov	r2, #0
 4635 1d94 1A60     		str	r2, [r3, #0]
2432:../Sources/ff10b/src/ff.c **** 
2433:../Sources/ff10b/src/ff.c **** 	/* Get logical drive number */
2434:../Sources/ff10b/src/ff.c **** #if !_FS_READONLY
2435:../Sources/ff10b/src/ff.c **** 	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 4636              		.loc 1 2435 0
 4637 1d96 FB79     		ldrb	r3, [r7, #7]
 4638 1d98 03F01F03 		and	r3, r3, #31
 4639 1d9c FB71     		strb	r3, [r7, #7]
2436:../Sources/ff10b/src/ff.c **** 	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 4640              		.loc 1 2436 0
 4641 1d9e FB79     		ldrb	r3, [r7, #7]
 4642 1da0 23F00103 		bic	r3, r3, #1
 4643 1da4 DBB2     		uxtb	r3, r3
 4644 1da6 07F11C01 		add	r1, r7, #28
 4645 1daa 07F10802 		add	r2, r7, #8
 4646 1dae 0846     		mov	r0, r1
 4647 1db0 1146     		mov	r1, r2
 4648 1db2 1A46     		mov	r2, r3
 4649 1db4 FFF752FC 		bl	find_volume
 4650 1db8 0346     		mov	r3, r0
 4651 1dba 87F84730 		strb	r3, [r7, #71]
2437:../Sources/ff10b/src/ff.c **** #else
2438:../Sources/ff10b/src/ff.c **** 	mode &= FA_READ;
2439:../Sources/ff10b/src/ff.c **** 	res = find_volume(&dj.fs, &path, 0);
2440:../Sources/ff10b/src/ff.c **** #endif
2441:../Sources/ff10b/src/ff.c **** 	if (res == FR_OK) {
 4652              		.loc 1 2441 0
 4653 1dbe 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 4654 1dc2 002B     		cmp	r3, #0
 4655 1dc4 40F03C81 		bne	.L309
2442:../Sources/ff10b/src/ff.c **** 		INIT_BUF(dj);
 4656              		.loc 1 2442 0
 4657 1dc8 07F11003 		add	r3, r7, #16
 4658 1dcc 7B63     		str	r3, [r7, #52]
2443:../Sources/ff10b/src/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 4659              		.loc 1 2443 0
 4660 1dce BB68     		ldr	r3, [r7, #8]
 4661 1dd0 07F11C02 		add	r2, r7, #28
 4662 1dd4 1046     		mov	r0, r2
 4663 1dd6 1946     		mov	r1, r3
 4664 1dd8 FFF712FB 		bl	follow_path
 4665 1ddc 0346     		mov	r3, r0
 4666 1dde 87F84730 		strb	r3, [r7, #71]
2444:../Sources/ff10b/src/ff.c **** 		dir = dj.dir;
 4667              		.loc 1 2444 0
 4668 1de2 3B6B     		ldr	r3, [r7, #48]
 4669 1de4 3B64     		str	r3, [r7, #64]
2445:../Sources/ff10b/src/ff.c **** #if !_FS_READONLY	/* R/W configuration */
2446:../Sources/ff10b/src/ff.c **** 		if (res == FR_OK) {
 4670              		.loc 1 2446 0
 4671 1de6 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 4672 1dea 002B     		cmp	r3, #0
 4673 1dec 06D1     		bne	.L310
2447:../Sources/ff10b/src/ff.c **** 			if (!dir)	/* Default directory itself */
 4674              		.loc 1 2447 0
 4675 1dee 3B6C     		ldr	r3, [r7, #64]
 4676 1df0 002B     		cmp	r3, #0
 4677 1df2 03D1     		bne	.L310
2448:../Sources/ff10b/src/ff.c **** 				res = FR_INVALID_NAME;
 4678              		.loc 1 2448 0
 4679 1df4 4FF00603 		mov	r3, #6
 4680 1df8 87F84730 		strb	r3, [r7, #71]
 4681              	.L310:
2449:../Sources/ff10b/src/ff.c **** #if _FS_LOCK
2450:../Sources/ff10b/src/ff.c **** 			else
2451:../Sources/ff10b/src/ff.c **** 				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2452:../Sources/ff10b/src/ff.c **** #endif
2453:../Sources/ff10b/src/ff.c **** 		}
2454:../Sources/ff10b/src/ff.c **** 		/* Create or Open a file */
2455:../Sources/ff10b/src/ff.c **** 		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 4682              		.loc 1 2455 0
 4683 1dfc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4684 1dfe 03F01C03 		and	r3, r3, #28
 4685 1e02 002B     		cmp	r3, #0
 4686 1e04 00F0A880 		beq	.L311
 4687              	.LBB6:
2456:../Sources/ff10b/src/ff.c **** 			DWORD dw, cl;
2457:../Sources/ff10b/src/ff.c **** 
2458:../Sources/ff10b/src/ff.c **** 			if (res != FR_OK) {					/* No file, create new */
 4688              		.loc 1 2458 0
 4689 1e08 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 4690 1e0c 002B     		cmp	r3, #0
 4691 1e0e 12D0     		beq	.L312
2459:../Sources/ff10b/src/ff.c **** 				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 4692              		.loc 1 2459 0
 4693 1e10 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 4694 1e14 042B     		cmp	r3, #4
 4695 1e16 07D1     		bne	.L313
2460:../Sources/ff10b/src/ff.c **** #if _FS_LOCK
2461:../Sources/ff10b/src/ff.c **** 					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
2462:../Sources/ff10b/src/ff.c **** #else
2463:../Sources/ff10b/src/ff.c **** 					res = dir_register(&dj);
 4696              		.loc 1 2463 0
 4697 1e18 07F11C03 		add	r3, r7, #28
 4698 1e1c 1846     		mov	r0, r3
 4699 1e1e FFF7BDF8 		bl	dir_register
 4700 1e22 0346     		mov	r3, r0
 4701 1e24 87F84730 		strb	r3, [r7, #71]
 4702              	.L313:
2464:../Sources/ff10b/src/ff.c **** #endif
2465:../Sources/ff10b/src/ff.c **** 				mode |= FA_CREATE_ALWAYS;		/* File is created */
 4703              		.loc 1 2465 0
 4704 1e28 FB79     		ldrb	r3, [r7, #7]
 4705 1e2a 43F00803 		orr	r3, r3, #8
 4706 1e2e FB71     		strb	r3, [r7, #7]
2466:../Sources/ff10b/src/ff.c **** 				dir = dj.dir;					/* New entry */
 4707              		.loc 1 2466 0
 4708 1e30 3B6B     		ldr	r3, [r7, #48]
 4709 1e32 3B64     		str	r3, [r7, #64]
 4710 1e34 15E0     		b	.L314
 4711              	.L312:
2467:../Sources/ff10b/src/ff.c **** 			}
2468:../Sources/ff10b/src/ff.c **** 			else {								/* Any object is already existing */
2469:../Sources/ff10b/src/ff.c **** 				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 4712              		.loc 1 2469 0
 4713 1e36 3B6C     		ldr	r3, [r7, #64]
 4714 1e38 03F10B03 		add	r3, r3, #11
 4715 1e3c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4716 1e3e 03F01103 		and	r3, r3, #17
 4717 1e42 002B     		cmp	r3, #0
 4718 1e44 04D0     		beq	.L315
2470:../Sources/ff10b/src/ff.c **** 					res = FR_DENIED;
 4719              		.loc 1 2470 0
 4720 1e46 4FF00703 		mov	r3, #7
 4721 1e4a 87F84730 		strb	r3, [r7, #71]
 4722 1e4e 08E0     		b	.L314
 4723              	.L315:
2471:../Sources/ff10b/src/ff.c **** 				} else {
2472:../Sources/ff10b/src/ff.c **** 					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 4724              		.loc 1 2472 0
 4725 1e50 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4726 1e52 03F00403 		and	r3, r3, #4
 4727 1e56 002B     		cmp	r3, #0
 4728 1e58 03D0     		beq	.L314
2473:../Sources/ff10b/src/ff.c **** 						res = FR_EXIST;
 4729              		.loc 1 2473 0
 4730 1e5a 4FF00803 		mov	r3, #8
 4731 1e5e 87F84730 		strb	r3, [r7, #71]
 4732              	.L314:
2474:../Sources/ff10b/src/ff.c **** 				}
2475:../Sources/ff10b/src/ff.c **** 			}
2476:../Sources/ff10b/src/ff.c **** 			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 4733              		.loc 1 2476 0
 4734 1e62 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 4735 1e66 002B     		cmp	r3, #0
 4736 1e68 40F09880 		bne	.L316
 4737              		.loc 1 2476 0 is_stmt 0 discriminator 1
 4738 1e6c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4739 1e6e 03F00803 		and	r3, r3, #8
 4740 1e72 002B     		cmp	r3, #0
 4741 1e74 00F09280 		beq	.L316
2477:../Sources/ff10b/src/ff.c **** 				dw = get_fattime();				/* Created time */
 4742              		.loc 1 2477 0 is_stmt 1
 4743 1e78 FFF7FEFF 		bl	get_fattime
 4744 1e7c F863     		str	r0, [r7, #60]
2478:../Sources/ff10b/src/ff.c **** 				ST_DWORD(dir+DIR_CrtTime, dw);
 4745              		.loc 1 2478 0
 4746 1e7e 3B6C     		ldr	r3, [r7, #64]
 4747 1e80 03F10E03 		add	r3, r3, #14
 4748 1e84 FA6B     		ldr	r2, [r7, #60]
 4749 1e86 D2B2     		uxtb	r2, r2
 4750 1e88 1A70     		strb	r2, [r3, #0]
 4751 1e8a 3B6C     		ldr	r3, [r7, #64]
 4752 1e8c 03F10F03 		add	r3, r3, #15
 4753 1e90 FA6B     		ldr	r2, [r7, #60]
 4754 1e92 92B2     		uxth	r2, r2
 4755 1e94 4FEA1222 		lsr	r2, r2, #8
 4756 1e98 92B2     		uxth	r2, r2
 4757 1e9a D2B2     		uxtb	r2, r2
 4758 1e9c 1A70     		strb	r2, [r3, #0]
 4759 1e9e 3B6C     		ldr	r3, [r7, #64]
 4760 1ea0 03F11003 		add	r3, r3, #16
 4761 1ea4 FA6B     		ldr	r2, [r7, #60]
 4762 1ea6 4FEA1242 		lsr	r2, r2, #16
 4763 1eaa D2B2     		uxtb	r2, r2
 4764 1eac 1A70     		strb	r2, [r3, #0]
 4765 1eae 3B6C     		ldr	r3, [r7, #64]
 4766 1eb0 03F11103 		add	r3, r3, #17
 4767 1eb4 FA6B     		ldr	r2, [r7, #60]
 4768 1eb6 4FEA1262 		lsr	r2, r2, #24
 4769 1eba D2B2     		uxtb	r2, r2
 4770 1ebc 1A70     		strb	r2, [r3, #0]
2479:../Sources/ff10b/src/ff.c **** 				dir[DIR_Attr] = 0;				/* Reset attribute */
 4771              		.loc 1 2479 0
 4772 1ebe 3B6C     		ldr	r3, [r7, #64]
 4773 1ec0 03F10B03 		add	r3, r3, #11
 4774 1ec4 4FF00002 		mov	r2, #0
 4775 1ec8 1A70     		strb	r2, [r3, #0]
2480:../Sources/ff10b/src/ff.c **** 				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
 4776              		.loc 1 2480 0
 4777 1eca 3B6C     		ldr	r3, [r7, #64]
 4778 1ecc 03F11C03 		add	r3, r3, #28
 4779 1ed0 4FF00002 		mov	r2, #0
 4780 1ed4 1A70     		strb	r2, [r3, #0]
 4781 1ed6 3B6C     		ldr	r3, [r7, #64]
 4782 1ed8 03F11D03 		add	r3, r3, #29
 4783 1edc 4FF00002 		mov	r2, #0
 4784 1ee0 1A70     		strb	r2, [r3, #0]
 4785 1ee2 3B6C     		ldr	r3, [r7, #64]
 4786 1ee4 03F11E03 		add	r3, r3, #30
 4787 1ee8 4FF00002 		mov	r2, #0
 4788 1eec 1A70     		strb	r2, [r3, #0]
 4789 1eee 3B6C     		ldr	r3, [r7, #64]
 4790 1ef0 03F11F03 		add	r3, r3, #31
 4791 1ef4 4FF00002 		mov	r2, #0
 4792 1ef8 1A70     		strb	r2, [r3, #0]
2481:../Sources/ff10b/src/ff.c **** 				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 4793              		.loc 1 2481 0
 4794 1efa FB69     		ldr	r3, [r7, #28]
 4795 1efc 1846     		mov	r0, r3
 4796 1efe 396C     		ldr	r1, [r7, #64]
 4797 1f00 FEF73CFF 		bl	ld_clust
 4798 1f04 B863     		str	r0, [r7, #56]
2482:../Sources/ff10b/src/ff.c **** 				st_clust(dir, 0);				/* cluster = 0 */
 4799              		.loc 1 2482 0
 4800 1f06 386C     		ldr	r0, [r7, #64]
 4801 1f08 4FF00001 		mov	r1, #0
 4802 1f0c FEF768FF 		bl	st_clust
2483:../Sources/ff10b/src/ff.c **** 				dj.fs->wflag = 1;
 4803              		.loc 1 2483 0
 4804 1f10 FB69     		ldr	r3, [r7, #28]
 4805 1f12 4FF00102 		mov	r2, #1
 4806 1f16 1A71     		strb	r2, [r3, #4]
2484:../Sources/ff10b/src/ff.c **** 				if (cl) {						/* Remove the cluster chain if exist */
 4807              		.loc 1 2484 0
 4808 1f18 BB6B     		ldr	r3, [r7, #56]
 4809 1f1a 002B     		cmp	r3, #0
 4810 1f1c 3ED0     		beq	.L316
2485:../Sources/ff10b/src/ff.c **** 					dw = dj.fs->winsect;
 4811              		.loc 1 2485 0
 4812 1f1e FB69     		ldr	r3, [r7, #28]
 4813 1f20 DB6A     		ldr	r3, [r3, #44]
 4814 1f22 FB63     		str	r3, [r7, #60]
2486:../Sources/ff10b/src/ff.c **** 					res = remove_chain(dj.fs, cl);
 4815              		.loc 1 2486 0
 4816 1f24 FB69     		ldr	r3, [r7, #28]
 4817 1f26 1846     		mov	r0, r3
 4818 1f28 B96B     		ldr	r1, [r7, #56]
 4819 1f2a FEF769FC 		bl	remove_chain
 4820 1f2e 0346     		mov	r3, r0
 4821 1f30 87F84730 		strb	r3, [r7, #71]
2487:../Sources/ff10b/src/ff.c **** 					if (res == FR_OK) {
 4822              		.loc 1 2487 0
 4823 1f34 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 4824 1f38 002B     		cmp	r3, #0
 4825 1f3a 2FD1     		bne	.L316
2488:../Sources/ff10b/src/ff.c **** 						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 4826              		.loc 1 2488 0
 4827 1f3c FB69     		ldr	r3, [r7, #28]
 4828 1f3e BA6B     		ldr	r2, [r7, #56]
 4829 1f40 02F1FF32 		add	r2, r2, #-1
 4830 1f44 DA60     		str	r2, [r3, #12]
2489:../Sources/ff10b/src/ff.c **** 						res = move_window(dj.fs, dw);
 4831              		.loc 1 2489 0
 4832 1f46 FB69     		ldr	r3, [r7, #28]
 4833 1f48 1846     		mov	r0, r3
 4834 1f4a F96B     		ldr	r1, [r7, #60]
 4835 1f4c FEF742F9 		bl	move_window
 4836 1f50 0346     		mov	r3, r0
 4837 1f52 87F84730 		strb	r3, [r7, #71]
 4838 1f56 21E0     		b	.L316
 4839              	.L311:
 4840              	.LBE6:
2490:../Sources/ff10b/src/ff.c **** 					}
2491:../Sources/ff10b/src/ff.c **** 				}
2492:../Sources/ff10b/src/ff.c **** 			}
2493:../Sources/ff10b/src/ff.c **** 		}
2494:../Sources/ff10b/src/ff.c **** 		else {	/* Open an existing file */
2495:../Sources/ff10b/src/ff.c **** 			if (res == FR_OK) {					/* Follow succeeded */
 4841              		.loc 1 2495 0
 4842 1f58 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 4843 1f5c 002B     		cmp	r3, #0
 4844 1f5e 1DD1     		bne	.L316
2496:../Sources/ff10b/src/ff.c **** 				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 4845              		.loc 1 2496 0
 4846 1f60 3B6C     		ldr	r3, [r7, #64]
 4847 1f62 03F10B03 		add	r3, r3, #11
 4848 1f66 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4849 1f68 03F01003 		and	r3, r3, #16
 4850 1f6c 002B     		cmp	r3, #0
 4851 1f6e 04D0     		beq	.L317
2497:../Sources/ff10b/src/ff.c **** 					res = FR_NO_FILE;
 4852              		.loc 1 2497 0
 4853 1f70 4FF00403 		mov	r3, #4
 4854 1f74 87F84730 		strb	r3, [r7, #71]
 4855 1f78 10E0     		b	.L316
 4856              	.L317:
2498:../Sources/ff10b/src/ff.c **** 				} else {
2499:../Sources/ff10b/src/ff.c **** 					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 4857              		.loc 1 2499 0
 4858 1f7a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4859 1f7c 03F00203 		and	r3, r3, #2
 4860 1f80 002B     		cmp	r3, #0
 4861 1f82 0BD0     		beq	.L316
 4862              		.loc 1 2499 0 is_stmt 0 discriminator 1
 4863 1f84 3B6C     		ldr	r3, [r7, #64]
 4864 1f86 03F10B03 		add	r3, r3, #11
 4865 1f8a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4866 1f8c 03F00103 		and	r3, r3, #1
 4867 1f90 002B     		cmp	r3, #0
 4868 1f92 03D0     		beq	.L316
2500:../Sources/ff10b/src/ff.c **** 						res = FR_DENIED;
 4869              		.loc 1 2500 0 is_stmt 1
 4870 1f94 4FF00703 		mov	r3, #7
 4871 1f98 87F84730 		strb	r3, [r7, #71]
 4872              	.L316:
2501:../Sources/ff10b/src/ff.c **** 				}
2502:../Sources/ff10b/src/ff.c **** 			}
2503:../Sources/ff10b/src/ff.c **** 		}
2504:../Sources/ff10b/src/ff.c **** 		if (res == FR_OK) {
 4873              		.loc 1 2504 0
 4874 1f9c 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 4875 1fa0 002B     		cmp	r3, #0
 4876 1fa2 0FD1     		bne	.L318
2505:../Sources/ff10b/src/ff.c **** 			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 4877              		.loc 1 2505 0
 4878 1fa4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4879 1fa6 03F00803 		and	r3, r3, #8
 4880 1faa 002B     		cmp	r3, #0
 4881 1fac 03D0     		beq	.L319
2506:../Sources/ff10b/src/ff.c **** 				mode |= FA__WRITTEN;
 4882              		.loc 1 2506 0
 4883 1fae FB79     		ldrb	r3, [r7, #7]
 4884 1fb0 43F02003 		orr	r3, r3, #32
 4885 1fb4 FB71     		strb	r3, [r7, #7]
 4886              	.L319:
2507:../Sources/ff10b/src/ff.c **** 			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 4887              		.loc 1 2507 0
 4888 1fb6 FB69     		ldr	r3, [r7, #28]
 4889 1fb8 DA6A     		ldr	r2, [r3, #44]
 4890 1fba FB68     		ldr	r3, [r7, #12]
 4891 1fbc DA61     		str	r2, [r3, #28]
2508:../Sources/ff10b/src/ff.c **** 			fp->dir_ptr = dir;
 4892              		.loc 1 2508 0
 4893 1fbe FB68     		ldr	r3, [r7, #12]
 4894 1fc0 3A6C     		ldr	r2, [r7, #64]
 4895 1fc2 1A62     		str	r2, [r3, #32]
 4896              	.L318:
2509:../Sources/ff10b/src/ff.c **** #if _FS_LOCK
2510:../Sources/ff10b/src/ff.c **** 			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2511:../Sources/ff10b/src/ff.c **** 			if (!fp->lockid) res = FR_INT_ERR;
2512:../Sources/ff10b/src/ff.c **** #endif
2513:../Sources/ff10b/src/ff.c **** 		}
2514:../Sources/ff10b/src/ff.c **** 
2515:../Sources/ff10b/src/ff.c **** #else				/* R/O configuration */
2516:../Sources/ff10b/src/ff.c **** 		if (res == FR_OK) {					/* Follow succeeded */
2517:../Sources/ff10b/src/ff.c **** 			dir = dj.dir;
2518:../Sources/ff10b/src/ff.c **** 			if (!dir) {						/* Current directory itself */
2519:../Sources/ff10b/src/ff.c **** 				res = FR_INVALID_NAME;
2520:../Sources/ff10b/src/ff.c **** 			} else {
2521:../Sources/ff10b/src/ff.c **** 				if (dir[DIR_Attr] & AM_DIR)	/* It is a directory */
2522:../Sources/ff10b/src/ff.c **** 					res = FR_NO_FILE;
2523:../Sources/ff10b/src/ff.c **** 			}
2524:../Sources/ff10b/src/ff.c **** 		}
2525:../Sources/ff10b/src/ff.c **** #endif
2526:../Sources/ff10b/src/ff.c **** 		FREE_BUF();
2527:../Sources/ff10b/src/ff.c **** 
2528:../Sources/ff10b/src/ff.c **** 		if (res == FR_OK) {
 4897              		.loc 1 2528 0
 4898 1fc4 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 4899 1fc8 002B     		cmp	r3, #0
 4900 1fca 39D1     		bne	.L309
2529:../Sources/ff10b/src/ff.c **** 			fp->flag = mode;					/* File access mode */
 4901              		.loc 1 2529 0
 4902 1fcc FB68     		ldr	r3, [r7, #12]
 4903 1fce FA79     		ldrb	r2, [r7, #7]
 4904 1fd0 9A71     		strb	r2, [r3, #6]
2530:../Sources/ff10b/src/ff.c **** 			fp->err = 0;						/* Clear error flag */
 4905              		.loc 1 2530 0
 4906 1fd2 FB68     		ldr	r3, [r7, #12]
 4907 1fd4 4FF00002 		mov	r2, #0
 4908 1fd8 DA71     		strb	r2, [r3, #7]
2531:../Sources/ff10b/src/ff.c **** 			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 4909              		.loc 1 2531 0
 4910 1fda FB69     		ldr	r3, [r7, #28]
 4911 1fdc 1846     		mov	r0, r3
 4912 1fde 396C     		ldr	r1, [r7, #64]
 4913 1fe0 FEF7CCFE 		bl	ld_clust
 4914 1fe4 0246     		mov	r2, r0
 4915 1fe6 FB68     		ldr	r3, [r7, #12]
 4916 1fe8 1A61     		str	r2, [r3, #16]
2532:../Sources/ff10b/src/ff.c **** 			fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 4917              		.loc 1 2532 0
 4918 1fea 3B6C     		ldr	r3, [r7, #64]
 4919 1fec 03F11F03 		add	r3, r3, #31
 4920 1ff0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4921 1ff2 4FEA0362 		lsl	r2, r3, #24
 4922 1ff6 3B6C     		ldr	r3, [r7, #64]
 4923 1ff8 03F11E03 		add	r3, r3, #30
 4924 1ffc 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4925 1ffe 4FEA0343 		lsl	r3, r3, #16
 4926 2002 1A43     		orrs	r2, r2, r3
 4927 2004 3B6C     		ldr	r3, [r7, #64]
 4928 2006 03F11D03 		add	r3, r3, #29
 4929 200a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4930 200c 4FEA0323 		lsl	r3, r3, #8
 4931 2010 1A43     		orrs	r2, r2, r3
 4932 2012 3B6C     		ldr	r3, [r7, #64]
 4933 2014 03F11C03 		add	r3, r3, #28
 4934 2018 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4935 201a 1A43     		orrs	r2, r2, r3
 4936 201c FB68     		ldr	r3, [r7, #12]
 4937 201e DA60     		str	r2, [r3, #12]
2533:../Sources/ff10b/src/ff.c **** 			fp->fptr = 0;						/* File pointer */
 4938              		.loc 1 2533 0
 4939 2020 FB68     		ldr	r3, [r7, #12]
 4940 2022 4FF00002 		mov	r2, #0
 4941 2026 9A60     		str	r2, [r3, #8]
2534:../Sources/ff10b/src/ff.c **** 			fp->dsect = 0;
 4942              		.loc 1 2534 0
 4943 2028 FB68     		ldr	r3, [r7, #12]
 4944 202a 4FF00002 		mov	r2, #0
 4945 202e 9A61     		str	r2, [r3, #24]
2535:../Sources/ff10b/src/ff.c **** #if _USE_FASTSEEK
2536:../Sources/ff10b/src/ff.c **** 			fp->cltbl = 0;						/* Normal seek mode */
2537:../Sources/ff10b/src/ff.c **** #endif
2538:../Sources/ff10b/src/ff.c **** 			fp->fs = dj.fs;	 					/* Validate file object */
 4946              		.loc 1 2538 0
 4947 2030 FA69     		ldr	r2, [r7, #28]
 4948 2032 FB68     		ldr	r3, [r7, #12]
 4949 2034 1A60     		str	r2, [r3, #0]
2539:../Sources/ff10b/src/ff.c **** 			fp->id = fp->fs->id;
 4950              		.loc 1 2539 0
 4951 2036 FB68     		ldr	r3, [r7, #12]
 4952 2038 1B68     		ldr	r3, [r3, #0]
 4953 203a DA88     		ldrh	r2, [r3, #6]
 4954 203c FB68     		ldr	r3, [r7, #12]
 4955 203e 9A80     		strh	r2, [r3, #4]	@ movhi
 4956              	.L309:
2540:../Sources/ff10b/src/ff.c **** 		}
2541:../Sources/ff10b/src/ff.c **** 	}
2542:../Sources/ff10b/src/ff.c **** 
2543:../Sources/ff10b/src/ff.c **** 	LEAVE_FF(dj.fs, res);
 4957              		.loc 1 2543 0
 4958 2040 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 4959              	.L320:
2544:../Sources/ff10b/src/ff.c **** }
 4960              		.loc 1 2544 0
 4961 2044 1846     		mov	r0, r3
 4962 2046 07F14807 		add	r7, r7, #72
 4963 204a BD46     		mov	sp, r7
 4964 204c 80BD     		pop	{r7, pc}
 4965              		.cfi_endproc
 4966              	.LFE30:
 4968 204e 00BF     		.align	2
 4969              		.global	f_read
 4970              		.thumb
 4971              		.thumb_func
 4973              	f_read:
 4974              	.LFB31:
2545:../Sources/ff10b/src/ff.c **** 
2546:../Sources/ff10b/src/ff.c **** 
2547:../Sources/ff10b/src/ff.c **** 
2548:../Sources/ff10b/src/ff.c **** 
2549:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
2550:../Sources/ff10b/src/ff.c **** /* Read File                                                             */
2551:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
2552:../Sources/ff10b/src/ff.c **** 
2553:../Sources/ff10b/src/ff.c **** FRESULT f_read (
2554:../Sources/ff10b/src/ff.c **** 	FIL* fp, 		/* Pointer to the file object */
2555:../Sources/ff10b/src/ff.c **** 	void* buff,		/* Pointer to data buffer */
2556:../Sources/ff10b/src/ff.c **** 	UINT btr,		/* Number of bytes to read */
2557:../Sources/ff10b/src/ff.c **** 	UINT* br		/* Pointer to number of bytes read */
2558:../Sources/ff10b/src/ff.c **** )
2559:../Sources/ff10b/src/ff.c **** {
 4975              		.loc 1 2559 0
 4976              		.cfi_startproc
 4977              		@ args = 0, pretend = 0, frame = 48
 4978              		@ frame_needed = 1, uses_anonymous_args = 0
 4979 2050 80B5     		push	{r7, lr}
 4980              	.LCFI92:
 4981              		.cfi_def_cfa_offset 8
 4982              		.cfi_offset 7, -8
 4983              		.cfi_offset 14, -4
 4984 2052 8CB0     		sub	sp, sp, #48
 4985              	.LCFI93:
 4986              		.cfi_def_cfa_offset 56
 4987 2054 00AF     		add	r7, sp, #0
 4988              	.LCFI94:
 4989              		.cfi_def_cfa_register 7
 4990 2056 F860     		str	r0, [r7, #12]
 4991 2058 B960     		str	r1, [r7, #8]
 4992 205a 7A60     		str	r2, [r7, #4]
 4993 205c 3B60     		str	r3, [r7, #0]
2560:../Sources/ff10b/src/ff.c **** 	FRESULT res;
2561:../Sources/ff10b/src/ff.c **** 	DWORD clst, sect, remain;
2562:../Sources/ff10b/src/ff.c **** 	UINT rcnt, cc;
2563:../Sources/ff10b/src/ff.c **** 	BYTE csect, *rbuff = (BYTE*)buff;
 4994              		.loc 1 2563 0
 4995 205e BB68     		ldr	r3, [r7, #8]
 4996 2060 3B62     		str	r3, [r7, #32]
2564:../Sources/ff10b/src/ff.c **** 
2565:../Sources/ff10b/src/ff.c **** 
2566:../Sources/ff10b/src/ff.c **** 	*br = 0;	/* Clear read byte counter */
 4997              		.loc 1 2566 0
 4998 2062 3B68     		ldr	r3, [r7, #0]
 4999 2064 4FF00002 		mov	r2, #0
 5000 2068 1A60     		str	r2, [r3, #0]
2567:../Sources/ff10b/src/ff.c **** 
2568:../Sources/ff10b/src/ff.c **** 	res = validate(fp);							/* Check validity */
 5001              		.loc 1 2568 0
 5002 206a F868     		ldr	r0, [r7, #12]
 5003 206c FFF702FE 		bl	validate
 5004 2070 0346     		mov	r3, r0
 5005 2072 FB77     		strb	r3, [r7, #31]
2569:../Sources/ff10b/src/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 5006              		.loc 1 2569 0
 5007 2074 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 5008 2076 002B     		cmp	r3, #0
 5009 2078 01D0     		beq	.L322
 5010              		.loc 1 2569 0 is_stmt 0 discriminator 1
 5011 207a FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 5012 207c 41E1     		b	.L323
 5013              	.L322:
2570:../Sources/ff10b/src/ff.c **** 	if (fp->err)								/* Check error */
 5014              		.loc 1 2570 0 is_stmt 1
 5015 207e FB68     		ldr	r3, [r7, #12]
 5016 2080 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 5017 2082 002B     		cmp	r3, #0
 5018 2084 02D0     		beq	.L324
2571:../Sources/ff10b/src/ff.c **** 		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 5019              		.loc 1 2571 0
 5020 2086 FB68     		ldr	r3, [r7, #12]
 5021 2088 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 5022 208a 3AE1     		b	.L323
 5023              	.L324:
2572:../Sources/ff10b/src/ff.c **** 	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 5024              		.loc 1 2572 0
 5025 208c FB68     		ldr	r3, [r7, #12]
 5026 208e 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 5027 2090 03F00103 		and	r3, r3, #1
 5028 2094 002B     		cmp	r3, #0
 5029 2096 02D1     		bne	.L325
2573:../Sources/ff10b/src/ff.c **** 		LEAVE_FF(fp->fs, FR_DENIED);
 5030              		.loc 1 2573 0
 5031 2098 4FF00703 		mov	r3, #7
 5032 209c 31E1     		b	.L323
 5033              	.L325:
2574:../Sources/ff10b/src/ff.c **** 	remain = fp->fsize - fp->fptr;
 5034              		.loc 1 2574 0
 5035 209e FB68     		ldr	r3, [r7, #12]
 5036 20a0 DA68     		ldr	r2, [r3, #12]
 5037 20a2 FB68     		ldr	r3, [r7, #12]
 5038 20a4 9B68     		ldr	r3, [r3, #8]
 5039 20a6 D31A     		subs	r3, r2, r3
 5040 20a8 BB61     		str	r3, [r7, #24]
2575:../Sources/ff10b/src/ff.c **** 	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 5041              		.loc 1 2575 0
 5042 20aa 7A68     		ldr	r2, [r7, #4]
 5043 20ac BB69     		ldr	r3, [r7, #24]
 5044 20ae 9A42     		cmp	r2, r3
 5045 20b0 40F22181 		bls	.L327
 5046              		.loc 1 2575 0 is_stmt 0 discriminator 1
 5047 20b4 BB69     		ldr	r3, [r7, #24]
 5048 20b6 7B60     		str	r3, [r7, #4]
2576:../Sources/ff10b/src/ff.c **** 
2577:../Sources/ff10b/src/ff.c **** 	for ( ;  btr;								/* Repeat until all data read */
 5049              		.loc 1 2577 0 is_stmt 1 discriminator 1
 5050 20b8 1DE1     		b	.L327
 5051              	.L344:
2578:../Sources/ff10b/src/ff.c **** 		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
2579:../Sources/ff10b/src/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 5052              		.loc 1 2579 0
 5053 20ba FB68     		ldr	r3, [r7, #12]
 5054 20bc 9B68     		ldr	r3, [r3, #8]
 5055 20be 4FEAC353 		lsl	r3, r3, #23
 5056 20c2 4FEAD353 		lsr	r3, r3, #23
 5057 20c6 002B     		cmp	r3, #0
 5058 20c8 40F0E180 		bne	.L328
2580:../Sources/ff10b/src/ff.c **** 			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 5059              		.loc 1 2580 0
 5060 20cc FB68     		ldr	r3, [r7, #12]
 5061 20ce 9B68     		ldr	r3, [r3, #8]
 5062 20d0 4FEA5323 		lsr	r3, r3, #9
 5063 20d4 DAB2     		uxtb	r2, r3
 5064 20d6 FB68     		ldr	r3, [r7, #12]
 5065 20d8 1B68     		ldr	r3, [r3, #0]
 5066 20da 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 5067 20dc 03F1FF33 		add	r3, r3, #-1
 5068 20e0 DBB2     		uxtb	r3, r3
 5069 20e2 1340     		ands	r3, r3, r2
 5070 20e4 FB75     		strb	r3, [r7, #23]
2581:../Sources/ff10b/src/ff.c **** 			if (!csect) {						/* On the cluster boundary? */
 5071              		.loc 1 2581 0
 5072 20e6 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 5073 20e8 002B     		cmp	r3, #0
 5074 20ea 28D1     		bne	.L329
2582:../Sources/ff10b/src/ff.c **** 				if (fp->fptr == 0) {			/* On the top of the file? */
 5075              		.loc 1 2582 0
 5076 20ec FB68     		ldr	r3, [r7, #12]
 5077 20ee 9B68     		ldr	r3, [r3, #8]
 5078 20f0 002B     		cmp	r3, #0
 5079 20f2 03D1     		bne	.L330
2583:../Sources/ff10b/src/ff.c **** 					clst = fp->sclust;			/* Follow from the origin */
 5080              		.loc 1 2583 0
 5081 20f4 FB68     		ldr	r3, [r7, #12]
 5082 20f6 1B69     		ldr	r3, [r3, #16]
 5083 20f8 FB62     		str	r3, [r7, #44]
 5084 20fa 08E0     		b	.L331
 5085              	.L330:
2584:../Sources/ff10b/src/ff.c **** 				} else {						/* Middle or end of the file */
2585:../Sources/ff10b/src/ff.c **** #if _USE_FASTSEEK
2586:../Sources/ff10b/src/ff.c **** 					if (fp->cltbl)
2587:../Sources/ff10b/src/ff.c **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
2588:../Sources/ff10b/src/ff.c **** 					else
2589:../Sources/ff10b/src/ff.c **** #endif
2590:../Sources/ff10b/src/ff.c **** 						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 5086              		.loc 1 2590 0
 5087 20fc FB68     		ldr	r3, [r7, #12]
 5088 20fe 1A68     		ldr	r2, [r3, #0]
 5089 2100 FB68     		ldr	r3, [r7, #12]
 5090 2102 5B69     		ldr	r3, [r3, #20]
 5091 2104 1046     		mov	r0, r2
 5092 2106 1946     		mov	r1, r3
 5093 2108 FFF7FEFF 		bl	get_fat
 5094 210c F862     		str	r0, [r7, #44]
 5095              	.L331:
2591:../Sources/ff10b/src/ff.c **** 				}
2592:../Sources/ff10b/src/ff.c **** 				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 5096              		.loc 1 2592 0
 5097 210e FB6A     		ldr	r3, [r7, #44]
 5098 2110 012B     		cmp	r3, #1
 5099 2112 06D8     		bhi	.L332
 5100              		.loc 1 2592 0 is_stmt 0 discriminator 1
 5101 2114 FB68     		ldr	r3, [r7, #12]
 5102 2116 4FF00202 		mov	r2, #2
 5103 211a DA71     		strb	r2, [r3, #7]
 5104 211c 4FF00203 		mov	r3, #2
 5105 2120 EFE0     		b	.L323
 5106              	.L332:
2593:../Sources/ff10b/src/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 5107              		.loc 1 2593 0 is_stmt 1
 5108 2122 FB6A     		ldr	r3, [r7, #44]
 5109 2124 B3F1FF3F 		cmp	r3, #-1
 5110 2128 06D1     		bne	.L333
 5111              		.loc 1 2593 0 is_stmt 0 discriminator 1
 5112 212a FB68     		ldr	r3, [r7, #12]
 5113 212c 4FF00102 		mov	r2, #1
 5114 2130 DA71     		strb	r2, [r3, #7]
 5115 2132 4FF00103 		mov	r3, #1
 5116 2136 E4E0     		b	.L323
 5117              	.L333:
2594:../Sources/ff10b/src/ff.c **** 				fp->clust = clst;				/* Update current cluster */
 5118              		.loc 1 2594 0 is_stmt 1
 5119 2138 FB68     		ldr	r3, [r7, #12]
 5120 213a FA6A     		ldr	r2, [r7, #44]
 5121 213c 5A61     		str	r2, [r3, #20]
 5122              	.L329:
2595:../Sources/ff10b/src/ff.c **** 			}
2596:../Sources/ff10b/src/ff.c **** 			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 5123              		.loc 1 2596 0
 5124 213e FB68     		ldr	r3, [r7, #12]
 5125 2140 1A68     		ldr	r2, [r3, #0]
 5126 2142 FB68     		ldr	r3, [r7, #12]
 5127 2144 5B69     		ldr	r3, [r3, #20]
 5128 2146 1046     		mov	r0, r2
 5129 2148 1946     		mov	r1, r3
 5130 214a FFF7FEFF 		bl	clust2sect
 5131 214e 3861     		str	r0, [r7, #16]
2597:../Sources/ff10b/src/ff.c **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 5132              		.loc 1 2597 0
 5133 2150 3B69     		ldr	r3, [r7, #16]
 5134 2152 002B     		cmp	r3, #0
 5135 2154 06D1     		bne	.L334
 5136              		.loc 1 2597 0 is_stmt 0 discriminator 1
 5137 2156 FB68     		ldr	r3, [r7, #12]
 5138 2158 4FF00202 		mov	r2, #2
 5139 215c DA71     		strb	r2, [r3, #7]
 5140 215e 4FF00203 		mov	r3, #2
 5141 2162 CEE0     		b	.L323
 5142              	.L334:
2598:../Sources/ff10b/src/ff.c **** 			sect += csect;
 5143              		.loc 1 2598 0 is_stmt 1
 5144 2164 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 5145 2166 3A69     		ldr	r2, [r7, #16]
 5146 2168 D318     		adds	r3, r2, r3
 5147 216a 3B61     		str	r3, [r7, #16]
2599:../Sources/ff10b/src/ff.c **** 			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 5148              		.loc 1 2599 0
 5149 216c 7B68     		ldr	r3, [r7, #4]
 5150 216e 4FEA5323 		lsr	r3, r3, #9
 5151 2172 7B62     		str	r3, [r7, #36]
2600:../Sources/ff10b/src/ff.c **** 			if (cc) {							/* Read maximum contiguous sectors directly */
 5152              		.loc 1 2600 0
 5153 2174 7B6A     		ldr	r3, [r7, #36]
 5154 2176 002B     		cmp	r3, #0
 5155 2178 44D0     		beq	.L335
2601:../Sources/ff10b/src/ff.c **** 				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 5156              		.loc 1 2601 0
 5157 217a FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 5158 217c 7B6A     		ldr	r3, [r7, #36]
 5159 217e D218     		adds	r2, r2, r3
 5160 2180 FB68     		ldr	r3, [r7, #12]
 5161 2182 1B68     		ldr	r3, [r3, #0]
 5162 2184 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 5163 2186 9A42     		cmp	r2, r3
 5164 2188 06D9     		bls	.L336
2602:../Sources/ff10b/src/ff.c **** 					cc = fp->fs->csize - csect;
 5165              		.loc 1 2602 0
 5166 218a FB68     		ldr	r3, [r7, #12]
 5167 218c 1B68     		ldr	r3, [r3, #0]
 5168 218e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 5169 2190 1A46     		mov	r2, r3
 5170 2192 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 5171 2194 D31A     		subs	r3, r2, r3
 5172 2196 7B62     		str	r3, [r7, #36]
 5173              	.L336:
2603:../Sources/ff10b/src/ff.c **** 				if (disk_read(fp->fs->drv, rbuff, sect, cc))
 5174              		.loc 1 2603 0
 5175 2198 FB68     		ldr	r3, [r7, #12]
 5176 219a 1B68     		ldr	r3, [r3, #0]
 5177 219c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 5178 219e 1846     		mov	r0, r3
 5179 21a0 396A     		ldr	r1, [r7, #32]
 5180 21a2 3A69     		ldr	r2, [r7, #16]
 5181 21a4 7B6A     		ldr	r3, [r7, #36]
 5182 21a6 FFF7FEFF 		bl	disk_read
 5183 21aa 0346     		mov	r3, r0
 5184 21ac 002B     		cmp	r3, #0
 5185 21ae 06D0     		beq	.L337
2604:../Sources/ff10b/src/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 5186              		.loc 1 2604 0
 5187 21b0 FB68     		ldr	r3, [r7, #12]
 5188 21b2 4FF00102 		mov	r2, #1
 5189 21b6 DA71     		strb	r2, [r3, #7]
 5190 21b8 4FF00103 		mov	r3, #1
 5191 21bc A1E0     		b	.L323
 5192              	.L337:
2605:../Sources/ff10b/src/ff.c **** #if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it 
2606:../Sources/ff10b/src/ff.c **** #if _FS_TINY
2607:../Sources/ff10b/src/ff.c **** 				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
2608:../Sources/ff10b/src/ff.c **** 					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
2609:../Sources/ff10b/src/ff.c **** #else
2610:../Sources/ff10b/src/ff.c **** 				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 5193              		.loc 1 2610 0
 5194 21be FB68     		ldr	r3, [r7, #12]
 5195 21c0 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 5196 21c2 03F04003 		and	r3, r3, #64
 5197 21c6 002B     		cmp	r3, #0
 5198 21c8 17D0     		beq	.L338
 5199              		.loc 1 2610 0 is_stmt 0 discriminator 1
 5200 21ca FB68     		ldr	r3, [r7, #12]
 5201 21cc 9A69     		ldr	r2, [r3, #24]
 5202 21ce 3B69     		ldr	r3, [r7, #16]
 5203 21d0 D21A     		subs	r2, r2, r3
 5204 21d2 7B6A     		ldr	r3, [r7, #36]
 5205 21d4 9A42     		cmp	r2, r3
 5206 21d6 10D2     		bcs	.L338
2611:../Sources/ff10b/src/ff.c **** 					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
 5207              		.loc 1 2611 0 is_stmt 1
 5208 21d8 FB68     		ldr	r3, [r7, #12]
 5209 21da 9A69     		ldr	r2, [r3, #24]
 5210 21dc 3B69     		ldr	r3, [r7, #16]
 5211 21de D31A     		subs	r3, r2, r3
 5212 21e0 4FEA4323 		lsl	r3, r3, #9
 5213 21e4 3A6A     		ldr	r2, [r7, #32]
 5214 21e6 D218     		adds	r2, r2, r3
 5215 21e8 FB68     		ldr	r3, [r7, #12]
 5216 21ea 03F12403 		add	r3, r3, #36
 5217 21ee 1046     		mov	r0, r2
 5218 21f0 1946     		mov	r1, r3
 5219 21f2 4FF40072 		mov	r2, #512
 5220 21f6 FDF703FF 		bl	mem_cpy
 5221              	.L338:
2612:../Sources/ff10b/src/ff.c **** #endif
2613:../Sources/ff10b/src/ff.c **** #endif
2614:../Sources/ff10b/src/ff.c **** 				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 5222              		.loc 1 2614 0
 5223 21fa 7B6A     		ldr	r3, [r7, #36]
 5224 21fc 4FEA4323 		lsl	r3, r3, #9
 5225 2200 BB62     		str	r3, [r7, #40]
2615:../Sources/ff10b/src/ff.c **** 				continue;
 5226              		.loc 1 2615 0
 5227 2202 64E0     		b	.L339
 5228              	.L335:
2616:../Sources/ff10b/src/ff.c **** 			}
2617:../Sources/ff10b/src/ff.c **** #if !_FS_TINY
2618:../Sources/ff10b/src/ff.c **** 			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 5229              		.loc 1 2618 0
 5230 2204 FB68     		ldr	r3, [r7, #12]
 5231 2206 9A69     		ldr	r2, [r3, #24]
 5232 2208 3B69     		ldr	r3, [r7, #16]
 5233 220a 9A42     		cmp	r2, r3
 5234 220c 3CD0     		beq	.L340
2619:../Sources/ff10b/src/ff.c **** #if !_FS_READONLY
2620:../Sources/ff10b/src/ff.c **** 				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 5235              		.loc 1 2620 0
 5236 220e FB68     		ldr	r3, [r7, #12]
 5237 2210 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 5238 2212 03F04003 		and	r3, r3, #64
 5239 2216 002B     		cmp	r3, #0
 5240 2218 1FD0     		beq	.L341
2621:../Sources/ff10b/src/ff.c **** 					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1))
 5241              		.loc 1 2621 0
 5242 221a FB68     		ldr	r3, [r7, #12]
 5243 221c 1B68     		ldr	r3, [r3, #0]
 5244 221e 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
 5245 2220 FB68     		ldr	r3, [r7, #12]
 5246 2222 03F12402 		add	r2, r3, #36
 5247 2226 FB68     		ldr	r3, [r7, #12]
 5248 2228 9B69     		ldr	r3, [r3, #24]
 5249 222a 0846     		mov	r0, r1
 5250 222c 1146     		mov	r1, r2
 5251 222e 1A46     		mov	r2, r3
 5252 2230 4FF00103 		mov	r3, #1
 5253 2234 FFF7FEFF 		bl	disk_write
 5254 2238 0346     		mov	r3, r0
 5255 223a 002B     		cmp	r3, #0
 5256 223c 06D0     		beq	.L342
2622:../Sources/ff10b/src/ff.c **** 						ABORT(fp->fs, FR_DISK_ERR);
 5257              		.loc 1 2622 0
 5258 223e FB68     		ldr	r3, [r7, #12]
 5259 2240 4FF00102 		mov	r2, #1
 5260 2244 DA71     		strb	r2, [r3, #7]
 5261 2246 4FF00103 		mov	r3, #1
 5262 224a 5AE0     		b	.L323
 5263              	.L342:
2623:../Sources/ff10b/src/ff.c **** 					fp->flag &= ~FA__DIRTY;
 5264              		.loc 1 2623 0
 5265 224c FB68     		ldr	r3, [r7, #12]
 5266 224e 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 5267 2250 23F04003 		bic	r3, r3, #64
 5268 2254 DAB2     		uxtb	r2, r3
 5269 2256 FB68     		ldr	r3, [r7, #12]
 5270 2258 9A71     		strb	r2, [r3, #6]
 5271              	.L341:
2624:../Sources/ff10b/src/ff.c **** 				}
2625:../Sources/ff10b/src/ff.c **** #endif
2626:../Sources/ff10b/src/ff.c **** 				if (disk_read(fp->fs->drv, fp->buf, sect, 1))	/* Fill sector cache */
 5272              		.loc 1 2626 0
 5273 225a FB68     		ldr	r3, [r7, #12]
 5274 225c 1B68     		ldr	r3, [r3, #0]
 5275 225e 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 5276 2260 FB68     		ldr	r3, [r7, #12]
 5277 2262 03F12403 		add	r3, r3, #36
 5278 2266 1046     		mov	r0, r2
 5279 2268 1946     		mov	r1, r3
 5280 226a 3A69     		ldr	r2, [r7, #16]
 5281 226c 4FF00103 		mov	r3, #1
 5282 2270 FFF7FEFF 		bl	disk_read
 5283 2274 0346     		mov	r3, r0
 5284 2276 002B     		cmp	r3, #0
 5285 2278 06D0     		beq	.L340
2627:../Sources/ff10b/src/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 5286              		.loc 1 2627 0
 5287 227a FB68     		ldr	r3, [r7, #12]
 5288 227c 4FF00102 		mov	r2, #1
 5289 2280 DA71     		strb	r2, [r3, #7]
 5290 2282 4FF00103 		mov	r3, #1
 5291 2286 3CE0     		b	.L323
 5292              	.L340:
2628:../Sources/ff10b/src/ff.c **** 			}
2629:../Sources/ff10b/src/ff.c **** #endif
2630:../Sources/ff10b/src/ff.c **** 			fp->dsect = sect;
 5293              		.loc 1 2630 0
 5294 2288 FB68     		ldr	r3, [r7, #12]
 5295 228a 3A69     		ldr	r2, [r7, #16]
 5296 228c 9A61     		str	r2, [r3, #24]
 5297              	.L328:
2631:../Sources/ff10b/src/ff.c **** 		}
2632:../Sources/ff10b/src/ff.c **** 		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer 
 5298              		.loc 1 2632 0
 5299 228e FB68     		ldr	r3, [r7, #12]
 5300 2290 9B68     		ldr	r3, [r3, #8]
 5301 2292 4FEAC353 		lsl	r3, r3, #23
 5302 2296 4FEAD353 		lsr	r3, r3, #23
 5303 229a C3F50073 		rsb	r3, r3, #512
 5304 229e BB62     		str	r3, [r7, #40]
2633:../Sources/ff10b/src/ff.c **** 		if (rcnt > btr) rcnt = btr;
 5305              		.loc 1 2633 0
 5306 22a0 BA6A     		ldr	r2, [r7, #40]
 5307 22a2 7B68     		ldr	r3, [r7, #4]
 5308 22a4 9A42     		cmp	r2, r3
 5309 22a6 01D9     		bls	.L343
 5310              		.loc 1 2633 0 is_stmt 0 discriminator 1
 5311 22a8 7B68     		ldr	r3, [r7, #4]
 5312 22aa BB62     		str	r3, [r7, #40]
 5313              	.L343:
2634:../Sources/ff10b/src/ff.c **** #if _FS_TINY
2635:../Sources/ff10b/src/ff.c **** 		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
2636:../Sources/ff10b/src/ff.c **** 			ABORT(fp->fs, FR_DISK_ERR);
2637:../Sources/ff10b/src/ff.c **** 		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
2638:../Sources/ff10b/src/ff.c **** #else
2639:../Sources/ff10b/src/ff.c **** 		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 5314              		.loc 1 2639 0 is_stmt 1
 5315 22ac FB68     		ldr	r3, [r7, #12]
 5316 22ae 9B68     		ldr	r3, [r3, #8]
 5317 22b0 4FEAC353 		lsl	r3, r3, #23
 5318 22b4 4FEAD353 		lsr	r3, r3, #23
 5319 22b8 03F12003 		add	r3, r3, #32
 5320 22bc FA68     		ldr	r2, [r7, #12]
 5321 22be D318     		adds	r3, r2, r3
 5322 22c0 03F10403 		add	r3, r3, #4
 5323 22c4 386A     		ldr	r0, [r7, #32]
 5324 22c6 1946     		mov	r1, r3
 5325 22c8 BA6A     		ldr	r2, [r7, #40]
 5326 22ca FDF799FE 		bl	mem_cpy
 5327              	.L339:
2578:../Sources/ff10b/src/ff.c **** 		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 5328              		.loc 1 2578 0
 5329 22ce 3A6A     		ldr	r2, [r7, #32]
 5330 22d0 BB6A     		ldr	r3, [r7, #40]
 5331 22d2 D318     		adds	r3, r2, r3
 5332 22d4 3B62     		str	r3, [r7, #32]
 5333 22d6 FB68     		ldr	r3, [r7, #12]
 5334 22d8 9A68     		ldr	r2, [r3, #8]
 5335 22da BB6A     		ldr	r3, [r7, #40]
 5336 22dc D218     		adds	r2, r2, r3
 5337 22de FB68     		ldr	r3, [r7, #12]
 5338 22e0 9A60     		str	r2, [r3, #8]
 5339 22e2 3B68     		ldr	r3, [r7, #0]
 5340 22e4 1A68     		ldr	r2, [r3, #0]
 5341 22e6 BB6A     		ldr	r3, [r7, #40]
 5342 22e8 D218     		adds	r2, r2, r3
 5343 22ea 3B68     		ldr	r3, [r7, #0]
 5344 22ec 1A60     		str	r2, [r3, #0]
 5345 22ee 7A68     		ldr	r2, [r7, #4]
 5346 22f0 BB6A     		ldr	r3, [r7, #40]
 5347 22f2 D31A     		subs	r3, r2, r3
 5348 22f4 7B60     		str	r3, [r7, #4]
 5349              	.L327:
2577:../Sources/ff10b/src/ff.c **** 	for ( ;  btr;								/* Repeat until all data read */
 5350              		.loc 1 2577 0 discriminator 1
 5351 22f6 7B68     		ldr	r3, [r7, #4]
 5352 22f8 002B     		cmp	r3, #0
 5353 22fa 7FF4DEAE 		bne	.L344
2640:../Sources/ff10b/src/ff.c **** #endif
2641:../Sources/ff10b/src/ff.c **** 	}
2642:../Sources/ff10b/src/ff.c **** 
2643:../Sources/ff10b/src/ff.c **** 	LEAVE_FF(fp->fs, FR_OK);
 5354              		.loc 1 2643 0
 5355 22fe 4FF00003 		mov	r3, #0
 5356              	.L323:
2644:../Sources/ff10b/src/ff.c **** }
 5357              		.loc 1 2644 0
 5358 2302 1846     		mov	r0, r3
 5359 2304 07F13007 		add	r7, r7, #48
 5360 2308 BD46     		mov	sp, r7
 5361 230a 80BD     		pop	{r7, pc}
 5362              		.cfi_endproc
 5363              	.LFE31:
 5365              		.align	2
 5366              		.global	f_write
 5367              		.thumb
 5368              		.thumb_func
 5370              	f_write:
 5371              	.LFB32:
2645:../Sources/ff10b/src/ff.c **** 
2646:../Sources/ff10b/src/ff.c **** 
2647:../Sources/ff10b/src/ff.c **** 
2648:../Sources/ff10b/src/ff.c **** 
2649:../Sources/ff10b/src/ff.c **** #if !_FS_READONLY
2650:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
2651:../Sources/ff10b/src/ff.c **** /* Write File                                                            */
2652:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
2653:../Sources/ff10b/src/ff.c **** 
2654:../Sources/ff10b/src/ff.c **** FRESULT f_write (
2655:../Sources/ff10b/src/ff.c **** 	FIL* fp,			/* Pointer to the file object */
2656:../Sources/ff10b/src/ff.c **** 	const void *buff,	/* Pointer to the data to be written */
2657:../Sources/ff10b/src/ff.c **** 	UINT btw,			/* Number of bytes to write */
2658:../Sources/ff10b/src/ff.c **** 	UINT* bw			/* Pointer to number of bytes written */
2659:../Sources/ff10b/src/ff.c **** )
2660:../Sources/ff10b/src/ff.c **** {
 5372              		.loc 1 2660 0
 5373              		.cfi_startproc
 5374              		@ args = 0, pretend = 0, frame = 40
 5375              		@ frame_needed = 1, uses_anonymous_args = 0
 5376 230c 80B5     		push	{r7, lr}
 5377              	.LCFI95:
 5378              		.cfi_def_cfa_offset 8
 5379              		.cfi_offset 7, -8
 5380              		.cfi_offset 14, -4
 5381 230e 8AB0     		sub	sp, sp, #40
 5382              	.LCFI96:
 5383              		.cfi_def_cfa_offset 48
 5384 2310 00AF     		add	r7, sp, #0
 5385              	.LCFI97:
 5386              		.cfi_def_cfa_register 7
 5387 2312 F860     		str	r0, [r7, #12]
 5388 2314 B960     		str	r1, [r7, #8]
 5389 2316 7A60     		str	r2, [r7, #4]
 5390 2318 3B60     		str	r3, [r7, #0]
2661:../Sources/ff10b/src/ff.c **** 	FRESULT res;
2662:../Sources/ff10b/src/ff.c **** 	DWORD clst, sect;
2663:../Sources/ff10b/src/ff.c **** 	UINT wcnt, cc;
2664:../Sources/ff10b/src/ff.c **** 	const BYTE *wbuff = (const BYTE*)buff;
 5391              		.loc 1 2664 0
 5392 231a BB68     		ldr	r3, [r7, #8]
 5393 231c BB61     		str	r3, [r7, #24]
2665:../Sources/ff10b/src/ff.c **** 	BYTE csect;
2666:../Sources/ff10b/src/ff.c **** 
2667:../Sources/ff10b/src/ff.c **** 
2668:../Sources/ff10b/src/ff.c **** 	*bw = 0;	/* Clear write byte counter */
 5394              		.loc 1 2668 0
 5395 231e 3B68     		ldr	r3, [r7, #0]
 5396 2320 4FF00002 		mov	r2, #0
 5397 2324 1A60     		str	r2, [r3, #0]
2669:../Sources/ff10b/src/ff.c **** 
2670:../Sources/ff10b/src/ff.c **** 	res = validate(fp);						/* Check validity */
 5398              		.loc 1 2670 0
 5399 2326 F868     		ldr	r0, [r7, #12]
 5400 2328 FFF7A4FC 		bl	validate
 5401 232c 0346     		mov	r3, r0
 5402 232e FB75     		strb	r3, [r7, #23]
2671:../Sources/ff10b/src/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 5403              		.loc 1 2671 0
 5404 2330 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 5405 2332 002B     		cmp	r3, #0
 5406 2334 01D0     		beq	.L346
 5407              		.loc 1 2671 0 is_stmt 0 discriminator 1
 5408 2336 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 5409 2338 77E1     		b	.L347
 5410              	.L346:
2672:../Sources/ff10b/src/ff.c **** 	if (fp->err)							/* Check error */
 5411              		.loc 1 2672 0 is_stmt 1
 5412 233a FB68     		ldr	r3, [r7, #12]
 5413 233c DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 5414 233e 002B     		cmp	r3, #0
 5415 2340 02D0     		beq	.L348
2673:../Sources/ff10b/src/ff.c **** 		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 5416              		.loc 1 2673 0
 5417 2342 FB68     		ldr	r3, [r7, #12]
 5418 2344 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 5419 2346 70E1     		b	.L347
 5420              	.L348:
2674:../Sources/ff10b/src/ff.c **** 	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 5421              		.loc 1 2674 0
 5422 2348 FB68     		ldr	r3, [r7, #12]
 5423 234a 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 5424 234c 03F00203 		and	r3, r3, #2
 5425 2350 002B     		cmp	r3, #0
 5426 2352 02D1     		bne	.L349
2675:../Sources/ff10b/src/ff.c **** 		LEAVE_FF(fp->fs, FR_DENIED);
 5427              		.loc 1 2675 0
 5428 2354 4FF00703 		mov	r3, #7
 5429 2358 67E1     		b	.L347
 5430              	.L349:
2676:../Sources/ff10b/src/ff.c **** 	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 5431              		.loc 1 2676 0
 5432 235a FB68     		ldr	r3, [r7, #12]
 5433 235c 9A68     		ldr	r2, [r3, #8]
 5434 235e 7B68     		ldr	r3, [r7, #4]
 5435 2360 D218     		adds	r2, r2, r3
 5436 2362 FB68     		ldr	r3, [r7, #12]
 5437 2364 9B68     		ldr	r3, [r3, #8]
 5438 2366 9A42     		cmp	r2, r3
 5439 2368 80F04681 		bcs	.L351
 5440              		.loc 1 2676 0 is_stmt 0 discriminator 1
 5441 236c 4FF00003 		mov	r3, #0
 5442 2370 7B60     		str	r3, [r7, #4]
2677:../Sources/ff10b/src/ff.c **** 
2678:../Sources/ff10b/src/ff.c **** 	for ( ;  btw;							/* Repeat until all data written */
 5443              		.loc 1 2678 0 is_stmt 1 discriminator 1
 5444 2372 41E1     		b	.L351
 5445              	.L370:
2679:../Sources/ff10b/src/ff.c **** 		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
2680:../Sources/ff10b/src/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 5446              		.loc 1 2680 0
 5447 2374 FB68     		ldr	r3, [r7, #12]
 5448 2376 9B68     		ldr	r3, [r3, #8]
 5449 2378 4FEAC353 		lsl	r3, r3, #23
 5450 237c 4FEAD353 		lsr	r3, r3, #23
 5451 2380 002B     		cmp	r3, #0
 5452 2382 40F0FE80 		bne	.L352
2681:../Sources/ff10b/src/ff.c **** 			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 5453              		.loc 1 2681 0
 5454 2386 FB68     		ldr	r3, [r7, #12]
 5455 2388 9B68     		ldr	r3, [r3, #8]
 5456 238a 4FEA5323 		lsr	r3, r3, #9
 5457 238e DAB2     		uxtb	r2, r3
 5458 2390 FB68     		ldr	r3, [r7, #12]
 5459 2392 1B68     		ldr	r3, [r3, #0]
 5460 2394 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 5461 2396 03F1FF33 		add	r3, r3, #-1
 5462 239a DBB2     		uxtb	r3, r3
 5463 239c 1340     		ands	r3, r3, r2
 5464 239e BB75     		strb	r3, [r7, #22]
2682:../Sources/ff10b/src/ff.c **** 			if (!csect) {					/* On the cluster boundary? */
 5465              		.loc 1 2682 0
 5466 23a0 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 5467 23a2 002B     		cmp	r3, #0
 5468 23a4 3ED1     		bne	.L353
2683:../Sources/ff10b/src/ff.c **** 				if (fp->fptr == 0) {		/* On the top of the file? */
 5469              		.loc 1 2683 0
 5470 23a6 FB68     		ldr	r3, [r7, #12]
 5471 23a8 9B68     		ldr	r3, [r3, #8]
 5472 23aa 002B     		cmp	r3, #0
 5473 23ac 0ED1     		bne	.L354
2684:../Sources/ff10b/src/ff.c **** 					clst = fp->sclust;		/* Follow from the origin */
 5474              		.loc 1 2684 0
 5475 23ae FB68     		ldr	r3, [r7, #12]
 5476 23b0 1B69     		ldr	r3, [r3, #16]
 5477 23b2 7B62     		str	r3, [r7, #36]
2685:../Sources/ff10b/src/ff.c **** 					if (clst == 0)			/* When no cluster is allocated, */
 5478              		.loc 1 2685 0
 5479 23b4 7B6A     		ldr	r3, [r7, #36]
 5480 23b6 002B     		cmp	r3, #0
 5481 23b8 11D1     		bne	.L355
2686:../Sources/ff10b/src/ff.c **** 						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 5482              		.loc 1 2686 0
 5483 23ba FB68     		ldr	r3, [r7, #12]
 5484 23bc 1B68     		ldr	r3, [r3, #0]
 5485 23be 1846     		mov	r0, r3
 5486 23c0 4FF00001 		mov	r1, #0
 5487 23c4 FEF776FA 		bl	create_chain
 5488 23c8 7862     		str	r0, [r7, #36]
 5489 23ca 08E0     		b	.L355
 5490              	.L354:
2687:../Sources/ff10b/src/ff.c **** 				} else {					/* Middle or end of the file */
2688:../Sources/ff10b/src/ff.c **** #if _USE_FASTSEEK
2689:../Sources/ff10b/src/ff.c **** 					if (fp->cltbl)
2690:../Sources/ff10b/src/ff.c **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
2691:../Sources/ff10b/src/ff.c **** 					else
2692:../Sources/ff10b/src/ff.c **** #endif
2693:../Sources/ff10b/src/ff.c **** 						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 5491              		.loc 1 2693 0
 5492 23cc FB68     		ldr	r3, [r7, #12]
 5493 23ce 1A68     		ldr	r2, [r3, #0]
 5494 23d0 FB68     		ldr	r3, [r7, #12]
 5495 23d2 5B69     		ldr	r3, [r3, #20]
 5496 23d4 1046     		mov	r0, r2
 5497 23d6 1946     		mov	r1, r3
 5498 23d8 FEF76CFA 		bl	create_chain
 5499 23dc 7862     		str	r0, [r7, #36]
 5500              	.L355:
2694:../Sources/ff10b/src/ff.c **** 				}
2695:../Sources/ff10b/src/ff.c **** 				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 5501              		.loc 1 2695 0
 5502 23de 7B6A     		ldr	r3, [r7, #36]
 5503 23e0 002B     		cmp	r3, #0
 5504 23e2 00F00E81 		beq	.L372
 5505              	.L356:
2696:../Sources/ff10b/src/ff.c **** 				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 5506              		.loc 1 2696 0
 5507 23e6 7B6A     		ldr	r3, [r7, #36]
 5508 23e8 012B     		cmp	r3, #1
 5509 23ea 06D1     		bne	.L358
 5510              		.loc 1 2696 0 is_stmt 0 discriminator 1
 5511 23ec FB68     		ldr	r3, [r7, #12]
 5512 23ee 4FF00202 		mov	r2, #2
 5513 23f2 DA71     		strb	r2, [r3, #7]
 5514 23f4 4FF00203 		mov	r3, #2
 5515 23f8 17E1     		b	.L347
 5516              	.L358:
2697:../Sources/ff10b/src/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 5517              		.loc 1 2697 0 is_stmt 1
 5518 23fa 7B6A     		ldr	r3, [r7, #36]
 5519 23fc B3F1FF3F 		cmp	r3, #-1
 5520 2400 06D1     		bne	.L359
 5521              		.loc 1 2697 0 is_stmt 0 discriminator 1
 5522 2402 FB68     		ldr	r3, [r7, #12]
 5523 2404 4FF00102 		mov	r2, #1
 5524 2408 DA71     		strb	r2, [r3, #7]
 5525 240a 4FF00103 		mov	r3, #1
 5526 240e 0CE1     		b	.L347
 5527              	.L359:
2698:../Sources/ff10b/src/ff.c **** 				fp->clust = clst;			/* Update current cluster */
 5528              		.loc 1 2698 0 is_stmt 1
 5529 2410 FB68     		ldr	r3, [r7, #12]
 5530 2412 7A6A     		ldr	r2, [r7, #36]
 5531 2414 5A61     		str	r2, [r3, #20]
2699:../Sources/ff10b/src/ff.c **** 				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 5532              		.loc 1 2699 0
 5533 2416 FB68     		ldr	r3, [r7, #12]
 5534 2418 1B69     		ldr	r3, [r3, #16]
 5535 241a 002B     		cmp	r3, #0
 5536 241c 02D1     		bne	.L353
 5537              		.loc 1 2699 0 is_stmt 0 discriminator 1
 5538 241e FB68     		ldr	r3, [r7, #12]
 5539 2420 7A6A     		ldr	r2, [r7, #36]
 5540 2422 1A61     		str	r2, [r3, #16]
 5541              	.L353:
2700:../Sources/ff10b/src/ff.c **** 			}
2701:../Sources/ff10b/src/ff.c **** #if _FS_TINY
2702:../Sources/ff10b/src/ff.c **** 			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
2703:../Sources/ff10b/src/ff.c **** 				ABORT(fp->fs, FR_DISK_ERR);
2704:../Sources/ff10b/src/ff.c **** #else
2705:../Sources/ff10b/src/ff.c **** 			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 5542              		.loc 1 2705 0 is_stmt 1
 5543 2424 FB68     		ldr	r3, [r7, #12]
 5544 2426 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 5545 2428 03F04003 		and	r3, r3, #64
 5546 242c 002B     		cmp	r3, #0
 5547 242e 1FD0     		beq	.L360
2706:../Sources/ff10b/src/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1))
 5548              		.loc 1 2706 0
 5549 2430 FB68     		ldr	r3, [r7, #12]
 5550 2432 1B68     		ldr	r3, [r3, #0]
 5551 2434 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
 5552 2436 FB68     		ldr	r3, [r7, #12]
 5553 2438 03F12402 		add	r2, r3, #36
 5554 243c FB68     		ldr	r3, [r7, #12]
 5555 243e 9B69     		ldr	r3, [r3, #24]
 5556 2440 0846     		mov	r0, r1
 5557 2442 1146     		mov	r1, r2
 5558 2444 1A46     		mov	r2, r3
 5559 2446 4FF00103 		mov	r3, #1
 5560 244a FFF7FEFF 		bl	disk_write
 5561 244e 0346     		mov	r3, r0
 5562 2450 002B     		cmp	r3, #0
 5563 2452 06D0     		beq	.L361
2707:../Sources/ff10b/src/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 5564              		.loc 1 2707 0
 5565 2454 FB68     		ldr	r3, [r7, #12]
 5566 2456 4FF00102 		mov	r2, #1
 5567 245a DA71     		strb	r2, [r3, #7]
 5568 245c 4FF00103 		mov	r3, #1
 5569 2460 E3E0     		b	.L347
 5570              	.L361:
2708:../Sources/ff10b/src/ff.c **** 				fp->flag &= ~FA__DIRTY;
 5571              		.loc 1 2708 0
 5572 2462 FB68     		ldr	r3, [r7, #12]
 5573 2464 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 5574 2466 23F04003 		bic	r3, r3, #64
 5575 246a DAB2     		uxtb	r2, r3
 5576 246c FB68     		ldr	r3, [r7, #12]
 5577 246e 9A71     		strb	r2, [r3, #6]
 5578              	.L360:
2709:../Sources/ff10b/src/ff.c **** 			}
2710:../Sources/ff10b/src/ff.c **** #endif
2711:../Sources/ff10b/src/ff.c **** 			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 5579              		.loc 1 2711 0
 5580 2470 FB68     		ldr	r3, [r7, #12]
 5581 2472 1A68     		ldr	r2, [r3, #0]
 5582 2474 FB68     		ldr	r3, [r7, #12]
 5583 2476 5B69     		ldr	r3, [r3, #20]
 5584 2478 1046     		mov	r0, r2
 5585 247a 1946     		mov	r1, r3
 5586 247c FFF7FEFF 		bl	clust2sect
 5587 2480 3861     		str	r0, [r7, #16]
2712:../Sources/ff10b/src/ff.c **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 5588              		.loc 1 2712 0
 5589 2482 3B69     		ldr	r3, [r7, #16]
 5590 2484 002B     		cmp	r3, #0
 5591 2486 06D1     		bne	.L362
 5592              		.loc 1 2712 0 is_stmt 0 discriminator 1
 5593 2488 FB68     		ldr	r3, [r7, #12]
 5594 248a 4FF00202 		mov	r2, #2
 5595 248e DA71     		strb	r2, [r3, #7]
 5596 2490 4FF00203 		mov	r3, #2
 5597 2494 C9E0     		b	.L347
 5598              	.L362:
2713:../Sources/ff10b/src/ff.c **** 			sect += csect;
 5599              		.loc 1 2713 0 is_stmt 1
 5600 2496 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 5601 2498 3A69     		ldr	r2, [r7, #16]
 5602 249a D318     		adds	r3, r2, r3
 5603 249c 3B61     		str	r3, [r7, #16]
2714:../Sources/ff10b/src/ff.c **** 			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 5604              		.loc 1 2714 0
 5605 249e 7B68     		ldr	r3, [r7, #4]
 5606 24a0 4FEA5323 		lsr	r3, r3, #9
 5607 24a4 FB61     		str	r3, [r7, #28]
2715:../Sources/ff10b/src/ff.c **** 			if (cc) {						/* Write maximum contiguous sectors directly */
 5608              		.loc 1 2715 0
 5609 24a6 FB69     		ldr	r3, [r7, #28]
 5610 24a8 002B     		cmp	r3, #0
 5611 24aa 45D0     		beq	.L363
2716:../Sources/ff10b/src/ff.c **** 				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 5612              		.loc 1 2716 0
 5613 24ac BA7D     		ldrb	r2, [r7, #22]	@ zero_extendqisi2
 5614 24ae FB69     		ldr	r3, [r7, #28]
 5615 24b0 D218     		adds	r2, r2, r3
 5616 24b2 FB68     		ldr	r3, [r7, #12]
 5617 24b4 1B68     		ldr	r3, [r3, #0]
 5618 24b6 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 5619 24b8 9A42     		cmp	r2, r3
 5620 24ba 06D9     		bls	.L364
2717:../Sources/ff10b/src/ff.c **** 					cc = fp->fs->csize - csect;
 5621              		.loc 1 2717 0
 5622 24bc FB68     		ldr	r3, [r7, #12]
 5623 24be 1B68     		ldr	r3, [r3, #0]
 5624 24c0 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 5625 24c2 1A46     		mov	r2, r3
 5626 24c4 BB7D     		ldrb	r3, [r7, #22]	@ zero_extendqisi2
 5627 24c6 D31A     		subs	r3, r2, r3
 5628 24c8 FB61     		str	r3, [r7, #28]
 5629              	.L364:
2718:../Sources/ff10b/src/ff.c **** 				if (disk_write(fp->fs->drv, wbuff, sect, cc))
 5630              		.loc 1 2718 0
 5631 24ca FB68     		ldr	r3, [r7, #12]
 5632 24cc 1B68     		ldr	r3, [r3, #0]
 5633 24ce 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 5634 24d0 1846     		mov	r0, r3
 5635 24d2 B969     		ldr	r1, [r7, #24]
 5636 24d4 3A69     		ldr	r2, [r7, #16]
 5637 24d6 FB69     		ldr	r3, [r7, #28]
 5638 24d8 FFF7FEFF 		bl	disk_write
 5639 24dc 0346     		mov	r3, r0
 5640 24de 002B     		cmp	r3, #0
 5641 24e0 06D0     		beq	.L365
2719:../Sources/ff10b/src/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 5642              		.loc 1 2719 0
 5643 24e2 FB68     		ldr	r3, [r7, #12]
 5644 24e4 4FF00102 		mov	r2, #1
 5645 24e8 DA71     		strb	r2, [r3, #7]
 5646 24ea 4FF00103 		mov	r3, #1
 5647 24ee 9CE0     		b	.L347
 5648              	.L365:
2720:../Sources/ff10b/src/ff.c **** #if _FS_MINIMIZE <= 2
2721:../Sources/ff10b/src/ff.c **** #if _FS_TINY
2722:../Sources/ff10b/src/ff.c **** 				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct 
2723:../Sources/ff10b/src/ff.c **** 					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
2724:../Sources/ff10b/src/ff.c **** 					fp->fs->wflag = 0;
2725:../Sources/ff10b/src/ff.c **** 				}
2726:../Sources/ff10b/src/ff.c **** #else
2727:../Sources/ff10b/src/ff.c **** 				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write 
 5649              		.loc 1 2727 0
 5650 24f0 FB68     		ldr	r3, [r7, #12]
 5651 24f2 9A69     		ldr	r2, [r3, #24]
 5652 24f4 3B69     		ldr	r3, [r7, #16]
 5653 24f6 D21A     		subs	r2, r2, r3
 5654 24f8 FB69     		ldr	r3, [r7, #28]
 5655 24fa 9A42     		cmp	r2, r3
 5656 24fc 17D2     		bcs	.L366
2728:../Sources/ff10b/src/ff.c **** 					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 5657              		.loc 1 2728 0
 5658 24fe FB68     		ldr	r3, [r7, #12]
 5659 2500 03F12402 		add	r2, r3, #36
 5660 2504 FB68     		ldr	r3, [r7, #12]
 5661 2506 9969     		ldr	r1, [r3, #24]
 5662 2508 3B69     		ldr	r3, [r7, #16]
 5663 250a CB1A     		subs	r3, r1, r3
 5664 250c 4FEA4323 		lsl	r3, r3, #9
 5665 2510 B969     		ldr	r1, [r7, #24]
 5666 2512 CB18     		adds	r3, r1, r3
 5667 2514 1046     		mov	r0, r2
 5668 2516 1946     		mov	r1, r3
 5669 2518 4FF40072 		mov	r2, #512
 5670 251c FDF770FD 		bl	mem_cpy
2729:../Sources/ff10b/src/ff.c **** 					fp->flag &= ~FA__DIRTY;
 5671              		.loc 1 2729 0
 5672 2520 FB68     		ldr	r3, [r7, #12]
 5673 2522 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 5674 2524 23F04003 		bic	r3, r3, #64
 5675 2528 DAB2     		uxtb	r2, r3
 5676 252a FB68     		ldr	r3, [r7, #12]
 5677 252c 9A71     		strb	r2, [r3, #6]
 5678              	.L366:
2730:../Sources/ff10b/src/ff.c **** 				}
2731:../Sources/ff10b/src/ff.c **** #endif
2732:../Sources/ff10b/src/ff.c **** #endif
2733:../Sources/ff10b/src/ff.c **** 				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 5679              		.loc 1 2733 0
 5680 252e FB69     		ldr	r3, [r7, #28]
 5681 2530 4FEA4323 		lsl	r3, r3, #9
 5682 2534 3B62     		str	r3, [r7, #32]
2734:../Sources/ff10b/src/ff.c **** 				continue;
 5683              		.loc 1 2734 0
 5684 2536 4BE0     		b	.L367
 5685              	.L363:
2735:../Sources/ff10b/src/ff.c **** 			}
2736:../Sources/ff10b/src/ff.c **** #if _FS_TINY
2737:../Sources/ff10b/src/ff.c **** 			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
2738:../Sources/ff10b/src/ff.c **** 				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
2739:../Sources/ff10b/src/ff.c **** 				fp->fs->winsect = sect;
2740:../Sources/ff10b/src/ff.c **** 			}
2741:../Sources/ff10b/src/ff.c **** #else
2742:../Sources/ff10b/src/ff.c **** 			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 5686              		.loc 1 2742 0
 5687 2538 FB68     		ldr	r3, [r7, #12]
 5688 253a 9A69     		ldr	r2, [r3, #24]
 5689 253c 3B69     		ldr	r3, [r7, #16]
 5690 253e 9A42     		cmp	r2, r3
 5691 2540 1CD0     		beq	.L368
2743:../Sources/ff10b/src/ff.c **** 				if (fp->fptr < fp->fsize &&
 5692              		.loc 1 2743 0
 5693 2542 FB68     		ldr	r3, [r7, #12]
 5694 2544 9A68     		ldr	r2, [r3, #8]
 5695 2546 FB68     		ldr	r3, [r7, #12]
 5696 2548 DB68     		ldr	r3, [r3, #12]
 5697 254a 9A42     		cmp	r2, r3
 5698 254c 16D2     		bcs	.L368
2744:../Sources/ff10b/src/ff.c **** 					disk_read(fp->fs->drv, fp->buf, sect, 1))
 5699              		.loc 1 2744 0 discriminator 1
 5700 254e FB68     		ldr	r3, [r7, #12]
 5701 2550 1B68     		ldr	r3, [r3, #0]
 5702 2552 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 5703 2554 FB68     		ldr	r3, [r7, #12]
 5704 2556 03F12403 		add	r3, r3, #36
 5705 255a 1046     		mov	r0, r2
 5706 255c 1946     		mov	r1, r3
 5707 255e 3A69     		ldr	r2, [r7, #16]
 5708 2560 4FF00103 		mov	r3, #1
 5709 2564 FFF7FEFF 		bl	disk_read
 5710 2568 0346     		mov	r3, r0
2743:../Sources/ff10b/src/ff.c **** 				if (fp->fptr < fp->fsize &&
 5711              		.loc 1 2743 0 discriminator 1
 5712 256a 002B     		cmp	r3, #0
 5713 256c 06D0     		beq	.L368
2745:../Sources/ff10b/src/ff.c **** 						ABORT(fp->fs, FR_DISK_ERR);
 5714              		.loc 1 2745 0
 5715 256e FB68     		ldr	r3, [r7, #12]
 5716 2570 4FF00102 		mov	r2, #1
 5717 2574 DA71     		strb	r2, [r3, #7]
 5718 2576 4FF00103 		mov	r3, #1
 5719 257a 56E0     		b	.L347
 5720              	.L368:
2746:../Sources/ff10b/src/ff.c **** 			}
2747:../Sources/ff10b/src/ff.c **** #endif
2748:../Sources/ff10b/src/ff.c **** 			fp->dsect = sect;
 5721              		.loc 1 2748 0
 5722 257c FB68     		ldr	r3, [r7, #12]
 5723 257e 3A69     		ldr	r2, [r7, #16]
 5724 2580 9A61     		str	r2, [r3, #24]
 5725              	.L352:
2749:../Sources/ff10b/src/ff.c **** 		}
2750:../Sources/ff10b/src/ff.c **** 		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 5726              		.loc 1 2750 0
 5727 2582 FB68     		ldr	r3, [r7, #12]
 5728 2584 9B68     		ldr	r3, [r3, #8]
 5729 2586 4FEAC353 		lsl	r3, r3, #23
 5730 258a 4FEAD353 		lsr	r3, r3, #23
 5731 258e C3F50073 		rsb	r3, r3, #512
 5732 2592 3B62     		str	r3, [r7, #32]
2751:../Sources/ff10b/src/ff.c **** 		if (wcnt > btw) wcnt = btw;
 5733              		.loc 1 2751 0
 5734 2594 3A6A     		ldr	r2, [r7, #32]
 5735 2596 7B68     		ldr	r3, [r7, #4]
 5736 2598 9A42     		cmp	r2, r3
 5737 259a 01D9     		bls	.L369
 5738              		.loc 1 2751 0 is_stmt 0 discriminator 1
 5739 259c 7B68     		ldr	r3, [r7, #4]
 5740 259e 3B62     		str	r3, [r7, #32]
 5741              	.L369:
2752:../Sources/ff10b/src/ff.c **** #if _FS_TINY
2753:../Sources/ff10b/src/ff.c **** 		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
2754:../Sources/ff10b/src/ff.c **** 			ABORT(fp->fs, FR_DISK_ERR);
2755:../Sources/ff10b/src/ff.c **** 		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
2756:../Sources/ff10b/src/ff.c **** 		fp->fs->wflag = 1;
2757:../Sources/ff10b/src/ff.c **** #else
2758:../Sources/ff10b/src/ff.c **** 		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 5742              		.loc 1 2758 0 is_stmt 1
 5743 25a0 FB68     		ldr	r3, [r7, #12]
 5744 25a2 9B68     		ldr	r3, [r3, #8]
 5745 25a4 4FEAC353 		lsl	r3, r3, #23
 5746 25a8 4FEAD353 		lsr	r3, r3, #23
 5747 25ac 03F12003 		add	r3, r3, #32
 5748 25b0 FA68     		ldr	r2, [r7, #12]
 5749 25b2 D318     		adds	r3, r2, r3
 5750 25b4 03F10403 		add	r3, r3, #4
 5751 25b8 1846     		mov	r0, r3
 5752 25ba B969     		ldr	r1, [r7, #24]
 5753 25bc 3A6A     		ldr	r2, [r7, #32]
 5754 25be FDF71FFD 		bl	mem_cpy
2759:../Sources/ff10b/src/ff.c **** 		fp->flag |= FA__DIRTY;
 5755              		.loc 1 2759 0
 5756 25c2 FB68     		ldr	r3, [r7, #12]
 5757 25c4 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 5758 25c6 43F04003 		orr	r3, r3, #64
 5759 25ca DAB2     		uxtb	r2, r3
 5760 25cc FB68     		ldr	r3, [r7, #12]
 5761 25ce 9A71     		strb	r2, [r3, #6]
 5762              	.L367:
2679:../Sources/ff10b/src/ff.c **** 		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 5763              		.loc 1 2679 0
 5764 25d0 BA69     		ldr	r2, [r7, #24]
 5765 25d2 3B6A     		ldr	r3, [r7, #32]
 5766 25d4 D318     		adds	r3, r2, r3
 5767 25d6 BB61     		str	r3, [r7, #24]
 5768 25d8 FB68     		ldr	r3, [r7, #12]
 5769 25da 9A68     		ldr	r2, [r3, #8]
 5770 25dc 3B6A     		ldr	r3, [r7, #32]
 5771 25de D218     		adds	r2, r2, r3
 5772 25e0 FB68     		ldr	r3, [r7, #12]
 5773 25e2 9A60     		str	r2, [r3, #8]
 5774 25e4 3B68     		ldr	r3, [r7, #0]
 5775 25e6 1A68     		ldr	r2, [r3, #0]
 5776 25e8 3B6A     		ldr	r3, [r7, #32]
 5777 25ea D218     		adds	r2, r2, r3
 5778 25ec 3B68     		ldr	r3, [r7, #0]
 5779 25ee 1A60     		str	r2, [r3, #0]
 5780 25f0 7A68     		ldr	r2, [r7, #4]
 5781 25f2 3B6A     		ldr	r3, [r7, #32]
 5782 25f4 D31A     		subs	r3, r2, r3
 5783 25f6 7B60     		str	r3, [r7, #4]
 5784              	.L351:
2678:../Sources/ff10b/src/ff.c **** 	for ( ;  btw;							/* Repeat until all data written */
 5785              		.loc 1 2678 0 discriminator 1
 5786 25f8 7B68     		ldr	r3, [r7, #4]
 5787 25fa 002B     		cmp	r3, #0
 5788 25fc 7FF4BAAE 		bne	.L370
 5789 2600 00E0     		b	.L357
 5790              	.L372:
2695:../Sources/ff10b/src/ff.c **** 				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 5791              		.loc 1 2695 0
 5792 2602 00BF     		nop
 5793              	.L357:
2760:../Sources/ff10b/src/ff.c **** #endif
2761:../Sources/ff10b/src/ff.c **** 	}
2762:../Sources/ff10b/src/ff.c **** 
2763:../Sources/ff10b/src/ff.c **** 	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 5794              		.loc 1 2763 0
 5795 2604 FB68     		ldr	r3, [r7, #12]
 5796 2606 9A68     		ldr	r2, [r3, #8]
 5797 2608 FB68     		ldr	r3, [r7, #12]
 5798 260a DB68     		ldr	r3, [r3, #12]
 5799 260c 9A42     		cmp	r2, r3
 5800 260e 03D9     		bls	.L371
 5801              		.loc 1 2763 0 is_stmt 0 discriminator 1
 5802 2610 FB68     		ldr	r3, [r7, #12]
 5803 2612 9A68     		ldr	r2, [r3, #8]
 5804 2614 FB68     		ldr	r3, [r7, #12]
 5805 2616 DA60     		str	r2, [r3, #12]
 5806              	.L371:
2764:../Sources/ff10b/src/ff.c **** 	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 5807              		.loc 1 2764 0 is_stmt 1
 5808 2618 FB68     		ldr	r3, [r7, #12]
 5809 261a 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 5810 261c 43F02003 		orr	r3, r3, #32
 5811 2620 DAB2     		uxtb	r2, r3
 5812 2622 FB68     		ldr	r3, [r7, #12]
 5813 2624 9A71     		strb	r2, [r3, #6]
2765:../Sources/ff10b/src/ff.c **** 
2766:../Sources/ff10b/src/ff.c **** 	LEAVE_FF(fp->fs, FR_OK);
 5814              		.loc 1 2766 0
 5815 2626 4FF00003 		mov	r3, #0
 5816              	.L347:
2767:../Sources/ff10b/src/ff.c **** }
 5817              		.loc 1 2767 0
 5818 262a 1846     		mov	r0, r3
 5819 262c 07F12807 		add	r7, r7, #40
 5820 2630 BD46     		mov	sp, r7
 5821 2632 80BD     		pop	{r7, pc}
 5822              		.cfi_endproc
 5823              	.LFE32:
 5825              		.align	2
 5826              		.global	f_sync
 5827              		.thumb
 5828              		.thumb_func
 5830              	f_sync:
 5831              	.LFB33:
2768:../Sources/ff10b/src/ff.c **** 
2769:../Sources/ff10b/src/ff.c **** 
2770:../Sources/ff10b/src/ff.c **** 
2771:../Sources/ff10b/src/ff.c **** 
2772:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
2773:../Sources/ff10b/src/ff.c **** /* Synchronize the File                                                  */
2774:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
2775:../Sources/ff10b/src/ff.c **** 
2776:../Sources/ff10b/src/ff.c **** FRESULT f_sync (
2777:../Sources/ff10b/src/ff.c **** 	FIL* fp		/* Pointer to the file object */
2778:../Sources/ff10b/src/ff.c **** )
2779:../Sources/ff10b/src/ff.c **** {
 5832              		.loc 1 2779 0
 5833              		.cfi_startproc
 5834              		@ args = 0, pretend = 0, frame = 24
 5835              		@ frame_needed = 1, uses_anonymous_args = 0
 5836 2634 80B5     		push	{r7, lr}
 5837              	.LCFI98:
 5838              		.cfi_def_cfa_offset 8
 5839              		.cfi_offset 7, -8
 5840              		.cfi_offset 14, -4
 5841 2636 86B0     		sub	sp, sp, #24
 5842              	.LCFI99:
 5843              		.cfi_def_cfa_offset 32
 5844 2638 00AF     		add	r7, sp, #0
 5845              	.LCFI100:
 5846              		.cfi_def_cfa_register 7
 5847 263a 7860     		str	r0, [r7, #4]
2780:../Sources/ff10b/src/ff.c **** 	FRESULT res;
2781:../Sources/ff10b/src/ff.c **** 	DWORD tm;
2782:../Sources/ff10b/src/ff.c **** 	BYTE *dir;
2783:../Sources/ff10b/src/ff.c **** 
2784:../Sources/ff10b/src/ff.c **** 
2785:../Sources/ff10b/src/ff.c **** 	res = validate(fp);					/* Check validity of the object */
 5848              		.loc 1 2785 0
 5849 263c 7868     		ldr	r0, [r7, #4]
 5850 263e FFF719FB 		bl	validate
 5851 2642 0346     		mov	r3, r0
 5852 2644 FB75     		strb	r3, [r7, #23]
2786:../Sources/ff10b/src/ff.c **** 	if (res == FR_OK) {
 5853              		.loc 1 2786 0
 5854 2646 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 5855 2648 002B     		cmp	r3, #0
 5856 264a 40F0B080 		bne	.L374
2787:../Sources/ff10b/src/ff.c **** 		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 5857              		.loc 1 2787 0
 5858 264e 7B68     		ldr	r3, [r7, #4]
 5859 2650 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 5860 2652 03F02003 		and	r3, r3, #32
 5861 2656 002B     		cmp	r3, #0
 5862 2658 00F0A980 		beq	.L374
2788:../Sources/ff10b/src/ff.c **** 			/* Write-back dirty buffer */
2789:../Sources/ff10b/src/ff.c **** #if !_FS_TINY
2790:../Sources/ff10b/src/ff.c **** 			if (fp->flag & FA__DIRTY) {
 5863              		.loc 1 2790 0
 5864 265c 7B68     		ldr	r3, [r7, #4]
 5865 265e 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 5866 2660 03F04003 		and	r3, r3, #64
 5867 2664 002B     		cmp	r3, #0
 5868 2666 1BD0     		beq	.L375
2791:../Sources/ff10b/src/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1))
 5869              		.loc 1 2791 0
 5870 2668 7B68     		ldr	r3, [r7, #4]
 5871 266a 1B68     		ldr	r3, [r3, #0]
 5872 266c 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
 5873 266e 7B68     		ldr	r3, [r7, #4]
 5874 2670 03F12402 		add	r2, r3, #36
 5875 2674 7B68     		ldr	r3, [r7, #4]
 5876 2676 9B69     		ldr	r3, [r3, #24]
 5877 2678 0846     		mov	r0, r1
 5878 267a 1146     		mov	r1, r2
 5879 267c 1A46     		mov	r2, r3
 5880 267e 4FF00103 		mov	r3, #1
 5881 2682 FFF7FEFF 		bl	disk_write
 5882 2686 0346     		mov	r3, r0
 5883 2688 002B     		cmp	r3, #0
 5884 268a 02D0     		beq	.L376
2792:../Sources/ff10b/src/ff.c **** 					LEAVE_FF(fp->fs, FR_DISK_ERR);
 5885              		.loc 1 2792 0
 5886 268c 4FF00103 		mov	r3, #1
 5887 2690 8EE0     		b	.L377
 5888              	.L376:
2793:../Sources/ff10b/src/ff.c **** 				fp->flag &= ~FA__DIRTY;
 5889              		.loc 1 2793 0
 5890 2692 7B68     		ldr	r3, [r7, #4]
 5891 2694 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 5892 2696 23F04003 		bic	r3, r3, #64
 5893 269a DAB2     		uxtb	r2, r3
 5894 269c 7B68     		ldr	r3, [r7, #4]
 5895 269e 9A71     		strb	r2, [r3, #6]
 5896              	.L375:
2794:../Sources/ff10b/src/ff.c **** 			}
2795:../Sources/ff10b/src/ff.c **** #endif
2796:../Sources/ff10b/src/ff.c **** 			/* Update the directory entry */
2797:../Sources/ff10b/src/ff.c **** 			res = move_window(fp->fs, fp->dir_sect);
 5897              		.loc 1 2797 0
 5898 26a0 7B68     		ldr	r3, [r7, #4]
 5899 26a2 1A68     		ldr	r2, [r3, #0]
 5900 26a4 7B68     		ldr	r3, [r7, #4]
 5901 26a6 DB69     		ldr	r3, [r3, #28]
 5902 26a8 1046     		mov	r0, r2
 5903 26aa 1946     		mov	r1, r3
 5904 26ac FDF792FD 		bl	move_window
 5905 26b0 0346     		mov	r3, r0
 5906 26b2 FB75     		strb	r3, [r7, #23]
2798:../Sources/ff10b/src/ff.c **** 			if (res == FR_OK) {
 5907              		.loc 1 2798 0
 5908 26b4 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 5909 26b6 002B     		cmp	r3, #0
 5910 26b8 79D1     		bne	.L374
2799:../Sources/ff10b/src/ff.c **** 				dir = fp->dir_ptr;
 5911              		.loc 1 2799 0
 5912 26ba 7B68     		ldr	r3, [r7, #4]
 5913 26bc 1B6A     		ldr	r3, [r3, #32]
 5914 26be 3B61     		str	r3, [r7, #16]
2800:../Sources/ff10b/src/ff.c **** 				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 5915              		.loc 1 2800 0
 5916 26c0 3B69     		ldr	r3, [r7, #16]
 5917 26c2 03F10B03 		add	r3, r3, #11
 5918 26c6 3A69     		ldr	r2, [r7, #16]
 5919 26c8 02F10B02 		add	r2, r2, #11
 5920 26cc 1278     		ldrb	r2, [r2, #0]	@ zero_extendqisi2
 5921 26ce 42F02002 		orr	r2, r2, #32
 5922 26d2 D2B2     		uxtb	r2, r2
 5923 26d4 1A70     		strb	r2, [r3, #0]
2801:../Sources/ff10b/src/ff.c **** 				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
 5924              		.loc 1 2801 0
 5925 26d6 3B69     		ldr	r3, [r7, #16]
 5926 26d8 03F11C03 		add	r3, r3, #28
 5927 26dc 7A68     		ldr	r2, [r7, #4]
 5928 26de D268     		ldr	r2, [r2, #12]
 5929 26e0 D2B2     		uxtb	r2, r2
 5930 26e2 1A70     		strb	r2, [r3, #0]
 5931 26e4 3B69     		ldr	r3, [r7, #16]
 5932 26e6 03F11D03 		add	r3, r3, #29
 5933 26ea 7A68     		ldr	r2, [r7, #4]
 5934 26ec D268     		ldr	r2, [r2, #12]
 5935 26ee 92B2     		uxth	r2, r2
 5936 26f0 4FEA1222 		lsr	r2, r2, #8
 5937 26f4 92B2     		uxth	r2, r2
 5938 26f6 D2B2     		uxtb	r2, r2
 5939 26f8 1A70     		strb	r2, [r3, #0]
 5940 26fa 3B69     		ldr	r3, [r7, #16]
 5941 26fc 03F11E03 		add	r3, r3, #30
 5942 2700 7A68     		ldr	r2, [r7, #4]
 5943 2702 D268     		ldr	r2, [r2, #12]
 5944 2704 4FEA1242 		lsr	r2, r2, #16
 5945 2708 D2B2     		uxtb	r2, r2
 5946 270a 1A70     		strb	r2, [r3, #0]
 5947 270c 3B69     		ldr	r3, [r7, #16]
 5948 270e 03F11F03 		add	r3, r3, #31
 5949 2712 7A68     		ldr	r2, [r7, #4]
 5950 2714 D268     		ldr	r2, [r2, #12]
 5951 2716 4FEA1262 		lsr	r2, r2, #24
 5952 271a D2B2     		uxtb	r2, r2
 5953 271c 1A70     		strb	r2, [r3, #0]
2802:../Sources/ff10b/src/ff.c **** 				st_clust(dir, fp->sclust);					/* Update start cluster */
 5954              		.loc 1 2802 0
 5955 271e 7B68     		ldr	r3, [r7, #4]
 5956 2720 1B69     		ldr	r3, [r3, #16]
 5957 2722 3869     		ldr	r0, [r7, #16]
 5958 2724 1946     		mov	r1, r3
 5959 2726 FEF75BFB 		bl	st_clust
2803:../Sources/ff10b/src/ff.c **** 				tm = get_fattime();							/* Update updated time */
 5960              		.loc 1 2803 0
 5961 272a FFF7FEFF 		bl	get_fattime
 5962 272e F860     		str	r0, [r7, #12]
2804:../Sources/ff10b/src/ff.c **** 				ST_DWORD(dir+DIR_WrtTime, tm);
 5963              		.loc 1 2804 0
 5964 2730 3B69     		ldr	r3, [r7, #16]
 5965 2732 03F11603 		add	r3, r3, #22
 5966 2736 FA68     		ldr	r2, [r7, #12]
 5967 2738 D2B2     		uxtb	r2, r2
 5968 273a 1A70     		strb	r2, [r3, #0]
 5969 273c 3B69     		ldr	r3, [r7, #16]
 5970 273e 03F11703 		add	r3, r3, #23
 5971 2742 FA68     		ldr	r2, [r7, #12]
 5972 2744 92B2     		uxth	r2, r2
 5973 2746 4FEA1222 		lsr	r2, r2, #8
 5974 274a 92B2     		uxth	r2, r2
 5975 274c D2B2     		uxtb	r2, r2
 5976 274e 1A70     		strb	r2, [r3, #0]
 5977 2750 3B69     		ldr	r3, [r7, #16]
 5978 2752 03F11803 		add	r3, r3, #24
 5979 2756 FA68     		ldr	r2, [r7, #12]
 5980 2758 4FEA1242 		lsr	r2, r2, #16
 5981 275c D2B2     		uxtb	r2, r2
 5982 275e 1A70     		strb	r2, [r3, #0]
 5983 2760 3B69     		ldr	r3, [r7, #16]
 5984 2762 03F11903 		add	r3, r3, #25
 5985 2766 FA68     		ldr	r2, [r7, #12]
 5986 2768 4FEA1262 		lsr	r2, r2, #24
 5987 276c D2B2     		uxtb	r2, r2
 5988 276e 1A70     		strb	r2, [r3, #0]
2805:../Sources/ff10b/src/ff.c **** 				ST_WORD(dir+DIR_LstAccDate, 0);
 5989              		.loc 1 2805 0
 5990 2770 3B69     		ldr	r3, [r7, #16]
 5991 2772 03F11203 		add	r3, r3, #18
 5992 2776 4FF00002 		mov	r2, #0
 5993 277a 1A70     		strb	r2, [r3, #0]
 5994 277c 3B69     		ldr	r3, [r7, #16]
 5995 277e 03F11303 		add	r3, r3, #19
 5996 2782 4FF00002 		mov	r2, #0
 5997 2786 1A70     		strb	r2, [r3, #0]
2806:../Sources/ff10b/src/ff.c **** 				fp->flag &= ~FA__WRITTEN;
 5998              		.loc 1 2806 0
 5999 2788 7B68     		ldr	r3, [r7, #4]
 6000 278a 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 6001 278c 23F02003 		bic	r3, r3, #32
 6002 2790 DAB2     		uxtb	r2, r3
 6003 2792 7B68     		ldr	r3, [r7, #4]
 6004 2794 9A71     		strb	r2, [r3, #6]
2807:../Sources/ff10b/src/ff.c **** 				fp->fs->wflag = 1;
 6005              		.loc 1 2807 0
 6006 2796 7B68     		ldr	r3, [r7, #4]
 6007 2798 1B68     		ldr	r3, [r3, #0]
 6008 279a 4FF00102 		mov	r2, #1
 6009 279e 1A71     		strb	r2, [r3, #4]
2808:../Sources/ff10b/src/ff.c **** 				res = sync_fs(fp->fs);
 6010              		.loc 1 2808 0
 6011 27a0 7B68     		ldr	r3, [r7, #4]
 6012 27a2 1B68     		ldr	r3, [r3, #0]
 6013 27a4 1846     		mov	r0, r3
 6014 27a6 FDF745FD 		bl	sync_fs
 6015 27aa 0346     		mov	r3, r0
 6016 27ac FB75     		strb	r3, [r7, #23]
 6017              	.L374:
2809:../Sources/ff10b/src/ff.c **** 			}
2810:../Sources/ff10b/src/ff.c **** 		}
2811:../Sources/ff10b/src/ff.c **** 	}
2812:../Sources/ff10b/src/ff.c **** 
2813:../Sources/ff10b/src/ff.c **** 	LEAVE_FF(fp->fs, res);
 6018              		.loc 1 2813 0
 6019 27ae FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 6020              	.L377:
2814:../Sources/ff10b/src/ff.c **** }
 6021              		.loc 1 2814 0
 6022 27b0 1846     		mov	r0, r3
 6023 27b2 07F11807 		add	r7, r7, #24
 6024 27b6 BD46     		mov	sp, r7
 6025 27b8 80BD     		pop	{r7, pc}
 6026              		.cfi_endproc
 6027              	.LFE33:
 6029 27ba 00BF     		.align	2
 6030              		.global	f_close
 6031              		.thumb
 6032              		.thumb_func
 6034              	f_close:
 6035              	.LFB34:
2815:../Sources/ff10b/src/ff.c **** 
2816:../Sources/ff10b/src/ff.c **** #endif /* !_FS_READONLY */
2817:../Sources/ff10b/src/ff.c **** 
2818:../Sources/ff10b/src/ff.c **** 
2819:../Sources/ff10b/src/ff.c **** 
2820:../Sources/ff10b/src/ff.c **** 
2821:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
2822:../Sources/ff10b/src/ff.c **** /* Close File                                                            */
2823:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
2824:../Sources/ff10b/src/ff.c **** 
2825:../Sources/ff10b/src/ff.c **** FRESULT f_close (
2826:../Sources/ff10b/src/ff.c **** 	FIL *fp		/* Pointer to the file object to be closed */
2827:../Sources/ff10b/src/ff.c **** )
2828:../Sources/ff10b/src/ff.c **** {
 6036              		.loc 1 2828 0
 6037              		.cfi_startproc
 6038              		@ args = 0, pretend = 0, frame = 16
 6039              		@ frame_needed = 1, uses_anonymous_args = 0
 6040 27bc 80B5     		push	{r7, lr}
 6041              	.LCFI101:
 6042              		.cfi_def_cfa_offset 8
 6043              		.cfi_offset 7, -8
 6044              		.cfi_offset 14, -4
 6045 27be 84B0     		sub	sp, sp, #16
 6046              	.LCFI102:
 6047              		.cfi_def_cfa_offset 24
 6048 27c0 00AF     		add	r7, sp, #0
 6049              	.LCFI103:
 6050              		.cfi_def_cfa_register 7
 6051 27c2 7860     		str	r0, [r7, #4]
2829:../Sources/ff10b/src/ff.c **** 	FRESULT res;
2830:../Sources/ff10b/src/ff.c **** 
2831:../Sources/ff10b/src/ff.c **** 
2832:../Sources/ff10b/src/ff.c **** #if !_FS_READONLY
2833:../Sources/ff10b/src/ff.c **** 	res = f_sync(fp);					/* Flush cached data */
 6052              		.loc 1 2833 0
 6053 27c4 7868     		ldr	r0, [r7, #4]
 6054 27c6 FFF7FEFF 		bl	f_sync
 6055 27ca 0346     		mov	r3, r0
 6056 27cc FB73     		strb	r3, [r7, #15]
2834:../Sources/ff10b/src/ff.c **** 	if (res == FR_OK)
 6057              		.loc 1 2834 0
 6058 27ce FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 6059 27d0 002B     		cmp	r3, #0
 6060 27d2 0BD1     		bne	.L379
2835:../Sources/ff10b/src/ff.c **** #endif
2836:../Sources/ff10b/src/ff.c **** 	{
2837:../Sources/ff10b/src/ff.c **** 		res = validate(fp);				/* Lock volume */
 6061              		.loc 1 2837 0
 6062 27d4 7868     		ldr	r0, [r7, #4]
 6063 27d6 FFF74DFA 		bl	validate
 6064 27da 0346     		mov	r3, r0
 6065 27dc FB73     		strb	r3, [r7, #15]
2838:../Sources/ff10b/src/ff.c **** 		if (res == FR_OK) {
 6066              		.loc 1 2838 0
 6067 27de FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 6068 27e0 002B     		cmp	r3, #0
 6069 27e2 03D1     		bne	.L379
2839:../Sources/ff10b/src/ff.c **** #if _FS_REENTRANT
2840:../Sources/ff10b/src/ff.c **** 			FATFS *fs = fp->fs;
2841:../Sources/ff10b/src/ff.c **** #endif
2842:../Sources/ff10b/src/ff.c **** #if _FS_LOCK
2843:../Sources/ff10b/src/ff.c **** 			res = dec_lock(fp->lockid);	/* Decrement file open counter */
2844:../Sources/ff10b/src/ff.c **** 			if (res == FR_OK)
2845:../Sources/ff10b/src/ff.c **** #endif
2846:../Sources/ff10b/src/ff.c **** 				fp->fs = 0;				/* Invalidate file object */
 6070              		.loc 1 2846 0
 6071 27e4 7B68     		ldr	r3, [r7, #4]
 6072 27e6 4FF00002 		mov	r2, #0
 6073 27ea 1A60     		str	r2, [r3, #0]
 6074              	.L379:
2847:../Sources/ff10b/src/ff.c **** #if _FS_REENTRANT
2848:../Sources/ff10b/src/ff.c **** 			unlock_fs(fs, FR_OK);		/* Unlock volume */
2849:../Sources/ff10b/src/ff.c **** #endif
2850:../Sources/ff10b/src/ff.c **** 		}
2851:../Sources/ff10b/src/ff.c **** 	}
2852:../Sources/ff10b/src/ff.c **** 	return res;
 6075              		.loc 1 2852 0
 6076 27ec FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
2853:../Sources/ff10b/src/ff.c **** }
 6077              		.loc 1 2853 0
 6078 27ee 1846     		mov	r0, r3
 6079 27f0 07F11007 		add	r7, r7, #16
 6080 27f4 BD46     		mov	sp, r7
 6081 27f6 80BD     		pop	{r7, pc}
 6082              		.cfi_endproc
 6083              	.LFE34:
 6085              		.align	2
 6086              		.global	f_lseek
 6087              		.thumb
 6088              		.thumb_func
 6090              	f_lseek:
 6091              	.LFB35:
2854:../Sources/ff10b/src/ff.c **** 
2855:../Sources/ff10b/src/ff.c **** 
2856:../Sources/ff10b/src/ff.c **** 
2857:../Sources/ff10b/src/ff.c **** 
2858:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
2859:../Sources/ff10b/src/ff.c **** /* Change Current Directory or Current Drive, Get Current Directory      */
2860:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
2861:../Sources/ff10b/src/ff.c **** 
2862:../Sources/ff10b/src/ff.c **** #if _FS_RPATH >= 1
2863:../Sources/ff10b/src/ff.c **** #if _VOLUMES >= 2
2864:../Sources/ff10b/src/ff.c **** FRESULT f_chdrive (
2865:../Sources/ff10b/src/ff.c **** 	const TCHAR* path		/* Drive number */
2866:../Sources/ff10b/src/ff.c **** )
2867:../Sources/ff10b/src/ff.c **** {
2868:../Sources/ff10b/src/ff.c **** 	int vol;
2869:../Sources/ff10b/src/ff.c **** 
2870:../Sources/ff10b/src/ff.c **** 
2871:../Sources/ff10b/src/ff.c **** 	vol = get_ldnumber(&path);
2872:../Sources/ff10b/src/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
2873:../Sources/ff10b/src/ff.c **** 
2874:../Sources/ff10b/src/ff.c **** 	CurrVol = (BYTE)vol;
2875:../Sources/ff10b/src/ff.c **** 
2876:../Sources/ff10b/src/ff.c **** 	return FR_OK;
2877:../Sources/ff10b/src/ff.c **** }
2878:../Sources/ff10b/src/ff.c **** #endif
2879:../Sources/ff10b/src/ff.c **** 
2880:../Sources/ff10b/src/ff.c **** 
2881:../Sources/ff10b/src/ff.c **** FRESULT f_chdir (
2882:../Sources/ff10b/src/ff.c **** 	const TCHAR* path	/* Pointer to the directory path */
2883:../Sources/ff10b/src/ff.c **** )
2884:../Sources/ff10b/src/ff.c **** {
2885:../Sources/ff10b/src/ff.c **** 	FRESULT res;
2886:../Sources/ff10b/src/ff.c **** 	DIR dj;
2887:../Sources/ff10b/src/ff.c **** 	DEF_NAMEBUF;
2888:../Sources/ff10b/src/ff.c **** 
2889:../Sources/ff10b/src/ff.c **** 
2890:../Sources/ff10b/src/ff.c **** 	/* Get logical drive number */
2891:../Sources/ff10b/src/ff.c **** 	res = find_volume(&dj.fs, &path, 0);
2892:../Sources/ff10b/src/ff.c **** 	if (res == FR_OK) {
2893:../Sources/ff10b/src/ff.c **** 		INIT_BUF(dj);
2894:../Sources/ff10b/src/ff.c **** 		res = follow_path(&dj, path);		/* Follow the path */
2895:../Sources/ff10b/src/ff.c **** 		FREE_BUF();
2896:../Sources/ff10b/src/ff.c **** 		if (res == FR_OK) {					/* Follow completed */
2897:../Sources/ff10b/src/ff.c **** 			if (!dj.dir) {
2898:../Sources/ff10b/src/ff.c **** 				dj.fs->cdir = dj.sclust;	/* Start directory itself */
2899:../Sources/ff10b/src/ff.c **** 			} else {
2900:../Sources/ff10b/src/ff.c **** 				if (dj.dir[DIR_Attr] & AM_DIR)	/* Reached to the directory */
2901:../Sources/ff10b/src/ff.c **** 					dj.fs->cdir = ld_clust(dj.fs, dj.dir);
2902:../Sources/ff10b/src/ff.c **** 				else
2903:../Sources/ff10b/src/ff.c **** 					res = FR_NO_PATH;		/* Reached but a file */
2904:../Sources/ff10b/src/ff.c **** 			}
2905:../Sources/ff10b/src/ff.c **** 		}
2906:../Sources/ff10b/src/ff.c **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
2907:../Sources/ff10b/src/ff.c **** 	}
2908:../Sources/ff10b/src/ff.c **** 
2909:../Sources/ff10b/src/ff.c **** 	LEAVE_FF(dj.fs, res);
2910:../Sources/ff10b/src/ff.c **** }
2911:../Sources/ff10b/src/ff.c **** 
2912:../Sources/ff10b/src/ff.c **** 
2913:../Sources/ff10b/src/ff.c **** #if _FS_RPATH >= 2
2914:../Sources/ff10b/src/ff.c **** FRESULT f_getcwd (
2915:../Sources/ff10b/src/ff.c **** 	TCHAR* buff,	/* Pointer to the directory path */
2916:../Sources/ff10b/src/ff.c **** 	UINT len		/* Size of path */
2917:../Sources/ff10b/src/ff.c **** )
2918:../Sources/ff10b/src/ff.c **** {
2919:../Sources/ff10b/src/ff.c **** 	FRESULT res;
2920:../Sources/ff10b/src/ff.c **** 	DIR dj;
2921:../Sources/ff10b/src/ff.c **** 	UINT i, n;
2922:../Sources/ff10b/src/ff.c **** 	DWORD ccl;
2923:../Sources/ff10b/src/ff.c **** 	TCHAR *tp;
2924:../Sources/ff10b/src/ff.c **** 	FILINFO fno;
2925:../Sources/ff10b/src/ff.c **** 	DEF_NAMEBUF;
2926:../Sources/ff10b/src/ff.c **** 
2927:../Sources/ff10b/src/ff.c **** 
2928:../Sources/ff10b/src/ff.c **** 	*buff = 0;
2929:../Sources/ff10b/src/ff.c **** 	/* Get logical drive number */
2930:../Sources/ff10b/src/ff.c **** 	res = find_volume(&dj.fs, (const TCHAR**)&buff, 0);	/* Get current volume */
2931:../Sources/ff10b/src/ff.c **** 	if (res == FR_OK) {
2932:../Sources/ff10b/src/ff.c **** 		INIT_BUF(dj);
2933:../Sources/ff10b/src/ff.c **** 		i = len;			/* Bottom of buffer (directory stack base) */
2934:../Sources/ff10b/src/ff.c **** 		dj.sclust = dj.fs->cdir;			/* Start to follow upper directory from current directory */
2935:../Sources/ff10b/src/ff.c **** 		while ((ccl = dj.sclust) != 0) {	/* Repeat while current directory is a sub-directory */
2936:../Sources/ff10b/src/ff.c **** 			res = dir_sdi(&dj, 1);			/* Get parent directory */
2937:../Sources/ff10b/src/ff.c **** 			if (res != FR_OK) break;
2938:../Sources/ff10b/src/ff.c **** 			res = dir_read(&dj, 0);
2939:../Sources/ff10b/src/ff.c **** 			if (res != FR_OK) break;
2940:../Sources/ff10b/src/ff.c **** 			dj.sclust = ld_clust(dj.fs, dj.dir);	/* Goto parent directory */
2941:../Sources/ff10b/src/ff.c **** 			res = dir_sdi(&dj, 0);
2942:../Sources/ff10b/src/ff.c **** 			if (res != FR_OK) break;
2943:../Sources/ff10b/src/ff.c **** 			do {							/* Find the entry links to the child directory */
2944:../Sources/ff10b/src/ff.c **** 				res = dir_read(&dj, 0);
2945:../Sources/ff10b/src/ff.c **** 				if (res != FR_OK) break;
2946:../Sources/ff10b/src/ff.c **** 				if (ccl == ld_clust(dj.fs, dj.dir)) break;	/* Found the entry */
2947:../Sources/ff10b/src/ff.c **** 				res = dir_next(&dj, 0);	
2948:../Sources/ff10b/src/ff.c **** 			} while (res == FR_OK);
2949:../Sources/ff10b/src/ff.c **** 			if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
2950:../Sources/ff10b/src/ff.c **** 			if (res != FR_OK) break;
2951:../Sources/ff10b/src/ff.c **** #if _USE_LFN
2952:../Sources/ff10b/src/ff.c **** 			fno.lfname = buff;
2953:../Sources/ff10b/src/ff.c **** 			fno.lfsize = i;
2954:../Sources/ff10b/src/ff.c **** #endif
2955:../Sources/ff10b/src/ff.c **** 			get_fileinfo(&dj, &fno);		/* Get the directory name and push it to the buffer */
2956:../Sources/ff10b/src/ff.c **** 			tp = fno.fname;
2957:../Sources/ff10b/src/ff.c **** #if _USE_LFN
2958:../Sources/ff10b/src/ff.c **** 			if (*buff) tp = buff;
2959:../Sources/ff10b/src/ff.c **** #endif
2960:../Sources/ff10b/src/ff.c **** 			for (n = 0; tp[n]; n++) ;
2961:../Sources/ff10b/src/ff.c **** 			if (i < n + 3) {
2962:../Sources/ff10b/src/ff.c **** 				res = FR_NOT_ENOUGH_CORE; break;
2963:../Sources/ff10b/src/ff.c **** 			}
2964:../Sources/ff10b/src/ff.c **** 			while (n) buff[--i] = tp[--n];
2965:../Sources/ff10b/src/ff.c **** 			buff[--i] = '/';
2966:../Sources/ff10b/src/ff.c **** 		}
2967:../Sources/ff10b/src/ff.c **** 		tp = buff;
2968:../Sources/ff10b/src/ff.c **** 		if (res == FR_OK) {
2969:../Sources/ff10b/src/ff.c **** #if _VOLUMES >= 2
2970:../Sources/ff10b/src/ff.c **** 			*tp++ = '0' + CurrVol;			/* Put drive number */
2971:../Sources/ff10b/src/ff.c **** 			*tp++ = ':';
2972:../Sources/ff10b/src/ff.c **** #endif
2973:../Sources/ff10b/src/ff.c **** 			if (i == len) {					/* Root-directory */
2974:../Sources/ff10b/src/ff.c **** 				*tp++ = '/';
2975:../Sources/ff10b/src/ff.c **** 			} else {						/* Sub-directroy */
2976:../Sources/ff10b/src/ff.c **** 				do		/* Add stacked path str */
2977:../Sources/ff10b/src/ff.c **** 					*tp++ = buff[i++];
2978:../Sources/ff10b/src/ff.c **** 				while (i < len);
2979:../Sources/ff10b/src/ff.c **** 			}
2980:../Sources/ff10b/src/ff.c **** 		}
2981:../Sources/ff10b/src/ff.c **** 		*tp = 0;
2982:../Sources/ff10b/src/ff.c **** 		FREE_BUF();
2983:../Sources/ff10b/src/ff.c **** 	}
2984:../Sources/ff10b/src/ff.c **** 
2985:../Sources/ff10b/src/ff.c **** 	LEAVE_FF(dj.fs, res);
2986:../Sources/ff10b/src/ff.c **** }
2987:../Sources/ff10b/src/ff.c **** #endif /* _FS_RPATH >= 2 */
2988:../Sources/ff10b/src/ff.c **** #endif /* _FS_RPATH >= 1 */
2989:../Sources/ff10b/src/ff.c **** 
2990:../Sources/ff10b/src/ff.c **** 
2991:../Sources/ff10b/src/ff.c **** 
2992:../Sources/ff10b/src/ff.c **** #if _FS_MINIMIZE <= 2
2993:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
2994:../Sources/ff10b/src/ff.c **** /* Seek File R/W Pointer                                                 */
2995:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
2996:../Sources/ff10b/src/ff.c **** 
2997:../Sources/ff10b/src/ff.c **** FRESULT f_lseek (
2998:../Sources/ff10b/src/ff.c **** 	FIL* fp,		/* Pointer to the file object */
2999:../Sources/ff10b/src/ff.c **** 	DWORD ofs		/* File pointer from top of file */
3000:../Sources/ff10b/src/ff.c **** )
3001:../Sources/ff10b/src/ff.c **** {
 6092              		.loc 1 3001 0
 6093              		.cfi_startproc
 6094              		@ args = 0, pretend = 0, frame = 32
 6095              		@ frame_needed = 1, uses_anonymous_args = 0
 6096 27f8 80B5     		push	{r7, lr}
 6097              	.LCFI104:
 6098              		.cfi_def_cfa_offset 8
 6099              		.cfi_offset 7, -8
 6100              		.cfi_offset 14, -4
 6101 27fa 88B0     		sub	sp, sp, #32
 6102              	.LCFI105:
 6103              		.cfi_def_cfa_offset 40
 6104 27fc 00AF     		add	r7, sp, #0
 6105              	.LCFI106:
 6106              		.cfi_def_cfa_register 7
 6107 27fe 7860     		str	r0, [r7, #4]
 6108 2800 3960     		str	r1, [r7, #0]
3002:../Sources/ff10b/src/ff.c **** 	FRESULT res;
3003:../Sources/ff10b/src/ff.c **** 
3004:../Sources/ff10b/src/ff.c **** 
3005:../Sources/ff10b/src/ff.c **** 	res = validate(fp);					/* Check validity of the object */
 6109              		.loc 1 3005 0
 6110 2802 7868     		ldr	r0, [r7, #4]
 6111 2804 FFF736FA 		bl	validate
 6112 2808 0346     		mov	r3, r0
 6113 280a FB75     		strb	r3, [r7, #23]
3006:../Sources/ff10b/src/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 6114              		.loc 1 3006 0
 6115 280c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 6116 280e 002B     		cmp	r3, #0
 6117 2810 01D0     		beq	.L382
 6118              		.loc 1 3006 0 is_stmt 0 discriminator 1
 6119 2812 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 6120 2814 40E1     		b	.L383
 6121              	.L382:
3007:../Sources/ff10b/src/ff.c **** 	if (fp->err)						/* Check error */
 6122              		.loc 1 3007 0 is_stmt 1
 6123 2816 7B68     		ldr	r3, [r7, #4]
 6124 2818 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 6125 281a 002B     		cmp	r3, #0
 6126 281c 02D0     		beq	.L384
3008:../Sources/ff10b/src/ff.c **** 		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 6127              		.loc 1 3008 0
 6128 281e 7B68     		ldr	r3, [r7, #4]
 6129 2820 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 6130 2822 39E1     		b	.L383
 6131              	.L384:
 6132              	.LBB7:
3009:../Sources/ff10b/src/ff.c **** 
3010:../Sources/ff10b/src/ff.c **** #if _USE_FASTSEEK
3011:../Sources/ff10b/src/ff.c **** 	if (fp->cltbl) {	/* Fast seek */
3012:../Sources/ff10b/src/ff.c **** 		DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
3013:../Sources/ff10b/src/ff.c **** 
3014:../Sources/ff10b/src/ff.c **** 		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
3015:../Sources/ff10b/src/ff.c **** 			tbl = fp->cltbl;
3016:../Sources/ff10b/src/ff.c **** 			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
3017:../Sources/ff10b/src/ff.c **** 			cl = fp->sclust;			/* Top of the chain */
3018:../Sources/ff10b/src/ff.c **** 			if (cl) {
3019:../Sources/ff10b/src/ff.c **** 				do {
3020:../Sources/ff10b/src/ff.c **** 					/* Get a fragment */
3021:../Sources/ff10b/src/ff.c **** 					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
3022:../Sources/ff10b/src/ff.c **** 					do {
3023:../Sources/ff10b/src/ff.c **** 						pcl = cl; ncl++;
3024:../Sources/ff10b/src/ff.c **** 						cl = get_fat(fp->fs, cl);
3025:../Sources/ff10b/src/ff.c **** 						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
3026:../Sources/ff10b/src/ff.c **** 						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
3027:../Sources/ff10b/src/ff.c **** 					} while (cl == pcl + 1);
3028:../Sources/ff10b/src/ff.c **** 					if (ulen <= tlen) {		/* Store the length and top of the fragment */
3029:../Sources/ff10b/src/ff.c **** 						*tbl++ = ncl; *tbl++ = tcl;
3030:../Sources/ff10b/src/ff.c **** 					}
3031:../Sources/ff10b/src/ff.c **** 				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
3032:../Sources/ff10b/src/ff.c **** 			}
3033:../Sources/ff10b/src/ff.c **** 			*fp->cltbl = ulen;	/* Number of items used */
3034:../Sources/ff10b/src/ff.c **** 			if (ulen <= tlen)
3035:../Sources/ff10b/src/ff.c **** 				*tbl = 0;		/* Terminate table */
3036:../Sources/ff10b/src/ff.c **** 			else
3037:../Sources/ff10b/src/ff.c **** 				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
3038:../Sources/ff10b/src/ff.c **** 
3039:../Sources/ff10b/src/ff.c **** 		} else {						/* Fast seek */
3040:../Sources/ff10b/src/ff.c **** 			if (ofs > fp->fsize)		/* Clip offset at the file size */
3041:../Sources/ff10b/src/ff.c **** 				ofs = fp->fsize;
3042:../Sources/ff10b/src/ff.c **** 			fp->fptr = ofs;				/* Set file pointer */
3043:../Sources/ff10b/src/ff.c **** 			if (ofs) {
3044:../Sources/ff10b/src/ff.c **** 				fp->clust = clmt_clust(fp, ofs - 1);
3045:../Sources/ff10b/src/ff.c **** 				dsc = clust2sect(fp->fs, fp->clust);
3046:../Sources/ff10b/src/ff.c **** 				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
3047:../Sources/ff10b/src/ff.c **** 				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
3048:../Sources/ff10b/src/ff.c **** 				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
3049:../Sources/ff10b/src/ff.c **** #if !_FS_TINY
3050:../Sources/ff10b/src/ff.c **** #if !_FS_READONLY
3051:../Sources/ff10b/src/ff.c **** 					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
3052:../Sources/ff10b/src/ff.c **** 						if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1))
3053:../Sources/ff10b/src/ff.c **** 							ABORT(fp->fs, FR_DISK_ERR);
3054:../Sources/ff10b/src/ff.c **** 						fp->flag &= ~FA__DIRTY;
3055:../Sources/ff10b/src/ff.c **** 					}
3056:../Sources/ff10b/src/ff.c **** #endif
3057:../Sources/ff10b/src/ff.c **** 					if (disk_read(fp->fs->drv, fp->buf, dsc, 1))	/* Load current sector */
3058:../Sources/ff10b/src/ff.c **** 						ABORT(fp->fs, FR_DISK_ERR);
3059:../Sources/ff10b/src/ff.c **** #endif
3060:../Sources/ff10b/src/ff.c **** 					fp->dsect = dsc;
3061:../Sources/ff10b/src/ff.c **** 				}
3062:../Sources/ff10b/src/ff.c **** 			}
3063:../Sources/ff10b/src/ff.c **** 		}
3064:../Sources/ff10b/src/ff.c **** 	} else
3065:../Sources/ff10b/src/ff.c **** #endif
3066:../Sources/ff10b/src/ff.c **** 
3067:../Sources/ff10b/src/ff.c **** 	/* Normal Seek */
3068:../Sources/ff10b/src/ff.c **** 	{
3069:../Sources/ff10b/src/ff.c **** 		DWORD clst, bcs, nsect, ifptr;
3070:../Sources/ff10b/src/ff.c **** 
3071:../Sources/ff10b/src/ff.c **** 		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 6133              		.loc 1 3071 0
 6134 2824 7B68     		ldr	r3, [r7, #4]
 6135 2826 DA68     		ldr	r2, [r3, #12]
 6136 2828 3B68     		ldr	r3, [r7, #0]
 6137 282a 9A42     		cmp	r2, r3
 6138 282c 08D2     		bcs	.L385
3072:../Sources/ff10b/src/ff.c **** #if !_FS_READONLY
3073:../Sources/ff10b/src/ff.c **** 			 && !(fp->flag & FA_WRITE)
 6139              		.loc 1 3073 0
 6140 282e 7B68     		ldr	r3, [r7, #4]
 6141 2830 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 6142 2832 03F00203 		and	r3, r3, #2
 6143 2836 002B     		cmp	r3, #0
 6144 2838 02D1     		bne	.L385
3074:../Sources/ff10b/src/ff.c **** #endif
3075:../Sources/ff10b/src/ff.c **** 			) ofs = fp->fsize;
 6145              		.loc 1 3075 0
 6146 283a 7B68     		ldr	r3, [r7, #4]
 6147 283c DB68     		ldr	r3, [r3, #12]
 6148 283e 3B60     		str	r3, [r7, #0]
 6149              	.L385:
3076:../Sources/ff10b/src/ff.c **** 
3077:../Sources/ff10b/src/ff.c **** 		ifptr = fp->fptr;
 6150              		.loc 1 3077 0
 6151 2840 7B68     		ldr	r3, [r7, #4]
 6152 2842 9B68     		ldr	r3, [r3, #8]
 6153 2844 3B61     		str	r3, [r7, #16]
3078:../Sources/ff10b/src/ff.c **** 		fp->fptr = nsect = 0;
 6154              		.loc 1 3078 0
 6155 2846 4FF00003 		mov	r3, #0
 6156 284a BB61     		str	r3, [r7, #24]
 6157 284c 7B68     		ldr	r3, [r7, #4]
 6158 284e BA69     		ldr	r2, [r7, #24]
 6159 2850 9A60     		str	r2, [r3, #8]
3079:../Sources/ff10b/src/ff.c **** 		if (ofs) {
 6160              		.loc 1 3079 0
 6161 2852 3B68     		ldr	r3, [r7, #0]
 6162 2854 002B     		cmp	r3, #0
 6163 2856 00F0C080 		beq	.L386
3080:../Sources/ff10b/src/ff.c **** 			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 6164              		.loc 1 3080 0
 6165 285a 7B68     		ldr	r3, [r7, #4]
 6166 285c 1B68     		ldr	r3, [r3, #0]
 6167 285e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 6168 2860 4FEA4323 		lsl	r3, r3, #9
 6169 2864 FB60     		str	r3, [r7, #12]
3081:../Sources/ff10b/src/ff.c **** 			if (ifptr > 0 &&
 6170              		.loc 1 3081 0
 6171 2866 3B69     		ldr	r3, [r7, #16]
 6172 2868 002B     		cmp	r3, #0
 6173 286a 1FD0     		beq	.L387
3082:../Sources/ff10b/src/ff.c **** 				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 6174              		.loc 1 3082 0 discriminator 1
 6175 286c 3B68     		ldr	r3, [r7, #0]
 6176 286e 03F1FF32 		add	r2, r3, #-1
 6177 2872 FB68     		ldr	r3, [r7, #12]
 6178 2874 B2FBF3F2 		udiv	r2, r2, r3
 6179 2878 3B69     		ldr	r3, [r7, #16]
 6180 287a 03F1FF31 		add	r1, r3, #-1
 6181 287e FB68     		ldr	r3, [r7, #12]
 6182 2880 B1FBF3F3 		udiv	r3, r1, r3
3081:../Sources/ff10b/src/ff.c **** 			if (ifptr > 0 &&
 6183              		.loc 1 3081 0 discriminator 1
 6184 2884 9A42     		cmp	r2, r3
 6185 2886 11D3     		bcc	.L387
3083:../Sources/ff10b/src/ff.c **** 				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 6186              		.loc 1 3083 0
 6187 2888 3B69     		ldr	r3, [r7, #16]
 6188 288a 03F1FF32 		add	r2, r3, #-1
 6189 288e FB68     		ldr	r3, [r7, #12]
 6190 2890 C3F10003 		rsb	r3, r3, #0
 6191 2894 1A40     		ands	r2, r2, r3
 6192 2896 7B68     		ldr	r3, [r7, #4]
 6193 2898 9A60     		str	r2, [r3, #8]
3084:../Sources/ff10b/src/ff.c **** 				ofs -= fp->fptr;
 6194              		.loc 1 3084 0
 6195 289a 7B68     		ldr	r3, [r7, #4]
 6196 289c 9B68     		ldr	r3, [r3, #8]
 6197 289e 3A68     		ldr	r2, [r7, #0]
 6198 28a0 D31A     		subs	r3, r2, r3
 6199 28a2 3B60     		str	r3, [r7, #0]
3085:../Sources/ff10b/src/ff.c **** 				clst = fp->clust;
 6200              		.loc 1 3085 0
 6201 28a4 7B68     		ldr	r3, [r7, #4]
 6202 28a6 5B69     		ldr	r3, [r3, #20]
 6203 28a8 FB61     		str	r3, [r7, #28]
 6204 28aa 28E0     		b	.L388
 6205              	.L387:
3086:../Sources/ff10b/src/ff.c **** 			} else {									/* When seek to back cluster, */
3087:../Sources/ff10b/src/ff.c **** 				clst = fp->sclust;						/* start from the first cluster */
 6206              		.loc 1 3087 0
 6207 28ac 7B68     		ldr	r3, [r7, #4]
 6208 28ae 1B69     		ldr	r3, [r3, #16]
 6209 28b0 FB61     		str	r3, [r7, #28]
3088:../Sources/ff10b/src/ff.c **** #if !_FS_READONLY
3089:../Sources/ff10b/src/ff.c **** 				if (clst == 0) {						/* If no cluster chain, create a new chain */
 6210              		.loc 1 3089 0
 6211 28b2 FB69     		ldr	r3, [r7, #28]
 6212 28b4 002B     		cmp	r3, #0
 6213 28b6 1FD1     		bne	.L389
3090:../Sources/ff10b/src/ff.c **** 					clst = create_chain(fp->fs, 0);
 6214              		.loc 1 3090 0
 6215 28b8 7B68     		ldr	r3, [r7, #4]
 6216 28ba 1B68     		ldr	r3, [r3, #0]
 6217 28bc 1846     		mov	r0, r3
 6218 28be 4FF00001 		mov	r1, #0
 6219 28c2 FDF7F7FF 		bl	create_chain
 6220 28c6 F861     		str	r0, [r7, #28]
3091:../Sources/ff10b/src/ff.c **** 					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 6221              		.loc 1 3091 0
 6222 28c8 FB69     		ldr	r3, [r7, #28]
 6223 28ca 012B     		cmp	r3, #1
 6224 28cc 06D1     		bne	.L390
 6225              		.loc 1 3091 0 is_stmt 0 discriminator 1
 6226 28ce 7B68     		ldr	r3, [r7, #4]
 6227 28d0 4FF00202 		mov	r2, #2
 6228 28d4 DA71     		strb	r2, [r3, #7]
 6229 28d6 4FF00203 		mov	r3, #2
 6230 28da DDE0     		b	.L383
 6231              	.L390:
3092:../Sources/ff10b/src/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 6232              		.loc 1 3092 0 is_stmt 1
 6233 28dc FB69     		ldr	r3, [r7, #28]
 6234 28de B3F1FF3F 		cmp	r3, #-1
 6235 28e2 06D1     		bne	.L391
 6236              		.loc 1 3092 0 is_stmt 0 discriminator 1
 6237 28e4 7B68     		ldr	r3, [r7, #4]
 6238 28e6 4FF00102 		mov	r2, #1
 6239 28ea DA71     		strb	r2, [r3, #7]
 6240 28ec 4FF00103 		mov	r3, #1
 6241 28f0 D2E0     		b	.L383
 6242              	.L391:
3093:../Sources/ff10b/src/ff.c **** 					fp->sclust = clst;
 6243              		.loc 1 3093 0 is_stmt 1
 6244 28f2 7B68     		ldr	r3, [r7, #4]
 6245 28f4 FA69     		ldr	r2, [r7, #28]
 6246 28f6 1A61     		str	r2, [r3, #16]
 6247              	.L389:
3094:../Sources/ff10b/src/ff.c **** 				}
3095:../Sources/ff10b/src/ff.c **** #endif
3096:../Sources/ff10b/src/ff.c **** 				fp->clust = clst;
 6248              		.loc 1 3096 0
 6249 28f8 7B68     		ldr	r3, [r7, #4]
 6250 28fa FA69     		ldr	r2, [r7, #28]
 6251 28fc 5A61     		str	r2, [r3, #20]
 6252              	.L388:
3097:../Sources/ff10b/src/ff.c **** 			}
3098:../Sources/ff10b/src/ff.c **** 			if (clst != 0) {
 6253              		.loc 1 3098 0
 6254 28fe FB69     		ldr	r3, [r7, #28]
 6255 2900 002B     		cmp	r3, #0
 6256 2902 6AD0     		beq	.L386
3099:../Sources/ff10b/src/ff.c **** 				while (ofs > bcs) {						/* Cluster following loop */
 6257              		.loc 1 3099 0
 6258 2904 41E0     		b	.L392
 6259              	.L399:
3100:../Sources/ff10b/src/ff.c **** #if !_FS_READONLY
3101:../Sources/ff10b/src/ff.c **** 					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 6260              		.loc 1 3101 0
 6261 2906 7B68     		ldr	r3, [r7, #4]
 6262 2908 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 6263 290a 03F00203 		and	r3, r3, #2
 6264 290e 002B     		cmp	r3, #0
 6265 2910 0CD0     		beq	.L393
3102:../Sources/ff10b/src/ff.c **** 						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 6266              		.loc 1 3102 0
 6267 2912 7B68     		ldr	r3, [r7, #4]
 6268 2914 1B68     		ldr	r3, [r3, #0]
 6269 2916 1846     		mov	r0, r3
 6270 2918 F969     		ldr	r1, [r7, #28]
 6271 291a FDF7CBFF 		bl	create_chain
 6272 291e F861     		str	r0, [r7, #28]
3103:../Sources/ff10b/src/ff.c **** 						if (clst == 0) {				/* When disk gets full, clip file size */
 6273              		.loc 1 3103 0
 6274 2920 FB69     		ldr	r3, [r7, #28]
 6275 2922 002B     		cmp	r3, #0
 6276 2924 09D1     		bne	.L394
3104:../Sources/ff10b/src/ff.c **** 							ofs = bcs; break;
 6277              		.loc 1 3104 0
 6278 2926 FB68     		ldr	r3, [r7, #12]
 6279 2928 3B60     		str	r3, [r7, #0]
 6280 292a 32E0     		b	.L395
 6281              	.L393:
3105:../Sources/ff10b/src/ff.c **** 						}
3106:../Sources/ff10b/src/ff.c **** 					} else
3107:../Sources/ff10b/src/ff.c **** #endif
3108:../Sources/ff10b/src/ff.c **** 						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 6282              		.loc 1 3108 0
 6283 292c 7B68     		ldr	r3, [r7, #4]
 6284 292e 1B68     		ldr	r3, [r3, #0]
 6285 2930 1846     		mov	r0, r3
 6286 2932 F969     		ldr	r1, [r7, #28]
 6287 2934 FFF7FEFF 		bl	get_fat
 6288 2938 F861     		str	r0, [r7, #28]
 6289              	.L394:
3109:../Sources/ff10b/src/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 6290              		.loc 1 3109 0
 6291 293a FB69     		ldr	r3, [r7, #28]
 6292 293c B3F1FF3F 		cmp	r3, #-1
 6293 2940 06D1     		bne	.L396
 6294              		.loc 1 3109 0 is_stmt 0 discriminator 1
 6295 2942 7B68     		ldr	r3, [r7, #4]
 6296 2944 4FF00102 		mov	r2, #1
 6297 2948 DA71     		strb	r2, [r3, #7]
 6298 294a 4FF00103 		mov	r3, #1
 6299 294e A3E0     		b	.L383
 6300              	.L396:
3110:../Sources/ff10b/src/ff.c **** 					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 6301              		.loc 1 3110 0 is_stmt 1
 6302 2950 FB69     		ldr	r3, [r7, #28]
 6303 2952 012B     		cmp	r3, #1
 6304 2954 05D9     		bls	.L397
 6305              		.loc 1 3110 0 is_stmt 0 discriminator 2
 6306 2956 7B68     		ldr	r3, [r7, #4]
 6307 2958 1B68     		ldr	r3, [r3, #0]
 6308 295a 5A69     		ldr	r2, [r3, #20]
 6309 295c FB69     		ldr	r3, [r7, #28]
 6310 295e 9A42     		cmp	r2, r3
 6311 2960 06D8     		bhi	.L398
 6312              	.L397:
 6313              		.loc 1 3110 0 discriminator 1
 6314 2962 7B68     		ldr	r3, [r7, #4]
 6315 2964 4FF00202 		mov	r2, #2
 6316 2968 DA71     		strb	r2, [r3, #7]
 6317 296a 4FF00203 		mov	r3, #2
 6318 296e 93E0     		b	.L383
 6319              	.L398:
3111:../Sources/ff10b/src/ff.c **** 					fp->clust = clst;
 6320              		.loc 1 3111 0 is_stmt 1
 6321 2970 7B68     		ldr	r3, [r7, #4]
 6322 2972 FA69     		ldr	r2, [r7, #28]
 6323 2974 5A61     		str	r2, [r3, #20]
3112:../Sources/ff10b/src/ff.c **** 					fp->fptr += bcs;
 6324              		.loc 1 3112 0
 6325 2976 7B68     		ldr	r3, [r7, #4]
 6326 2978 9A68     		ldr	r2, [r3, #8]
 6327 297a FB68     		ldr	r3, [r7, #12]
 6328 297c D218     		adds	r2, r2, r3
 6329 297e 7B68     		ldr	r3, [r7, #4]
 6330 2980 9A60     		str	r2, [r3, #8]
3113:../Sources/ff10b/src/ff.c **** 					ofs -= bcs;
 6331              		.loc 1 3113 0
 6332 2982 3A68     		ldr	r2, [r7, #0]
 6333 2984 FB68     		ldr	r3, [r7, #12]
 6334 2986 D31A     		subs	r3, r2, r3
 6335 2988 3B60     		str	r3, [r7, #0]
 6336              	.L392:
3099:../Sources/ff10b/src/ff.c **** 				while (ofs > bcs) {						/* Cluster following loop */
 6337              		.loc 1 3099 0 discriminator 1
 6338 298a 3A68     		ldr	r2, [r7, #0]
 6339 298c FB68     		ldr	r3, [r7, #12]
 6340 298e 9A42     		cmp	r2, r3
 6341 2990 B9D8     		bhi	.L399
 6342              	.L395:
3114:../Sources/ff10b/src/ff.c **** 				}
3115:../Sources/ff10b/src/ff.c **** 				fp->fptr += ofs;
 6343              		.loc 1 3115 0
 6344 2992 7B68     		ldr	r3, [r7, #4]
 6345 2994 9A68     		ldr	r2, [r3, #8]
 6346 2996 3B68     		ldr	r3, [r7, #0]
 6347 2998 D218     		adds	r2, r2, r3
 6348 299a 7B68     		ldr	r3, [r7, #4]
 6349 299c 9A60     		str	r2, [r3, #8]
3116:../Sources/ff10b/src/ff.c **** 				if (ofs % SS(fp->fs)) {
 6350              		.loc 1 3116 0
 6351 299e 3B68     		ldr	r3, [r7, #0]
 6352 29a0 4FEAC353 		lsl	r3, r3, #23
 6353 29a4 4FEAD353 		lsr	r3, r3, #23
 6354 29a8 002B     		cmp	r3, #0
 6355 29aa 16D0     		beq	.L386
3117:../Sources/ff10b/src/ff.c **** 					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 6356              		.loc 1 3117 0
 6357 29ac 7B68     		ldr	r3, [r7, #4]
 6358 29ae 1B68     		ldr	r3, [r3, #0]
 6359 29b0 1846     		mov	r0, r3
 6360 29b2 F969     		ldr	r1, [r7, #28]
 6361 29b4 FFF7FEFF 		bl	clust2sect
 6362 29b8 B861     		str	r0, [r7, #24]
3118:../Sources/ff10b/src/ff.c **** 					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 6363              		.loc 1 3118 0
 6364 29ba BB69     		ldr	r3, [r7, #24]
 6365 29bc 002B     		cmp	r3, #0
 6366 29be 06D1     		bne	.L400
 6367              		.loc 1 3118 0 is_stmt 0 discriminator 1
 6368 29c0 7B68     		ldr	r3, [r7, #4]
 6369 29c2 4FF00202 		mov	r2, #2
 6370 29c6 DA71     		strb	r2, [r3, #7]
 6371 29c8 4FF00203 		mov	r3, #2
 6372 29cc 64E0     		b	.L383
 6373              	.L400:
3119:../Sources/ff10b/src/ff.c **** 					nsect += ofs / SS(fp->fs);
 6374              		.loc 1 3119 0 is_stmt 1
 6375 29ce 3B68     		ldr	r3, [r7, #0]
 6376 29d0 4FEA5323 		lsr	r3, r3, #9
 6377 29d4 BA69     		ldr	r2, [r7, #24]
 6378 29d6 D318     		adds	r3, r2, r3
 6379 29d8 BB61     		str	r3, [r7, #24]
 6380              	.L386:
3120:../Sources/ff10b/src/ff.c **** 				}
3121:../Sources/ff10b/src/ff.c **** 			}
3122:../Sources/ff10b/src/ff.c **** 		}
3123:../Sources/ff10b/src/ff.c **** 		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 6381              		.loc 1 3123 0
 6382 29da 7B68     		ldr	r3, [r7, #4]
 6383 29dc 9B68     		ldr	r3, [r3, #8]
 6384 29de 4FEAC353 		lsl	r3, r3, #23
 6385 29e2 4FEAD353 		lsr	r3, r3, #23
 6386 29e6 002B     		cmp	r3, #0
 6387 29e8 44D0     		beq	.L401
 6388              		.loc 1 3123 0 is_stmt 0 discriminator 1
 6389 29ea 7B68     		ldr	r3, [r7, #4]
 6390 29ec 9A69     		ldr	r2, [r3, #24]
 6391 29ee BB69     		ldr	r3, [r7, #24]
 6392 29f0 9A42     		cmp	r2, r3
 6393 29f2 3FD0     		beq	.L401
3124:../Sources/ff10b/src/ff.c **** #if !_FS_TINY
3125:../Sources/ff10b/src/ff.c **** #if !_FS_READONLY
3126:../Sources/ff10b/src/ff.c **** 			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 6394              		.loc 1 3126 0 is_stmt 1
 6395 29f4 7B68     		ldr	r3, [r7, #4]
 6396 29f6 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 6397 29f8 03F04003 		and	r3, r3, #64
 6398 29fc 002B     		cmp	r3, #0
 6399 29fe 1FD0     		beq	.L402
3127:../Sources/ff10b/src/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1))
 6400              		.loc 1 3127 0
 6401 2a00 7B68     		ldr	r3, [r7, #4]
 6402 2a02 1B68     		ldr	r3, [r3, #0]
 6403 2a04 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
 6404 2a06 7B68     		ldr	r3, [r7, #4]
 6405 2a08 03F12402 		add	r2, r3, #36
 6406 2a0c 7B68     		ldr	r3, [r7, #4]
 6407 2a0e 9B69     		ldr	r3, [r3, #24]
 6408 2a10 0846     		mov	r0, r1
 6409 2a12 1146     		mov	r1, r2
 6410 2a14 1A46     		mov	r2, r3
 6411 2a16 4FF00103 		mov	r3, #1
 6412 2a1a FFF7FEFF 		bl	disk_write
 6413 2a1e 0346     		mov	r3, r0
 6414 2a20 002B     		cmp	r3, #0
 6415 2a22 06D0     		beq	.L403
3128:../Sources/ff10b/src/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 6416              		.loc 1 3128 0
 6417 2a24 7B68     		ldr	r3, [r7, #4]
 6418 2a26 4FF00102 		mov	r2, #1
 6419 2a2a DA71     		strb	r2, [r3, #7]
 6420 2a2c 4FF00103 		mov	r3, #1
 6421 2a30 32E0     		b	.L383
 6422              	.L403:
3129:../Sources/ff10b/src/ff.c **** 				fp->flag &= ~FA__DIRTY;
 6423              		.loc 1 3129 0
 6424 2a32 7B68     		ldr	r3, [r7, #4]
 6425 2a34 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 6426 2a36 23F04003 		bic	r3, r3, #64
 6427 2a3a DAB2     		uxtb	r2, r3
 6428 2a3c 7B68     		ldr	r3, [r7, #4]
 6429 2a3e 9A71     		strb	r2, [r3, #6]
 6430              	.L402:
3130:../Sources/ff10b/src/ff.c **** 			}
3131:../Sources/ff10b/src/ff.c **** #endif
3132:../Sources/ff10b/src/ff.c **** 			if (disk_read(fp->fs->drv, fp->buf, nsect, 1))	/* Fill sector cache */
 6431              		.loc 1 3132 0
 6432 2a40 7B68     		ldr	r3, [r7, #4]
 6433 2a42 1B68     		ldr	r3, [r3, #0]
 6434 2a44 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 6435 2a46 7B68     		ldr	r3, [r7, #4]
 6436 2a48 03F12403 		add	r3, r3, #36
 6437 2a4c 1046     		mov	r0, r2
 6438 2a4e 1946     		mov	r1, r3
 6439 2a50 BA69     		ldr	r2, [r7, #24]
 6440 2a52 4FF00103 		mov	r3, #1
 6441 2a56 FFF7FEFF 		bl	disk_read
 6442 2a5a 0346     		mov	r3, r0
 6443 2a5c 002B     		cmp	r3, #0
 6444 2a5e 06D0     		beq	.L404
3133:../Sources/ff10b/src/ff.c **** 				ABORT(fp->fs, FR_DISK_ERR);
 6445              		.loc 1 3133 0
 6446 2a60 7B68     		ldr	r3, [r7, #4]
 6447 2a62 4FF00102 		mov	r2, #1
 6448 2a66 DA71     		strb	r2, [r3, #7]
 6449 2a68 4FF00103 		mov	r3, #1
 6450 2a6c 14E0     		b	.L383
 6451              	.L404:
3134:../Sources/ff10b/src/ff.c **** #endif
3135:../Sources/ff10b/src/ff.c **** 			fp->dsect = nsect;
 6452              		.loc 1 3135 0
 6453 2a6e 7B68     		ldr	r3, [r7, #4]
 6454 2a70 BA69     		ldr	r2, [r7, #24]
 6455 2a72 9A61     		str	r2, [r3, #24]
 6456              	.L401:
3136:../Sources/ff10b/src/ff.c **** 		}
3137:../Sources/ff10b/src/ff.c **** #if !_FS_READONLY
3138:../Sources/ff10b/src/ff.c **** 		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 6457              		.loc 1 3138 0
 6458 2a74 7B68     		ldr	r3, [r7, #4]
 6459 2a76 9A68     		ldr	r2, [r3, #8]
 6460 2a78 7B68     		ldr	r3, [r7, #4]
 6461 2a7a DB68     		ldr	r3, [r3, #12]
 6462 2a7c 9A42     		cmp	r2, r3
 6463 2a7e 0AD9     		bls	.L405
3139:../Sources/ff10b/src/ff.c **** 			fp->fsize = fp->fptr;
 6464              		.loc 1 3139 0
 6465 2a80 7B68     		ldr	r3, [r7, #4]
 6466 2a82 9A68     		ldr	r2, [r3, #8]
 6467 2a84 7B68     		ldr	r3, [r7, #4]
 6468 2a86 DA60     		str	r2, [r3, #12]
3140:../Sources/ff10b/src/ff.c **** 			fp->flag |= FA__WRITTEN;
 6469              		.loc 1 3140 0
 6470 2a88 7B68     		ldr	r3, [r7, #4]
 6471 2a8a 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 6472 2a8c 43F02003 		orr	r3, r3, #32
 6473 2a90 DAB2     		uxtb	r2, r3
 6474 2a92 7B68     		ldr	r3, [r7, #4]
 6475 2a94 9A71     		strb	r2, [r3, #6]
 6476              	.L405:
 6477              	.LBE7:
3141:../Sources/ff10b/src/ff.c **** 		}
3142:../Sources/ff10b/src/ff.c **** #endif
3143:../Sources/ff10b/src/ff.c **** 	}
3144:../Sources/ff10b/src/ff.c **** 
3145:../Sources/ff10b/src/ff.c **** 	LEAVE_FF(fp->fs, res);
 6478              		.loc 1 3145 0
 6479 2a96 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 6480              	.L383:
3146:../Sources/ff10b/src/ff.c **** }
 6481              		.loc 1 3146 0
 6482 2a98 1846     		mov	r0, r3
 6483 2a9a 07F12007 		add	r7, r7, #32
 6484 2a9e BD46     		mov	sp, r7
 6485 2aa0 80BD     		pop	{r7, pc}
 6486              		.cfi_endproc
 6487              	.LFE35:
 6489 2aa2 00BF     		.align	2
 6490              		.global	f_opendir
 6491              		.thumb
 6492              		.thumb_func
 6494              	f_opendir:
 6495              	.LFB36:
3147:../Sources/ff10b/src/ff.c **** 
3148:../Sources/ff10b/src/ff.c **** 
3149:../Sources/ff10b/src/ff.c **** 
3150:../Sources/ff10b/src/ff.c **** #if _FS_MINIMIZE <= 1
3151:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
3152:../Sources/ff10b/src/ff.c **** /* Create a Directory Object                                             */
3153:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
3154:../Sources/ff10b/src/ff.c **** 
3155:../Sources/ff10b/src/ff.c **** FRESULT f_opendir (
3156:../Sources/ff10b/src/ff.c **** 	DIR* dp,			/* Pointer to directory object to create */
3157:../Sources/ff10b/src/ff.c **** 	const TCHAR* path	/* Pointer to the directory path */
3158:../Sources/ff10b/src/ff.c **** )
3159:../Sources/ff10b/src/ff.c **** {
 6496              		.loc 1 3159 0
 6497              		.cfi_startproc
 6498              		@ args = 0, pretend = 0, frame = 32
 6499              		@ frame_needed = 1, uses_anonymous_args = 0
 6500 2aa4 80B5     		push	{r7, lr}
 6501              	.LCFI107:
 6502              		.cfi_def_cfa_offset 8
 6503              		.cfi_offset 7, -8
 6504              		.cfi_offset 14, -4
 6505 2aa6 88B0     		sub	sp, sp, #32
 6506              	.LCFI108:
 6507              		.cfi_def_cfa_offset 40
 6508 2aa8 00AF     		add	r7, sp, #0
 6509              	.LCFI109:
 6510              		.cfi_def_cfa_register 7
 6511 2aaa 7860     		str	r0, [r7, #4]
 6512 2aac 3960     		str	r1, [r7, #0]
3160:../Sources/ff10b/src/ff.c **** 	FRESULT res;
3161:../Sources/ff10b/src/ff.c **** 	FATFS* fs;
3162:../Sources/ff10b/src/ff.c **** 	DEF_NAMEBUF;
3163:../Sources/ff10b/src/ff.c **** 
3164:../Sources/ff10b/src/ff.c **** 
3165:../Sources/ff10b/src/ff.c **** 	if (!dp) return FR_INVALID_OBJECT;
 6513              		.loc 1 3165 0
 6514 2aae 7B68     		ldr	r3, [r7, #4]
 6515 2ab0 002B     		cmp	r3, #0
 6516 2ab2 02D1     		bne	.L407
 6517              		.loc 1 3165 0 is_stmt 0 discriminator 1
 6518 2ab4 4FF00903 		mov	r3, #9
 6519 2ab8 55E0     		b	.L414
 6520              	.L407:
3166:../Sources/ff10b/src/ff.c **** 
3167:../Sources/ff10b/src/ff.c **** 	/* Get logical drive number */
3168:../Sources/ff10b/src/ff.c **** 	res = find_volume(&fs, &path, 0);
 6521              		.loc 1 3168 0 is_stmt 1
 6522 2aba 07F11802 		add	r2, r7, #24
 6523 2abe 3B46     		mov	r3, r7
 6524 2ac0 1046     		mov	r0, r2
 6525 2ac2 1946     		mov	r1, r3
 6526 2ac4 4FF00002 		mov	r2, #0
 6527 2ac8 FEF7C8FD 		bl	find_volume
 6528 2acc 0346     		mov	r3, r0
 6529 2ace FB77     		strb	r3, [r7, #31]
3169:../Sources/ff10b/src/ff.c **** 	if (res == FR_OK) {
 6530              		.loc 1 3169 0
 6531 2ad0 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 6532 2ad2 002B     		cmp	r3, #0
 6533 2ad4 3FD1     		bne	.L409
3170:../Sources/ff10b/src/ff.c **** 		dp->fs = fs;
 6534              		.loc 1 3170 0
 6535 2ad6 BA69     		ldr	r2, [r7, #24]
 6536 2ad8 7B68     		ldr	r3, [r7, #4]
 6537 2ada 1A60     		str	r2, [r3, #0]
3171:../Sources/ff10b/src/ff.c **** 		INIT_BUF(*dp);
 6538              		.loc 1 3171 0
 6539 2adc 7B68     		ldr	r3, [r7, #4]
 6540 2ade 07F10C02 		add	r2, r7, #12
 6541 2ae2 9A61     		str	r2, [r3, #24]
3172:../Sources/ff10b/src/ff.c **** 		res = follow_path(dp, path);			/* Follow the path to the directory */
 6542              		.loc 1 3172 0
 6543 2ae4 3B68     		ldr	r3, [r7, #0]
 6544 2ae6 7868     		ldr	r0, [r7, #4]
 6545 2ae8 1946     		mov	r1, r3
 6546 2aea FEF789FC 		bl	follow_path
 6547 2aee 0346     		mov	r3, r0
 6548 2af0 FB77     		strb	r3, [r7, #31]
3173:../Sources/ff10b/src/ff.c **** 		FREE_BUF();
3174:../Sources/ff10b/src/ff.c **** 		if (res == FR_OK) {						/* Follow completed */
 6549              		.loc 1 3174 0
 6550 2af2 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 6551 2af4 002B     		cmp	r3, #0
 6552 2af6 28D1     		bne	.L410
3175:../Sources/ff10b/src/ff.c **** 			if (dp->dir) {						/* It is not the origin directory itself */
 6553              		.loc 1 3175 0
 6554 2af8 7B68     		ldr	r3, [r7, #4]
 6555 2afa 5B69     		ldr	r3, [r3, #20]
 6556 2afc 002B     		cmp	r3, #0
 6557 2afe 16D0     		beq	.L411
3176:../Sources/ff10b/src/ff.c **** 				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 6558              		.loc 1 3176 0
 6559 2b00 7B68     		ldr	r3, [r7, #4]
 6560 2b02 5B69     		ldr	r3, [r3, #20]
 6561 2b04 03F10B03 		add	r3, r3, #11
 6562 2b08 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 6563 2b0a 03F01003 		and	r3, r3, #16
 6564 2b0e 002B     		cmp	r3, #0
 6565 2b10 0AD0     		beq	.L412
3177:../Sources/ff10b/src/ff.c **** 					dp->sclust = ld_clust(fs, dp->dir);
 6566              		.loc 1 3177 0
 6567 2b12 BA69     		ldr	r2, [r7, #24]
 6568 2b14 7B68     		ldr	r3, [r7, #4]
 6569 2b16 5B69     		ldr	r3, [r3, #20]
 6570 2b18 1046     		mov	r0, r2
 6571 2b1a 1946     		mov	r1, r3
 6572 2b1c FEF72EF9 		bl	ld_clust
 6573 2b20 0246     		mov	r2, r0
 6574 2b22 7B68     		ldr	r3, [r7, #4]
 6575 2b24 9A60     		str	r2, [r3, #8]
 6576 2b26 02E0     		b	.L411
 6577              	.L412:
3178:../Sources/ff10b/src/ff.c **** 				else							/* The object is a file */
3179:../Sources/ff10b/src/ff.c **** 					res = FR_NO_PATH;
 6578              		.loc 1 3179 0
 6579 2b28 4FF00503 		mov	r3, #5
 6580 2b2c FB77     		strb	r3, [r7, #31]
 6581              	.L411:
3180:../Sources/ff10b/src/ff.c **** 			}
3181:../Sources/ff10b/src/ff.c **** 			if (res == FR_OK) {
 6582              		.loc 1 3181 0
 6583 2b2e FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 6584 2b30 002B     		cmp	r3, #0
 6585 2b32 0AD1     		bne	.L410
3182:../Sources/ff10b/src/ff.c **** 				dp->id = fs->id;
 6586              		.loc 1 3182 0
 6587 2b34 BB69     		ldr	r3, [r7, #24]
 6588 2b36 DA88     		ldrh	r2, [r3, #6]
 6589 2b38 7B68     		ldr	r3, [r7, #4]
 6590 2b3a 9A80     		strh	r2, [r3, #4]	@ movhi
3183:../Sources/ff10b/src/ff.c **** 				res = dir_sdi(dp, 0);			/* Rewind directory */
 6591              		.loc 1 3183 0
 6592 2b3c 7868     		ldr	r0, [r7, #4]
 6593 2b3e 4FF00001 		mov	r1, #0
 6594 2b42 FDF755FF 		bl	dir_sdi
 6595 2b46 0346     		mov	r3, r0
 6596 2b48 FB77     		strb	r3, [r7, #31]
 6597              	.L410:
3184:../Sources/ff10b/src/ff.c **** #if _FS_LOCK
3185:../Sources/ff10b/src/ff.c **** 				if (res == FR_OK) {
3186:../Sources/ff10b/src/ff.c **** 					if (dp->sclust) {
3187:../Sources/ff10b/src/ff.c **** 						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
3188:../Sources/ff10b/src/ff.c **** 						if (!dp->lockid)
3189:../Sources/ff10b/src/ff.c **** 							res = FR_TOO_MANY_OPEN_FILES;
3190:../Sources/ff10b/src/ff.c **** 					} else {
3191:../Sources/ff10b/src/ff.c **** 						dp->lockid = 0;	/* Root directory need not to be locked */
3192:../Sources/ff10b/src/ff.c **** 					}
3193:../Sources/ff10b/src/ff.c **** 				}
3194:../Sources/ff10b/src/ff.c **** #endif
3195:../Sources/ff10b/src/ff.c **** 			}
3196:../Sources/ff10b/src/ff.c **** 		}
3197:../Sources/ff10b/src/ff.c **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
 6598              		.loc 1 3197 0
 6599 2b4a FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 6600 2b4c 042B     		cmp	r3, #4
 6601 2b4e 02D1     		bne	.L409
 6602              		.loc 1 3197 0 is_stmt 0 discriminator 1
 6603 2b50 4FF00503 		mov	r3, #5
 6604 2b54 FB77     		strb	r3, [r7, #31]
 6605              	.L409:
3198:../Sources/ff10b/src/ff.c **** 	}
3199:../Sources/ff10b/src/ff.c **** 	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 6606              		.loc 1 3199 0 is_stmt 1
 6607 2b56 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 6608 2b58 002B     		cmp	r3, #0
 6609 2b5a 03D0     		beq	.L413
 6610              		.loc 1 3199 0 is_stmt 0 discriminator 1
 6611 2b5c 7B68     		ldr	r3, [r7, #4]
 6612 2b5e 4FF00002 		mov	r2, #0
 6613 2b62 1A60     		str	r2, [r3, #0]
 6614              	.L413:
3200:../Sources/ff10b/src/ff.c **** 
3201:../Sources/ff10b/src/ff.c **** 	LEAVE_FF(fs, res);
 6615              		.loc 1 3201 0 is_stmt 1
 6616 2b64 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 6617              	.L414:
3202:../Sources/ff10b/src/ff.c **** }
 6618              		.loc 1 3202 0
 6619 2b66 1846     		mov	r0, r3
 6620 2b68 07F12007 		add	r7, r7, #32
 6621 2b6c BD46     		mov	sp, r7
 6622 2b6e 80BD     		pop	{r7, pc}
 6623              		.cfi_endproc
 6624              	.LFE36:
 6626              		.align	2
 6627              		.global	f_closedir
 6628              		.thumb
 6629              		.thumb_func
 6631              	f_closedir:
 6632              	.LFB37:
3203:../Sources/ff10b/src/ff.c **** 
3204:../Sources/ff10b/src/ff.c **** 
3205:../Sources/ff10b/src/ff.c **** 
3206:../Sources/ff10b/src/ff.c **** 
3207:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
3208:../Sources/ff10b/src/ff.c **** /* Close Directory                                                       */
3209:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
3210:../Sources/ff10b/src/ff.c **** 
3211:../Sources/ff10b/src/ff.c **** FRESULT f_closedir (
3212:../Sources/ff10b/src/ff.c **** 	DIR *dp		/* Pointer to the directory object to be closed */
3213:../Sources/ff10b/src/ff.c **** )
3214:../Sources/ff10b/src/ff.c **** {
 6633              		.loc 1 3214 0
 6634              		.cfi_startproc
 6635              		@ args = 0, pretend = 0, frame = 16
 6636              		@ frame_needed = 1, uses_anonymous_args = 0
 6637 2b70 80B5     		push	{r7, lr}
 6638              	.LCFI110:
 6639              		.cfi_def_cfa_offset 8
 6640              		.cfi_offset 7, -8
 6641              		.cfi_offset 14, -4
 6642 2b72 84B0     		sub	sp, sp, #16
 6643              	.LCFI111:
 6644              		.cfi_def_cfa_offset 24
 6645 2b74 00AF     		add	r7, sp, #0
 6646              	.LCFI112:
 6647              		.cfi_def_cfa_register 7
 6648 2b76 7860     		str	r0, [r7, #4]
3215:../Sources/ff10b/src/ff.c **** 	FRESULT res;
3216:../Sources/ff10b/src/ff.c **** 
3217:../Sources/ff10b/src/ff.c **** 
3218:../Sources/ff10b/src/ff.c **** 	res = validate(dp);
 6649              		.loc 1 3218 0
 6650 2b78 7868     		ldr	r0, [r7, #4]
 6651 2b7a FFF77BF8 		bl	validate
 6652 2b7e 0346     		mov	r3, r0
 6653 2b80 FB73     		strb	r3, [r7, #15]
3219:../Sources/ff10b/src/ff.c **** 	if (res == FR_OK) {
 6654              		.loc 1 3219 0
 6655 2b82 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 6656 2b84 002B     		cmp	r3, #0
 6657 2b86 03D1     		bne	.L416
3220:../Sources/ff10b/src/ff.c **** #if _FS_REENTRANT
3221:../Sources/ff10b/src/ff.c **** 		FATFS *fs = dp->fs;
3222:../Sources/ff10b/src/ff.c **** #endif
3223:../Sources/ff10b/src/ff.c **** #if _FS_LOCK
3224:../Sources/ff10b/src/ff.c **** 		if (dp->lockid)				/* Decrement sub-directory open counter */
3225:../Sources/ff10b/src/ff.c **** 			res = dec_lock(dp->lockid);
3226:../Sources/ff10b/src/ff.c **** 		if (res == FR_OK)
3227:../Sources/ff10b/src/ff.c **** #endif
3228:../Sources/ff10b/src/ff.c **** 			dp->fs = 0;				/* Invalidate directory object */
 6658              		.loc 1 3228 0
 6659 2b88 7B68     		ldr	r3, [r7, #4]
 6660 2b8a 4FF00002 		mov	r2, #0
 6661 2b8e 1A60     		str	r2, [r3, #0]
 6662              	.L416:
3229:../Sources/ff10b/src/ff.c **** #if _FS_REENTRANT
3230:../Sources/ff10b/src/ff.c **** 		unlock_fs(fs, FR_OK);		/* Unlock volume */
3231:../Sources/ff10b/src/ff.c **** #endif
3232:../Sources/ff10b/src/ff.c **** 	}
3233:../Sources/ff10b/src/ff.c **** 	return res;
 6663              		.loc 1 3233 0
 6664 2b90 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
3234:../Sources/ff10b/src/ff.c **** }
 6665              		.loc 1 3234 0
 6666 2b92 1846     		mov	r0, r3
 6667 2b94 07F11007 		add	r7, r7, #16
 6668 2b98 BD46     		mov	sp, r7
 6669 2b9a 80BD     		pop	{r7, pc}
 6670              		.cfi_endproc
 6671              	.LFE37:
 6673              		.align	2
 6674              		.global	f_readdir
 6675              		.thumb
 6676              		.thumb_func
 6678              	f_readdir:
 6679              	.LFB38:
3235:../Sources/ff10b/src/ff.c **** 
3236:../Sources/ff10b/src/ff.c **** 
3237:../Sources/ff10b/src/ff.c **** 
3238:../Sources/ff10b/src/ff.c **** 
3239:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
3240:../Sources/ff10b/src/ff.c **** /* Read Directory Entries in Sequence                                    */
3241:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
3242:../Sources/ff10b/src/ff.c **** 
3243:../Sources/ff10b/src/ff.c **** FRESULT f_readdir (
3244:../Sources/ff10b/src/ff.c **** 	DIR* dp,			/* Pointer to the open directory object */
3245:../Sources/ff10b/src/ff.c **** 	FILINFO* fno		/* Pointer to file information to return */
3246:../Sources/ff10b/src/ff.c **** )
3247:../Sources/ff10b/src/ff.c **** {
 6680              		.loc 1 3247 0
 6681              		.cfi_startproc
 6682              		@ args = 0, pretend = 0, frame = 24
 6683              		@ frame_needed = 1, uses_anonymous_args = 0
 6684 2b9c 80B5     		push	{r7, lr}
 6685              	.LCFI113:
 6686              		.cfi_def_cfa_offset 8
 6687              		.cfi_offset 7, -8
 6688              		.cfi_offset 14, -4
 6689 2b9e 86B0     		sub	sp, sp, #24
 6690              	.LCFI114:
 6691              		.cfi_def_cfa_offset 32
 6692 2ba0 00AF     		add	r7, sp, #0
 6693              	.LCFI115:
 6694              		.cfi_def_cfa_register 7
 6695 2ba2 7860     		str	r0, [r7, #4]
 6696 2ba4 3960     		str	r1, [r7, #0]
3248:../Sources/ff10b/src/ff.c **** 	FRESULT res;
3249:../Sources/ff10b/src/ff.c **** 	DEF_NAMEBUF;
3250:../Sources/ff10b/src/ff.c **** 
3251:../Sources/ff10b/src/ff.c **** 
3252:../Sources/ff10b/src/ff.c **** 	res = validate(dp);						/* Check validity of the object */
 6697              		.loc 1 3252 0
 6698 2ba6 7868     		ldr	r0, [r7, #4]
 6699 2ba8 FFF764F8 		bl	validate
 6700 2bac 0346     		mov	r3, r0
 6701 2bae FB75     		strb	r3, [r7, #23]
3253:../Sources/ff10b/src/ff.c **** 	if (res == FR_OK) {
 6702              		.loc 1 3253 0
 6703 2bb0 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 6704 2bb2 002B     		cmp	r3, #0
 6705 2bb4 37D1     		bne	.L419
3254:../Sources/ff10b/src/ff.c **** 		if (!fno) {
 6706              		.loc 1 3254 0
 6707 2bb6 3B68     		ldr	r3, [r7, #0]
 6708 2bb8 002B     		cmp	r3, #0
 6709 2bba 07D1     		bne	.L420
3255:../Sources/ff10b/src/ff.c **** 			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 6710              		.loc 1 3255 0
 6711 2bbc 7868     		ldr	r0, [r7, #4]
 6712 2bbe 4FF00001 		mov	r1, #0
 6713 2bc2 FDF715FF 		bl	dir_sdi
 6714 2bc6 0346     		mov	r3, r0
 6715 2bc8 FB75     		strb	r3, [r7, #23]
 6716 2bca 2CE0     		b	.L419
 6717              	.L420:
3256:../Sources/ff10b/src/ff.c **** 		} else {
3257:../Sources/ff10b/src/ff.c **** 			INIT_BUF(*dp);
 6718              		.loc 1 3257 0
 6719 2bcc 7B68     		ldr	r3, [r7, #4]
 6720 2bce 07F10802 		add	r2, r7, #8
 6721 2bd2 9A61     		str	r2, [r3, #24]
3258:../Sources/ff10b/src/ff.c **** 			res = dir_read(dp, 0);			/* Read an item */
 6722              		.loc 1 3258 0
 6723 2bd4 7868     		ldr	r0, [r7, #4]
 6724 2bd6 4FF00001 		mov	r1, #0
 6725 2bda FEF781F9 		bl	dir_read
 6726 2bde 0346     		mov	r3, r0
 6727 2be0 FB75     		strb	r3, [r7, #23]
3259:../Sources/ff10b/src/ff.c **** 			if (res == FR_NO_FILE) {		/* Reached end of directory */
 6728              		.loc 1 3259 0
 6729 2be2 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 6730 2be4 042B     		cmp	r3, #4
 6731 2be6 06D1     		bne	.L421
3260:../Sources/ff10b/src/ff.c **** 				dp->sect = 0;
 6732              		.loc 1 3260 0
 6733 2be8 7B68     		ldr	r3, [r7, #4]
 6734 2bea 4FF00002 		mov	r2, #0
 6735 2bee 1A61     		str	r2, [r3, #16]
3261:../Sources/ff10b/src/ff.c **** 				res = FR_OK;
 6736              		.loc 1 3261 0
 6737 2bf0 4FF00003 		mov	r3, #0
 6738 2bf4 FB75     		strb	r3, [r7, #23]
 6739              	.L421:
3262:../Sources/ff10b/src/ff.c **** 			}
3263:../Sources/ff10b/src/ff.c **** 			if (res == FR_OK) {				/* A valid entry is found */
 6740              		.loc 1 3263 0
 6741 2bf6 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 6742 2bf8 002B     		cmp	r3, #0
 6743 2bfa 14D1     		bne	.L419
3264:../Sources/ff10b/src/ff.c **** 				get_fileinfo(dp, fno);		/* Get the object information */
 6744              		.loc 1 3264 0
 6745 2bfc 7868     		ldr	r0, [r7, #4]
 6746 2bfe 3968     		ldr	r1, [r7, #0]
 6747 2c00 FEF73CFA 		bl	get_fileinfo
3265:../Sources/ff10b/src/ff.c **** 				res = dir_next(dp, 0);		/* Increment index for next */
 6748              		.loc 1 3265 0
 6749 2c04 7868     		ldr	r0, [r7, #4]
 6750 2c06 4FF00001 		mov	r1, #0
 6751 2c0a FDF77BFF 		bl	dir_next
 6752 2c0e 0346     		mov	r3, r0
 6753 2c10 FB75     		strb	r3, [r7, #23]
3266:../Sources/ff10b/src/ff.c **** 				if (res == FR_NO_FILE) {
 6754              		.loc 1 3266 0
 6755 2c12 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 6756 2c14 042B     		cmp	r3, #4
 6757 2c16 06D1     		bne	.L419
3267:../Sources/ff10b/src/ff.c **** 					dp->sect = 0;
 6758              		.loc 1 3267 0
 6759 2c18 7B68     		ldr	r3, [r7, #4]
 6760 2c1a 4FF00002 		mov	r2, #0
 6761 2c1e 1A61     		str	r2, [r3, #16]
3268:../Sources/ff10b/src/ff.c **** 					res = FR_OK;
 6762              		.loc 1 3268 0
 6763 2c20 4FF00003 		mov	r3, #0
 6764 2c24 FB75     		strb	r3, [r7, #23]
 6765              	.L419:
3269:../Sources/ff10b/src/ff.c **** 				}
3270:../Sources/ff10b/src/ff.c **** 			}
3271:../Sources/ff10b/src/ff.c **** 			FREE_BUF();
3272:../Sources/ff10b/src/ff.c **** 		}
3273:../Sources/ff10b/src/ff.c **** 	}
3274:../Sources/ff10b/src/ff.c **** 
3275:../Sources/ff10b/src/ff.c **** 	LEAVE_FF(dp->fs, res);
 6766              		.loc 1 3275 0
 6767 2c26 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
3276:../Sources/ff10b/src/ff.c **** }
 6768              		.loc 1 3276 0
 6769 2c28 1846     		mov	r0, r3
 6770 2c2a 07F11807 		add	r7, r7, #24
 6771 2c2e BD46     		mov	sp, r7
 6772 2c30 80BD     		pop	{r7, pc}
 6773              		.cfi_endproc
 6774              	.LFE38:
 6776 2c32 00BF     		.align	2
 6777              		.global	f_stat
 6778              		.thumb
 6779              		.thumb_func
 6781              	f_stat:
 6782              	.LFB39:
3277:../Sources/ff10b/src/ff.c **** 
3278:../Sources/ff10b/src/ff.c **** 
3279:../Sources/ff10b/src/ff.c **** 
3280:../Sources/ff10b/src/ff.c **** #if _FS_MINIMIZE == 0
3281:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
3282:../Sources/ff10b/src/ff.c **** /* Get File Status                                                       */
3283:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
3284:../Sources/ff10b/src/ff.c **** 
3285:../Sources/ff10b/src/ff.c **** FRESULT f_stat (
3286:../Sources/ff10b/src/ff.c **** 	const TCHAR* path,	/* Pointer to the file path */
3287:../Sources/ff10b/src/ff.c **** 	FILINFO* fno		/* Pointer to file information to return */
3288:../Sources/ff10b/src/ff.c **** )
3289:../Sources/ff10b/src/ff.c **** {
 6783              		.loc 1 3289 0
 6784              		.cfi_startproc
 6785              		@ args = 0, pretend = 0, frame = 56
 6786              		@ frame_needed = 1, uses_anonymous_args = 0
 6787 2c34 80B5     		push	{r7, lr}
 6788              	.LCFI116:
 6789              		.cfi_def_cfa_offset 8
 6790              		.cfi_offset 7, -8
 6791              		.cfi_offset 14, -4
 6792 2c36 8EB0     		sub	sp, sp, #56
 6793              	.LCFI117:
 6794              		.cfi_def_cfa_offset 64
 6795 2c38 00AF     		add	r7, sp, #0
 6796              	.LCFI118:
 6797              		.cfi_def_cfa_register 7
 6798 2c3a 7860     		str	r0, [r7, #4]
 6799 2c3c 3960     		str	r1, [r7, #0]
3290:../Sources/ff10b/src/ff.c **** 	FRESULT res;
3291:../Sources/ff10b/src/ff.c **** 	DIR dj;
3292:../Sources/ff10b/src/ff.c **** 	DEF_NAMEBUF;
3293:../Sources/ff10b/src/ff.c **** 
3294:../Sources/ff10b/src/ff.c **** 
3295:../Sources/ff10b/src/ff.c **** 	/* Get logical drive number */
3296:../Sources/ff10b/src/ff.c **** 	res = find_volume(&dj.fs, &path, 0);
 6800              		.loc 1 3296 0
 6801 2c3e 07F11802 		add	r2, r7, #24
 6802 2c42 07F10403 		add	r3, r7, #4
 6803 2c46 1046     		mov	r0, r2
 6804 2c48 1946     		mov	r1, r3
 6805 2c4a 4FF00002 		mov	r2, #0
 6806 2c4e FEF705FD 		bl	find_volume
 6807 2c52 0346     		mov	r3, r0
 6808 2c54 87F83730 		strb	r3, [r7, #55]
3297:../Sources/ff10b/src/ff.c **** 	if (res == FR_OK) {
 6809              		.loc 1 3297 0
 6810 2c58 97F83730 		ldrb	r3, [r7, #55]	@ zero_extendqisi2
 6811 2c5c 002B     		cmp	r3, #0
 6812 2c5e 21D1     		bne	.L424
3298:../Sources/ff10b/src/ff.c **** 		INIT_BUF(dj);
 6813              		.loc 1 3298 0
 6814 2c60 07F10C03 		add	r3, r7, #12
 6815 2c64 3B63     		str	r3, [r7, #48]
3299:../Sources/ff10b/src/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 6816              		.loc 1 3299 0
 6817 2c66 7B68     		ldr	r3, [r7, #4]
 6818 2c68 07F11802 		add	r2, r7, #24
 6819 2c6c 1046     		mov	r0, r2
 6820 2c6e 1946     		mov	r1, r3
 6821 2c70 FEF7C6FB 		bl	follow_path
 6822 2c74 0346     		mov	r3, r0
 6823 2c76 87F83730 		strb	r3, [r7, #55]
3300:../Sources/ff10b/src/ff.c **** 		if (res == FR_OK) {				/* Follow completed */
 6824              		.loc 1 3300 0
 6825 2c7a 97F83730 		ldrb	r3, [r7, #55]	@ zero_extendqisi2
 6826 2c7e 002B     		cmp	r3, #0
 6827 2c80 10D1     		bne	.L424
3301:../Sources/ff10b/src/ff.c **** 			if (dj.dir) {		/* Found an object */
 6828              		.loc 1 3301 0
 6829 2c82 FB6A     		ldr	r3, [r7, #44]
 6830 2c84 002B     		cmp	r3, #0
 6831 2c86 09D0     		beq	.L425
3302:../Sources/ff10b/src/ff.c **** 				if (fno) get_fileinfo(&dj, fno);
 6832              		.loc 1 3302 0
 6833 2c88 3B68     		ldr	r3, [r7, #0]
 6834 2c8a 002B     		cmp	r3, #0
 6835 2c8c 0AD0     		beq	.L424
 6836              		.loc 1 3302 0 is_stmt 0 discriminator 1
 6837 2c8e 07F11803 		add	r3, r7, #24
 6838 2c92 1846     		mov	r0, r3
 6839 2c94 3968     		ldr	r1, [r7, #0]
 6840 2c96 FEF7F1F9 		bl	get_fileinfo
 6841 2c9a 03E0     		b	.L424
 6842              	.L425:
3303:../Sources/ff10b/src/ff.c **** 			} else {			/* It is root directory */
3304:../Sources/ff10b/src/ff.c **** 				res = FR_INVALID_NAME;
 6843              		.loc 1 3304 0 is_stmt 1
 6844 2c9c 4FF00603 		mov	r3, #6
 6845 2ca0 87F83730 		strb	r3, [r7, #55]
 6846              	.L424:
3305:../Sources/ff10b/src/ff.c **** 			}
3306:../Sources/ff10b/src/ff.c **** 		}
3307:../Sources/ff10b/src/ff.c **** 		FREE_BUF();
3308:../Sources/ff10b/src/ff.c **** 	}
3309:../Sources/ff10b/src/ff.c **** 
3310:../Sources/ff10b/src/ff.c **** 	LEAVE_FF(dj.fs, res);
 6847              		.loc 1 3310 0
 6848 2ca4 97F83730 		ldrb	r3, [r7, #55]	@ zero_extendqisi2
3311:../Sources/ff10b/src/ff.c **** }
 6849              		.loc 1 3311 0
 6850 2ca8 1846     		mov	r0, r3
 6851 2caa 07F13807 		add	r7, r7, #56
 6852 2cae BD46     		mov	sp, r7
 6853 2cb0 80BD     		pop	{r7, pc}
 6854              		.cfi_endproc
 6855              	.LFE39:
 6857 2cb2 00BF     		.align	2
 6858              		.global	f_getfree
 6859              		.thumb
 6860              		.thumb_func
 6862              	f_getfree:
 6863              	.LFB40:
3312:../Sources/ff10b/src/ff.c **** 
3313:../Sources/ff10b/src/ff.c **** 
3314:../Sources/ff10b/src/ff.c **** 
3315:../Sources/ff10b/src/ff.c **** #if !_FS_READONLY
3316:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
3317:../Sources/ff10b/src/ff.c **** /* Get Number of Free Clusters                                           */
3318:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
3319:../Sources/ff10b/src/ff.c **** 
3320:../Sources/ff10b/src/ff.c **** FRESULT f_getfree (
3321:../Sources/ff10b/src/ff.c **** 	const TCHAR* path,	/* Path name of the logical drive number */
3322:../Sources/ff10b/src/ff.c **** 	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
3323:../Sources/ff10b/src/ff.c **** 	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
3324:../Sources/ff10b/src/ff.c **** )
3325:../Sources/ff10b/src/ff.c **** {
 6864              		.loc 1 3325 0
 6865              		.cfi_startproc
 6866              		@ args = 0, pretend = 0, frame = 56
 6867              		@ frame_needed = 1, uses_anonymous_args = 0
 6868 2cb4 80B5     		push	{r7, lr}
 6869              	.LCFI119:
 6870              		.cfi_def_cfa_offset 8
 6871              		.cfi_offset 7, -8
 6872              		.cfi_offset 14, -4
 6873 2cb6 8EB0     		sub	sp, sp, #56
 6874              	.LCFI120:
 6875              		.cfi_def_cfa_offset 64
 6876 2cb8 00AF     		add	r7, sp, #0
 6877              	.LCFI121:
 6878              		.cfi_def_cfa_register 7
 6879 2cba F860     		str	r0, [r7, #12]
 6880 2cbc B960     		str	r1, [r7, #8]
 6881 2cbe 7A60     		str	r2, [r7, #4]
3326:../Sources/ff10b/src/ff.c **** 	FRESULT res;
3327:../Sources/ff10b/src/ff.c **** 	FATFS *fs;
3328:../Sources/ff10b/src/ff.c **** 	DWORD n, clst, sect, stat;
3329:../Sources/ff10b/src/ff.c **** 	UINT i;
3330:../Sources/ff10b/src/ff.c **** 	BYTE fat, *p;
3331:../Sources/ff10b/src/ff.c **** 
3332:../Sources/ff10b/src/ff.c **** 
3333:../Sources/ff10b/src/ff.c **** 	/* Get logical drive number */
3334:../Sources/ff10b/src/ff.c **** 	res = find_volume(fatfs, &path, 0);
 6882              		.loc 1 3334 0
 6883 2cc0 07F10C03 		add	r3, r7, #12
 6884 2cc4 7868     		ldr	r0, [r7, #4]
 6885 2cc6 1946     		mov	r1, r3
 6886 2cc8 4FF00002 		mov	r2, #0
 6887 2ccc FEF7C6FC 		bl	find_volume
 6888 2cd0 0346     		mov	r3, r0
 6889 2cd2 87F83730 		strb	r3, [r7, #55]
3335:../Sources/ff10b/src/ff.c **** 	fs = *fatfs;
 6890              		.loc 1 3335 0
 6891 2cd6 7B68     		ldr	r3, [r7, #4]
 6892 2cd8 1B68     		ldr	r3, [r3, #0]
 6893 2cda FB61     		str	r3, [r7, #28]
3336:../Sources/ff10b/src/ff.c **** 	if (res == FR_OK) {
 6894              		.loc 1 3336 0
 6895 2cdc 97F83730 		ldrb	r3, [r7, #55]	@ zero_extendqisi2
 6896 2ce0 002B     		cmp	r3, #0
 6897 2ce2 40F0C180 		bne	.L428
3337:../Sources/ff10b/src/ff.c **** 		/* If free_clust is valid, return it without full cluster scan */
3338:../Sources/ff10b/src/ff.c **** 		if (fs->free_clust <= fs->n_fatent - 2) {
 6898              		.loc 1 3338 0
 6899 2ce6 FB69     		ldr	r3, [r7, #28]
 6900 2ce8 1A69     		ldr	r2, [r3, #16]
 6901 2cea FB69     		ldr	r3, [r7, #28]
 6902 2cec 5B69     		ldr	r3, [r3, #20]
 6903 2cee A3F10203 		sub	r3, r3, #2
 6904 2cf2 9A42     		cmp	r2, r3
 6905 2cf4 04D8     		bhi	.L429
3339:../Sources/ff10b/src/ff.c **** 			*nclst = fs->free_clust;
 6906              		.loc 1 3339 0
 6907 2cf6 FB69     		ldr	r3, [r7, #28]
 6908 2cf8 1A69     		ldr	r2, [r3, #16]
 6909 2cfa BB68     		ldr	r3, [r7, #8]
 6910 2cfc 1A60     		str	r2, [r3, #0]
 6911 2cfe B3E0     		b	.L428
 6912              	.L429:
3340:../Sources/ff10b/src/ff.c **** 		} else {
3341:../Sources/ff10b/src/ff.c **** 			/* Get number of free clusters */
3342:../Sources/ff10b/src/ff.c **** 			fat = fs->fs_type;
 6913              		.loc 1 3342 0
 6914 2d00 FB69     		ldr	r3, [r7, #28]
 6915 2d02 1B78     		ldrb	r3, [r3, #0]
 6916 2d04 FB76     		strb	r3, [r7, #27]
3343:../Sources/ff10b/src/ff.c **** 			n = 0;
 6917              		.loc 1 3343 0
 6918 2d06 4FF00003 		mov	r3, #0
 6919 2d0a 3B63     		str	r3, [r7, #48]
3344:../Sources/ff10b/src/ff.c **** 			if (fat == FS_FAT12) {
 6920              		.loc 1 3344 0
 6921 2d0c FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 6922 2d0e 012B     		cmp	r3, #1
 6923 2d10 2AD1     		bne	.L430
3345:../Sources/ff10b/src/ff.c **** 				clst = 2;
 6924              		.loc 1 3345 0
 6925 2d12 4FF00203 		mov	r3, #2
 6926 2d16 FB62     		str	r3, [r7, #44]
 6927              	.L435:
3346:../Sources/ff10b/src/ff.c **** 				do {
3347:../Sources/ff10b/src/ff.c **** 					stat = get_fat(fs, clst);
 6928              		.loc 1 3347 0
 6929 2d18 F869     		ldr	r0, [r7, #28]
 6930 2d1a F96A     		ldr	r1, [r7, #44]
 6931 2d1c FFF7FEFF 		bl	get_fat
 6932 2d20 7861     		str	r0, [r7, #20]
3348:../Sources/ff10b/src/ff.c **** 					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 6933              		.loc 1 3348 0
 6934 2d22 7B69     		ldr	r3, [r7, #20]
 6935 2d24 B3F1FF3F 		cmp	r3, #-1
 6936 2d28 04D1     		bne	.L431
 6937              		.loc 1 3348 0 is_stmt 0 discriminator 1
 6938 2d2a 4FF00103 		mov	r3, #1
 6939 2d2e 87F83730 		strb	r3, [r7, #55]
 6940 2d32 8CE0     		b	.L436
 6941              	.L431:
3349:../Sources/ff10b/src/ff.c **** 					if (stat == 1) { res = FR_INT_ERR; break; }
 6942              		.loc 1 3349 0 is_stmt 1
 6943 2d34 7B69     		ldr	r3, [r7, #20]
 6944 2d36 012B     		cmp	r3, #1
 6945 2d38 05D1     		bne	.L433
 6946              		.loc 1 3349 0 is_stmt 0 discriminator 1
 6947 2d3a 4FF00203 		mov	r3, #2
 6948 2d3e 87F83730 		strb	r3, [r7, #55]
 6949 2d42 00BF     		nop
 6950 2d44 83E0     		b	.L436
 6951              	.L433:
3350:../Sources/ff10b/src/ff.c **** 					if (stat == 0) n++;
 6952              		.loc 1 3350 0 is_stmt 1
 6953 2d46 7B69     		ldr	r3, [r7, #20]
 6954 2d48 002B     		cmp	r3, #0
 6955 2d4a 03D1     		bne	.L434
 6956              		.loc 1 3350 0 is_stmt 0 discriminator 1
 6957 2d4c 3B6B     		ldr	r3, [r7, #48]
 6958 2d4e 03F10103 		add	r3, r3, #1
 6959 2d52 3B63     		str	r3, [r7, #48]
 6960              	.L434:
3351:../Sources/ff10b/src/ff.c **** 				} while (++clst < fs->n_fatent);
 6961              		.loc 1 3351 0 is_stmt 1
 6962 2d54 FB6A     		ldr	r3, [r7, #44]
 6963 2d56 03F10103 		add	r3, r3, #1
 6964 2d5a FB62     		str	r3, [r7, #44]
 6965 2d5c FB69     		ldr	r3, [r7, #28]
 6966 2d5e 5B69     		ldr	r3, [r3, #20]
 6967 2d60 FA6A     		ldr	r2, [r7, #44]
 6968 2d62 9A42     		cmp	r2, r3
 6969 2d64 D8D3     		bcc	.L435
 6970 2d66 72E0     		b	.L436
 6971              	.L430:
3352:../Sources/ff10b/src/ff.c **** 			} else {
3353:../Sources/ff10b/src/ff.c **** 				clst = fs->n_fatent;
 6972              		.loc 1 3353 0
 6973 2d68 FB69     		ldr	r3, [r7, #28]
 6974 2d6a 5B69     		ldr	r3, [r3, #20]
 6975 2d6c FB62     		str	r3, [r7, #44]
3354:../Sources/ff10b/src/ff.c **** 				sect = fs->fatbase;
 6976              		.loc 1 3354 0
 6977 2d6e FB69     		ldr	r3, [r7, #28]
 6978 2d70 1B6A     		ldr	r3, [r3, #32]
 6979 2d72 BB62     		str	r3, [r7, #40]
3355:../Sources/ff10b/src/ff.c **** 				i = 0; p = 0;
 6980              		.loc 1 3355 0
 6981 2d74 4FF00003 		mov	r3, #0
 6982 2d78 7B62     		str	r3, [r7, #36]
 6983 2d7a 4FF00003 		mov	r3, #0
 6984 2d7e 3B62     		str	r3, [r7, #32]
 6985              	.L443:
3356:../Sources/ff10b/src/ff.c **** 				do {
3357:../Sources/ff10b/src/ff.c **** 					if (!i) {
 6986              		.loc 1 3357 0
 6987 2d80 7B6A     		ldr	r3, [r7, #36]
 6988 2d82 002B     		cmp	r3, #0
 6989 2d84 16D1     		bne	.L437
3358:../Sources/ff10b/src/ff.c **** 						res = move_window(fs, sect++);
 6990              		.loc 1 3358 0
 6991 2d86 BB6A     		ldr	r3, [r7, #40]
 6992 2d88 BA6A     		ldr	r2, [r7, #40]
 6993 2d8a 02F10102 		add	r2, r2, #1
 6994 2d8e BA62     		str	r2, [r7, #40]
 6995 2d90 F869     		ldr	r0, [r7, #28]
 6996 2d92 1946     		mov	r1, r3
 6997 2d94 FDF71EFA 		bl	move_window
 6998 2d98 0346     		mov	r3, r0
 6999 2d9a 87F83730 		strb	r3, [r7, #55]
3359:../Sources/ff10b/src/ff.c **** 						if (res != FR_OK) break;
 7000              		.loc 1 3359 0
 7001 2d9e 97F83730 		ldrb	r3, [r7, #55]	@ zero_extendqisi2
 7002 2da2 002B     		cmp	r3, #0
 7003 2da4 52D1     		bne	.L445
 7004              	.L438:
3360:../Sources/ff10b/src/ff.c **** 						p = fs->win;
 7005              		.loc 1 3360 0
 7006 2da6 FB69     		ldr	r3, [r7, #28]
 7007 2da8 03F13003 		add	r3, r3, #48
 7008 2dac 3B62     		str	r3, [r7, #32]
3361:../Sources/ff10b/src/ff.c **** 						i = SS(fs);
 7009              		.loc 1 3361 0
 7010 2dae 4FF40073 		mov	r3, #512
 7011 2db2 7B62     		str	r3, [r7, #36]
 7012              	.L437:
3362:../Sources/ff10b/src/ff.c **** 					}
3363:../Sources/ff10b/src/ff.c **** 					if (fat == FS_FAT16) {
 7013              		.loc 1 3363 0
 7014 2db4 FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 7015 2db6 022B     		cmp	r3, #2
 7016 2db8 19D1     		bne	.L439
3364:../Sources/ff10b/src/ff.c **** 						if (LD_WORD(p) == 0) n++;
 7017              		.loc 1 3364 0
 7018 2dba 3B6A     		ldr	r3, [r7, #32]
 7019 2dbc 03F10103 		add	r3, r3, #1
 7020 2dc0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 7021 2dc2 4FEA0323 		lsl	r3, r3, #8
 7022 2dc6 9AB2     		uxth	r2, r3
 7023 2dc8 3B6A     		ldr	r3, [r7, #32]
 7024 2dca 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 7025 2dcc 1343     		orrs	r3, r3, r2
 7026 2dce 9BB2     		uxth	r3, r3
 7027 2dd0 002B     		cmp	r3, #0
 7028 2dd2 03D1     		bne	.L440
 7029              		.loc 1 3364 0 is_stmt 0 discriminator 1
 7030 2dd4 3B6B     		ldr	r3, [r7, #48]
 7031 2dd6 03F10103 		add	r3, r3, #1
 7032 2dda 3B63     		str	r3, [r7, #48]
 7033              	.L440:
3365:../Sources/ff10b/src/ff.c **** 						p += 2; i -= 2;
 7034              		.loc 1 3365 0 is_stmt 1
 7035 2ddc 3B6A     		ldr	r3, [r7, #32]
 7036 2dde 03F10203 		add	r3, r3, #2
 7037 2de2 3B62     		str	r3, [r7, #32]
 7038 2de4 7B6A     		ldr	r3, [r7, #36]
 7039 2de6 A3F10203 		sub	r3, r3, #2
 7040 2dea 7B62     		str	r3, [r7, #36]
 7041 2dec 26E0     		b	.L441
 7042              	.L439:
3366:../Sources/ff10b/src/ff.c **** 					} else {
3367:../Sources/ff10b/src/ff.c **** 						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 7043              		.loc 1 3367 0
 7044 2dee 3B6A     		ldr	r3, [r7, #32]
 7045 2df0 03F10303 		add	r3, r3, #3
 7046 2df4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 7047 2df6 4FEA0362 		lsl	r2, r3, #24
 7048 2dfa 3B6A     		ldr	r3, [r7, #32]
 7049 2dfc 03F10203 		add	r3, r3, #2
 7050 2e00 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 7051 2e02 4FEA0343 		lsl	r3, r3, #16
 7052 2e06 1A43     		orrs	r2, r2, r3
 7053 2e08 3B6A     		ldr	r3, [r7, #32]
 7054 2e0a 03F10103 		add	r3, r3, #1
 7055 2e0e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 7056 2e10 4FEA0323 		lsl	r3, r3, #8
 7057 2e14 1A43     		orrs	r2, r2, r3
 7058 2e16 3B6A     		ldr	r3, [r7, #32]
 7059 2e18 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 7060 2e1a 1343     		orrs	r3, r3, r2
 7061 2e1c 23F07043 		bic	r3, r3, #-268435456
 7062 2e20 002B     		cmp	r3, #0
 7063 2e22 03D1     		bne	.L442
 7064              		.loc 1 3367 0 is_stmt 0 discriminator 1
 7065 2e24 3B6B     		ldr	r3, [r7, #48]
 7066 2e26 03F10103 		add	r3, r3, #1
 7067 2e2a 3B63     		str	r3, [r7, #48]
 7068              	.L442:
3368:../Sources/ff10b/src/ff.c **** 						p += 4; i -= 4;
 7069              		.loc 1 3368 0 is_stmt 1
 7070 2e2c 3B6A     		ldr	r3, [r7, #32]
 7071 2e2e 03F10403 		add	r3, r3, #4
 7072 2e32 3B62     		str	r3, [r7, #32]
 7073 2e34 7B6A     		ldr	r3, [r7, #36]
 7074 2e36 A3F10403 		sub	r3, r3, #4
 7075 2e3a 7B62     		str	r3, [r7, #36]
 7076              	.L441:
3369:../Sources/ff10b/src/ff.c **** 					}
3370:../Sources/ff10b/src/ff.c **** 				} while (--clst);
 7077              		.loc 1 3370 0
 7078 2e3c FB6A     		ldr	r3, [r7, #44]
 7079 2e3e 03F1FF33 		add	r3, r3, #-1
 7080 2e42 FB62     		str	r3, [r7, #44]
 7081 2e44 FB6A     		ldr	r3, [r7, #44]
 7082 2e46 002B     		cmp	r3, #0
 7083 2e48 9AD1     		bne	.L443
 7084 2e4a 00E0     		b	.L436
 7085              	.L445:
3359:../Sources/ff10b/src/ff.c **** 						if (res != FR_OK) break;
 7086              		.loc 1 3359 0
 7087 2e4c 00BF     		nop
 7088              	.L436:
3371:../Sources/ff10b/src/ff.c **** 			}
3372:../Sources/ff10b/src/ff.c **** 			fs->free_clust = n;
 7089              		.loc 1 3372 0
 7090 2e4e FB69     		ldr	r3, [r7, #28]
 7091 2e50 3A6B     		ldr	r2, [r7, #48]
 7092 2e52 1A61     		str	r2, [r3, #16]
3373:../Sources/ff10b/src/ff.c **** 			fs->fsi_flag |= 1;
 7093              		.loc 1 3373 0
 7094 2e54 FB69     		ldr	r3, [r7, #28]
 7095 2e56 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 7096 2e58 43F00103 		orr	r3, r3, #1
 7097 2e5c DAB2     		uxtb	r2, r3
 7098 2e5e FB69     		ldr	r3, [r7, #28]
 7099 2e60 5A71     		strb	r2, [r3, #5]
3374:../Sources/ff10b/src/ff.c **** 			*nclst = n;
 7100              		.loc 1 3374 0
 7101 2e62 BB68     		ldr	r3, [r7, #8]
 7102 2e64 3A6B     		ldr	r2, [r7, #48]
 7103 2e66 1A60     		str	r2, [r3, #0]
 7104              	.L428:
3375:../Sources/ff10b/src/ff.c **** 		}
3376:../Sources/ff10b/src/ff.c **** 	}
3377:../Sources/ff10b/src/ff.c **** 	LEAVE_FF(fs, res);
 7105              		.loc 1 3377 0
 7106 2e68 97F83730 		ldrb	r3, [r7, #55]	@ zero_extendqisi2
3378:../Sources/ff10b/src/ff.c **** }
 7107              		.loc 1 3378 0
 7108 2e6c 1846     		mov	r0, r3
 7109 2e6e 07F13807 		add	r7, r7, #56
 7110 2e72 BD46     		mov	sp, r7
 7111 2e74 80BD     		pop	{r7, pc}
 7112              		.cfi_endproc
 7113              	.LFE40:
 7115 2e76 00BF     		.align	2
 7116              		.global	f_truncate
 7117              		.thumb
 7118              		.thumb_func
 7120              	f_truncate:
 7121              	.LFB41:
3379:../Sources/ff10b/src/ff.c **** 
3380:../Sources/ff10b/src/ff.c **** 
3381:../Sources/ff10b/src/ff.c **** 
3382:../Sources/ff10b/src/ff.c **** 
3383:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
3384:../Sources/ff10b/src/ff.c **** /* Truncate File                                                         */
3385:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
3386:../Sources/ff10b/src/ff.c **** 
3387:../Sources/ff10b/src/ff.c **** FRESULT f_truncate (
3388:../Sources/ff10b/src/ff.c **** 	FIL* fp		/* Pointer to the file object */
3389:../Sources/ff10b/src/ff.c **** )
3390:../Sources/ff10b/src/ff.c **** {
 7122              		.loc 1 3390 0
 7123              		.cfi_startproc
 7124              		@ args = 0, pretend = 0, frame = 16
 7125              		@ frame_needed = 1, uses_anonymous_args = 0
 7126 2e78 80B5     		push	{r7, lr}
 7127              	.LCFI122:
 7128              		.cfi_def_cfa_offset 8
 7129              		.cfi_offset 7, -8
 7130              		.cfi_offset 14, -4
 7131 2e7a 84B0     		sub	sp, sp, #16
 7132              	.LCFI123:
 7133              		.cfi_def_cfa_offset 24
 7134 2e7c 00AF     		add	r7, sp, #0
 7135              	.LCFI124:
 7136              		.cfi_def_cfa_register 7
 7137 2e7e 7860     		str	r0, [r7, #4]
3391:../Sources/ff10b/src/ff.c **** 	FRESULT res;
3392:../Sources/ff10b/src/ff.c **** 	DWORD ncl;
3393:../Sources/ff10b/src/ff.c **** 
3394:../Sources/ff10b/src/ff.c **** 
3395:../Sources/ff10b/src/ff.c **** 	res = validate(fp);						/* Check validity of the object */
 7138              		.loc 1 3395 0
 7139 2e80 7868     		ldr	r0, [r7, #4]
 7140 2e82 FEF7F7FE 		bl	validate
 7141 2e86 0346     		mov	r3, r0
 7142 2e88 FB73     		strb	r3, [r7, #15]
3396:../Sources/ff10b/src/ff.c **** 	if (res == FR_OK) {
 7143              		.loc 1 3396 0
 7144 2e8a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 7145 2e8c 002B     		cmp	r3, #0
 7146 2e8e 10D1     		bne	.L447
3397:../Sources/ff10b/src/ff.c **** 		if (fp->err) {						/* Check error */
 7147              		.loc 1 3397 0
 7148 2e90 7B68     		ldr	r3, [r7, #4]
 7149 2e92 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 7150 2e94 002B     		cmp	r3, #0
 7151 2e96 03D0     		beq	.L448
3398:../Sources/ff10b/src/ff.c **** 			res = (FRESULT)fp->err;
 7152              		.loc 1 3398 0
 7153 2e98 7B68     		ldr	r3, [r7, #4]
 7154 2e9a DB79     		ldrb	r3, [r3, #7]
 7155 2e9c FB73     		strb	r3, [r7, #15]
 7156 2e9e 08E0     		b	.L447
 7157              	.L448:
3399:../Sources/ff10b/src/ff.c **** 		} else {
3400:../Sources/ff10b/src/ff.c **** 			if (!(fp->flag & FA_WRITE))		/* Check access mode */
 7158              		.loc 1 3400 0
 7159 2ea0 7B68     		ldr	r3, [r7, #4]
 7160 2ea2 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 7161 2ea4 03F00203 		and	r3, r3, #2
 7162 2ea8 002B     		cmp	r3, #0
 7163 2eaa 02D1     		bne	.L447
3401:../Sources/ff10b/src/ff.c **** 				res = FR_DENIED;
 7164              		.loc 1 3401 0
 7165 2eac 4FF00703 		mov	r3, #7
 7166 2eb0 FB73     		strb	r3, [r7, #15]
 7167              	.L447:
3402:../Sources/ff10b/src/ff.c **** 		}
3403:../Sources/ff10b/src/ff.c **** 	}
3404:../Sources/ff10b/src/ff.c **** 	if (res == FR_OK) {
 7168              		.loc 1 3404 0
 7169 2eb2 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 7170 2eb4 002B     		cmp	r3, #0
 7171 2eb6 40F08980 		bne	.L449
3405:../Sources/ff10b/src/ff.c **** 		if (fp->fsize > fp->fptr) {
 7172              		.loc 1 3405 0
 7173 2eba 7B68     		ldr	r3, [r7, #4]
 7174 2ebc DA68     		ldr	r2, [r3, #12]
 7175 2ebe 7B68     		ldr	r3, [r7, #4]
 7176 2ec0 9B68     		ldr	r3, [r3, #8]
 7177 2ec2 9A42     		cmp	r2, r3
 7178 2ec4 7CD9     		bls	.L450
3406:../Sources/ff10b/src/ff.c **** 			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
 7179              		.loc 1 3406 0
 7180 2ec6 7B68     		ldr	r3, [r7, #4]
 7181 2ec8 9A68     		ldr	r2, [r3, #8]
 7182 2eca 7B68     		ldr	r3, [r7, #4]
 7183 2ecc DA60     		str	r2, [r3, #12]
3407:../Sources/ff10b/src/ff.c **** 			fp->flag |= FA__WRITTEN;
 7184              		.loc 1 3407 0
 7185 2ece 7B68     		ldr	r3, [r7, #4]
 7186 2ed0 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 7187 2ed2 43F02003 		orr	r3, r3, #32
 7188 2ed6 DAB2     		uxtb	r2, r3
 7189 2ed8 7B68     		ldr	r3, [r7, #4]
 7190 2eda 9A71     		strb	r2, [r3, #6]
3408:../Sources/ff10b/src/ff.c **** 			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
 7191              		.loc 1 3408 0
 7192 2edc 7B68     		ldr	r3, [r7, #4]
 7193 2ede 9B68     		ldr	r3, [r3, #8]
 7194 2ee0 002B     		cmp	r3, #0
 7195 2ee2 0ED1     		bne	.L451
3409:../Sources/ff10b/src/ff.c **** 				res = remove_chain(fp->fs, fp->sclust);
 7196              		.loc 1 3409 0
 7197 2ee4 7B68     		ldr	r3, [r7, #4]
 7198 2ee6 1A68     		ldr	r2, [r3, #0]
 7199 2ee8 7B68     		ldr	r3, [r7, #4]
 7200 2eea 1B69     		ldr	r3, [r3, #16]
 7201 2eec 1046     		mov	r0, r2
 7202 2eee 1946     		mov	r1, r3
 7203 2ef0 FDF786FC 		bl	remove_chain
 7204 2ef4 0346     		mov	r3, r0
 7205 2ef6 FB73     		strb	r3, [r7, #15]
3410:../Sources/ff10b/src/ff.c **** 				fp->sclust = 0;
 7206              		.loc 1 3410 0
 7207 2ef8 7B68     		ldr	r3, [r7, #4]
 7208 2efa 4FF00002 		mov	r2, #0
 7209 2efe 1A61     		str	r2, [r3, #16]
 7210 2f00 38E0     		b	.L452
 7211              	.L451:
3411:../Sources/ff10b/src/ff.c **** 			} else {				/* When truncate a part of the file, remove remaining clusters */
3412:../Sources/ff10b/src/ff.c **** 				ncl = get_fat(fp->fs, fp->clust);
 7212              		.loc 1 3412 0
 7213 2f02 7B68     		ldr	r3, [r7, #4]
 7214 2f04 1A68     		ldr	r2, [r3, #0]
 7215 2f06 7B68     		ldr	r3, [r7, #4]
 7216 2f08 5B69     		ldr	r3, [r3, #20]
 7217 2f0a 1046     		mov	r0, r2
 7218 2f0c 1946     		mov	r1, r3
 7219 2f0e FFF7FEFF 		bl	get_fat
 7220 2f12 B860     		str	r0, [r7, #8]
3413:../Sources/ff10b/src/ff.c **** 				res = FR_OK;
 7221              		.loc 1 3413 0
 7222 2f14 4FF00003 		mov	r3, #0
 7223 2f18 FB73     		strb	r3, [r7, #15]
3414:../Sources/ff10b/src/ff.c **** 				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 7224              		.loc 1 3414 0
 7225 2f1a BB68     		ldr	r3, [r7, #8]
 7226 2f1c B3F1FF3F 		cmp	r3, #-1
 7227 2f20 02D1     		bne	.L453
 7228              		.loc 1 3414 0 is_stmt 0 discriminator 1
 7229 2f22 4FF00103 		mov	r3, #1
 7230 2f26 FB73     		strb	r3, [r7, #15]
 7231              	.L453:
3415:../Sources/ff10b/src/ff.c **** 				if (ncl == 1) res = FR_INT_ERR;
 7232              		.loc 1 3415 0 is_stmt 1
 7233 2f28 BB68     		ldr	r3, [r7, #8]
 7234 2f2a 012B     		cmp	r3, #1
 7235 2f2c 02D1     		bne	.L454
 7236              		.loc 1 3415 0 is_stmt 0 discriminator 1
 7237 2f2e 4FF00203 		mov	r3, #2
 7238 2f32 FB73     		strb	r3, [r7, #15]
 7239              	.L454:
3416:../Sources/ff10b/src/ff.c **** 				if (res == FR_OK && ncl < fp->fs->n_fatent) {
 7240              		.loc 1 3416 0 is_stmt 1
 7241 2f34 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 7242 2f36 002B     		cmp	r3, #0
 7243 2f38 1CD1     		bne	.L452
 7244              		.loc 1 3416 0 is_stmt 0 discriminator 1
 7245 2f3a 7B68     		ldr	r3, [r7, #4]
 7246 2f3c 1B68     		ldr	r3, [r3, #0]
 7247 2f3e 5A69     		ldr	r2, [r3, #20]
 7248 2f40 BB68     		ldr	r3, [r7, #8]
 7249 2f42 9A42     		cmp	r2, r3
 7250 2f44 16D9     		bls	.L452
3417:../Sources/ff10b/src/ff.c **** 					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
 7251              		.loc 1 3417 0 is_stmt 1
 7252 2f46 7B68     		ldr	r3, [r7, #4]
 7253 2f48 1A68     		ldr	r2, [r3, #0]
 7254 2f4a 7B68     		ldr	r3, [r7, #4]
 7255 2f4c 5B69     		ldr	r3, [r3, #20]
 7256 2f4e 1046     		mov	r0, r2
 7257 2f50 1946     		mov	r1, r3
 7258 2f52 6FF07042 		mvn	r2, #-268435456
 7259 2f56 FFF7FEFF 		bl	put_fat
 7260 2f5a 0346     		mov	r3, r0
 7261 2f5c FB73     		strb	r3, [r7, #15]
3418:../Sources/ff10b/src/ff.c **** 					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
 7262              		.loc 1 3418 0
 7263 2f5e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 7264 2f60 002B     		cmp	r3, #0
 7265 2f62 07D1     		bne	.L452
 7266              		.loc 1 3418 0 is_stmt 0 discriminator 1
 7267 2f64 7B68     		ldr	r3, [r7, #4]
 7268 2f66 1B68     		ldr	r3, [r3, #0]
 7269 2f68 1846     		mov	r0, r3
 7270 2f6a B968     		ldr	r1, [r7, #8]
 7271 2f6c FDF748FC 		bl	remove_chain
 7272 2f70 0346     		mov	r3, r0
 7273 2f72 FB73     		strb	r3, [r7, #15]
 7274              	.L452:
3419:../Sources/ff10b/src/ff.c **** 				}
3420:../Sources/ff10b/src/ff.c **** 			}
3421:../Sources/ff10b/src/ff.c **** #if !_FS_TINY
3422:../Sources/ff10b/src/ff.c **** 			if (res == FR_OK && (fp->flag & FA__DIRTY)) {
 7275              		.loc 1 3422 0 is_stmt 1
 7276 2f74 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 7277 2f76 002B     		cmp	r3, #0
 7278 2f78 22D1     		bne	.L450
 7279              		.loc 1 3422 0 is_stmt 0 discriminator 1
 7280 2f7a 7B68     		ldr	r3, [r7, #4]
 7281 2f7c 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 7282 2f7e 03F04003 		and	r3, r3, #64
 7283 2f82 002B     		cmp	r3, #0
 7284 2f84 1CD0     		beq	.L450
3423:../Sources/ff10b/src/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1))
 7285              		.loc 1 3423 0 is_stmt 1
 7286 2f86 7B68     		ldr	r3, [r7, #4]
 7287 2f88 1B68     		ldr	r3, [r3, #0]
 7288 2f8a 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
 7289 2f8c 7B68     		ldr	r3, [r7, #4]
 7290 2f8e 03F12402 		add	r2, r3, #36
 7291 2f92 7B68     		ldr	r3, [r7, #4]
 7292 2f94 9B69     		ldr	r3, [r3, #24]
 7293 2f96 0846     		mov	r0, r1
 7294 2f98 1146     		mov	r1, r2
 7295 2f9a 1A46     		mov	r2, r3
 7296 2f9c 4FF00103 		mov	r3, #1
 7297 2fa0 FFF7FEFF 		bl	disk_write
 7298 2fa4 0346     		mov	r3, r0
 7299 2fa6 002B     		cmp	r3, #0
 7300 2fa8 03D0     		beq	.L455
3424:../Sources/ff10b/src/ff.c **** 					res = FR_DISK_ERR;
 7301              		.loc 1 3424 0
 7302 2faa 4FF00103 		mov	r3, #1
 7303 2fae FB73     		strb	r3, [r7, #15]
 7304 2fb0 06E0     		b	.L450
 7305              	.L455:
3425:../Sources/ff10b/src/ff.c **** 				else
3426:../Sources/ff10b/src/ff.c **** 					fp->flag &= ~FA__DIRTY;
 7306              		.loc 1 3426 0
 7307 2fb2 7B68     		ldr	r3, [r7, #4]
 7308 2fb4 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 7309 2fb6 23F04003 		bic	r3, r3, #64
 7310 2fba DAB2     		uxtb	r2, r3
 7311 2fbc 7B68     		ldr	r3, [r7, #4]
 7312 2fbe 9A71     		strb	r2, [r3, #6]
 7313              	.L450:
3427:../Sources/ff10b/src/ff.c **** 			}
3428:../Sources/ff10b/src/ff.c **** #endif
3429:../Sources/ff10b/src/ff.c **** 		}
3430:../Sources/ff10b/src/ff.c **** 		if (res != FR_OK) fp->err = (FRESULT)res;
 7314              		.loc 1 3430 0
 7315 2fc0 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 7316 2fc2 002B     		cmp	r3, #0
 7317 2fc4 02D0     		beq	.L449
 7318              		.loc 1 3430 0 is_stmt 0 discriminator 1
 7319 2fc6 7B68     		ldr	r3, [r7, #4]
 7320 2fc8 FA7B     		ldrb	r2, [r7, #15]
 7321 2fca DA71     		strb	r2, [r3, #7]
 7322              	.L449:
3431:../Sources/ff10b/src/ff.c **** 	}
3432:../Sources/ff10b/src/ff.c **** 
3433:../Sources/ff10b/src/ff.c **** 	LEAVE_FF(fp->fs, res);
 7323              		.loc 1 3433 0 is_stmt 1
 7324 2fcc FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
3434:../Sources/ff10b/src/ff.c **** }
 7325              		.loc 1 3434 0
 7326 2fce 1846     		mov	r0, r3
 7327 2fd0 07F11007 		add	r7, r7, #16
 7328 2fd4 BD46     		mov	sp, r7
 7329 2fd6 80BD     		pop	{r7, pc}
 7330              		.cfi_endproc
 7331              	.LFE41:
 7333              		.align	2
 7334              		.global	f_unlink
 7335              		.thumb
 7336              		.thumb_func
 7338              	f_unlink:
 7339              	.LFB42:
3435:../Sources/ff10b/src/ff.c **** 
3436:../Sources/ff10b/src/ff.c **** 
3437:../Sources/ff10b/src/ff.c **** 
3438:../Sources/ff10b/src/ff.c **** 
3439:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
3440:../Sources/ff10b/src/ff.c **** /* Delete a File or Directory                                            */
3441:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
3442:../Sources/ff10b/src/ff.c **** 
3443:../Sources/ff10b/src/ff.c **** FRESULT f_unlink (
3444:../Sources/ff10b/src/ff.c **** 	const TCHAR* path		/* Pointer to the file or directory path */
3445:../Sources/ff10b/src/ff.c **** )
3446:../Sources/ff10b/src/ff.c **** {
 7340              		.loc 1 3446 0
 7341              		.cfi_startproc
 7342              		@ args = 0, pretend = 0, frame = 88
 7343              		@ frame_needed = 1, uses_anonymous_args = 0
 7344 2fd8 80B5     		push	{r7, lr}
 7345              	.LCFI125:
 7346              		.cfi_def_cfa_offset 8
 7347              		.cfi_offset 7, -8
 7348              		.cfi_offset 14, -4
 7349 2fda 96B0     		sub	sp, sp, #88
 7350              	.LCFI126:
 7351              		.cfi_def_cfa_offset 96
 7352 2fdc 00AF     		add	r7, sp, #0
 7353              	.LCFI127:
 7354              		.cfi_def_cfa_register 7
 7355 2fde 7860     		str	r0, [r7, #4]
3447:../Sources/ff10b/src/ff.c **** 	FRESULT res;
3448:../Sources/ff10b/src/ff.c **** 	DIR dj, sdj;
3449:../Sources/ff10b/src/ff.c **** 	BYTE *dir;
3450:../Sources/ff10b/src/ff.c **** 	DWORD dclst;
3451:../Sources/ff10b/src/ff.c **** 	DEF_NAMEBUF;
3452:../Sources/ff10b/src/ff.c **** 
3453:../Sources/ff10b/src/ff.c **** 
3454:../Sources/ff10b/src/ff.c **** 	/* Get logical drive number */
3455:../Sources/ff10b/src/ff.c **** 	res = find_volume(&dj.fs, &path, 1);
 7356              		.loc 1 3455 0
 7357 2fe0 07F13002 		add	r2, r7, #48
 7358 2fe4 07F10403 		add	r3, r7, #4
 7359 2fe8 1046     		mov	r0, r2
 7360 2fea 1946     		mov	r1, r3
 7361 2fec 4FF00102 		mov	r2, #1
 7362 2ff0 FEF734FB 		bl	find_volume
 7363 2ff4 0346     		mov	r3, r0
 7364 2ff6 87F85730 		strb	r3, [r7, #87]
3456:../Sources/ff10b/src/ff.c **** 	if (res == FR_OK) {
 7365              		.loc 1 3456 0
 7366 2ffa 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 7367 2ffe 002B     		cmp	r3, #0
 7368 3000 40F09C80 		bne	.L458
3457:../Sources/ff10b/src/ff.c **** 		INIT_BUF(dj);
 7369              		.loc 1 3457 0
 7370 3004 07F10803 		add	r3, r7, #8
 7371 3008 BB64     		str	r3, [r7, #72]
3458:../Sources/ff10b/src/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
 7372              		.loc 1 3458 0
 7373 300a 7B68     		ldr	r3, [r7, #4]
 7374 300c 07F13002 		add	r2, r7, #48
 7375 3010 1046     		mov	r0, r2
 7376 3012 1946     		mov	r1, r3
 7377 3014 FEF7F4F9 		bl	follow_path
 7378 3018 0346     		mov	r3, r0
 7379 301a 87F85730 		strb	r3, [r7, #87]
3459:../Sources/ff10b/src/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
3460:../Sources/ff10b/src/ff.c **** 			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
3461:../Sources/ff10b/src/ff.c **** #if _FS_LOCK
3462:../Sources/ff10b/src/ff.c **** 		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
3463:../Sources/ff10b/src/ff.c **** #endif
3464:../Sources/ff10b/src/ff.c **** 		if (res == FR_OK) {					/* The object is accessible */
 7380              		.loc 1 3464 0
 7381 301e 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 7382 3022 002B     		cmp	r3, #0
 7383 3024 40F08A80 		bne	.L458
3465:../Sources/ff10b/src/ff.c **** 			dir = dj.dir;
 7384              		.loc 1 3465 0
 7385 3028 7B6C     		ldr	r3, [r7, #68]
 7386 302a 3B65     		str	r3, [r7, #80]
3466:../Sources/ff10b/src/ff.c **** 			if (!dir) {
 7387              		.loc 1 3466 0
 7388 302c 3B6D     		ldr	r3, [r7, #80]
 7389 302e 002B     		cmp	r3, #0
 7390 3030 04D1     		bne	.L459
3467:../Sources/ff10b/src/ff.c **** 				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
 7391              		.loc 1 3467 0
 7392 3032 4FF00603 		mov	r3, #6
 7393 3036 87F85730 		strb	r3, [r7, #87]
 7394 303a 0BE0     		b	.L460
 7395              	.L459:
3468:../Sources/ff10b/src/ff.c **** 			} else {
3469:../Sources/ff10b/src/ff.c **** 				if (dir[DIR_Attr] & AM_RDO)
 7396              		.loc 1 3469 0
 7397 303c 3B6D     		ldr	r3, [r7, #80]
 7398 303e 03F10B03 		add	r3, r3, #11
 7399 3042 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 7400 3044 03F00103 		and	r3, r3, #1
 7401 3048 002B     		cmp	r3, #0
 7402 304a 03D0     		beq	.L460
3470:../Sources/ff10b/src/ff.c **** 					res = FR_DENIED;		/* Cannot remove R/O object */
 7403              		.loc 1 3470 0
 7404 304c 4FF00703 		mov	r3, #7
 7405 3050 87F85730 		strb	r3, [r7, #87]
 7406              	.L460:
3471:../Sources/ff10b/src/ff.c **** 			}
3472:../Sources/ff10b/src/ff.c **** 			dclst = ld_clust(dj.fs, dir);
 7407              		.loc 1 3472 0
 7408 3054 3B6B     		ldr	r3, [r7, #48]
 7409 3056 1846     		mov	r0, r3
 7410 3058 396D     		ldr	r1, [r7, #80]
 7411 305a FDF78FFE 		bl	ld_clust
 7412 305e F864     		str	r0, [r7, #76]
3473:../Sources/ff10b/src/ff.c **** 			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
 7413              		.loc 1 3473 0
 7414 3060 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 7415 3064 002B     		cmp	r3, #0
 7416 3066 43D1     		bne	.L461
 7417              		.loc 1 3473 0 is_stmt 0 discriminator 1
 7418 3068 3B6D     		ldr	r3, [r7, #80]
 7419 306a 03F10B03 		add	r3, r3, #11
 7420 306e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 7421 3070 03F01003 		and	r3, r3, #16
 7422 3074 002B     		cmp	r3, #0
 7423 3076 3BD0     		beq	.L461
3474:../Sources/ff10b/src/ff.c **** 				if (dclst < 2) {
 7424              		.loc 1 3474 0 is_stmt 1
 7425 3078 FB6C     		ldr	r3, [r7, #76]
 7426 307a 012B     		cmp	r3, #1
 7427 307c 04D8     		bhi	.L462
3475:../Sources/ff10b/src/ff.c **** 					res = FR_INT_ERR;
 7428              		.loc 1 3475 0
 7429 307e 4FF00203 		mov	r3, #2
 7430 3082 87F85730 		strb	r3, [r7, #87]
 7431 3086 33E0     		b	.L461
 7432              	.L462:
3476:../Sources/ff10b/src/ff.c **** 				} else {
3477:../Sources/ff10b/src/ff.c **** 					mem_cpy(&sdj, &dj, sizeof (DIR));	/* Check if the sub-directory is empty or not */
 7433              		.loc 1 3477 0
 7434 3088 07F11402 		add	r2, r7, #20
 7435 308c 07F13003 		add	r3, r7, #48
 7436 3090 1046     		mov	r0, r2
 7437 3092 1946     		mov	r1, r3
 7438 3094 4FF01C02 		mov	r2, #28
 7439 3098 FCF7B2FF 		bl	mem_cpy
3478:../Sources/ff10b/src/ff.c **** 					sdj.sclust = dclst;
 7440              		.loc 1 3478 0
 7441 309c FB6C     		ldr	r3, [r7, #76]
 7442 309e FB61     		str	r3, [r7, #28]
3479:../Sources/ff10b/src/ff.c **** 					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
 7443              		.loc 1 3479 0
 7444 30a0 07F11403 		add	r3, r7, #20
 7445 30a4 1846     		mov	r0, r3
 7446 30a6 4FF00201 		mov	r1, #2
 7447 30aa FDF7A1FC 		bl	dir_sdi
 7448 30ae 0346     		mov	r3, r0
 7449 30b0 87F85730 		strb	r3, [r7, #87]
3480:../Sources/ff10b/src/ff.c **** 					if (res == FR_OK) {
 7450              		.loc 1 3480 0
 7451 30b4 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 7452 30b8 002B     		cmp	r3, #0
 7453 30ba 19D1     		bne	.L461
3481:../Sources/ff10b/src/ff.c **** 						res = dir_read(&sdj, 0);	/* Read an item */
 7454              		.loc 1 3481 0
 7455 30bc 07F11403 		add	r3, r7, #20
 7456 30c0 1846     		mov	r0, r3
 7457 30c2 4FF00001 		mov	r1, #0
 7458 30c6 FDF70BFF 		bl	dir_read
 7459 30ca 0346     		mov	r3, r0
 7460 30cc 87F85730 		strb	r3, [r7, #87]
3482:../Sources/ff10b/src/ff.c **** 						if (res == FR_OK		/* Not empty directory */
 7461              		.loc 1 3482 0
 7462 30d0 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 7463 30d4 002B     		cmp	r3, #0
 7464 30d6 03D1     		bne	.L463
3483:../Sources/ff10b/src/ff.c **** #if _FS_RPATH
3484:../Sources/ff10b/src/ff.c **** 						|| dclst == dj.fs->cdir	/* Current directory */
3485:../Sources/ff10b/src/ff.c **** #endif
3486:../Sources/ff10b/src/ff.c **** 						) res = FR_DENIED;
 7465              		.loc 1 3486 0
 7466 30d8 4FF00703 		mov	r3, #7
 7467 30dc 87F85730 		strb	r3, [r7, #87]
 7468              	.L463:
3487:../Sources/ff10b/src/ff.c **** 						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
 7469              		.loc 1 3487 0
 7470 30e0 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 7471 30e4 042B     		cmp	r3, #4
 7472 30e6 03D1     		bne	.L461
 7473              		.loc 1 3487 0 is_stmt 0 discriminator 1
 7474 30e8 4FF00003 		mov	r3, #0
 7475 30ec 87F85730 		strb	r3, [r7, #87]
 7476              	.L461:
3488:../Sources/ff10b/src/ff.c **** 					}
3489:../Sources/ff10b/src/ff.c **** 				}
3490:../Sources/ff10b/src/ff.c **** 			}
3491:../Sources/ff10b/src/ff.c **** 			if (res == FR_OK) {
 7477              		.loc 1 3491 0 is_stmt 1
 7478 30f0 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 7479 30f4 002B     		cmp	r3, #0
 7480 30f6 21D1     		bne	.L458
3492:../Sources/ff10b/src/ff.c **** 				res = dir_remove(&dj);		/* Remove the directory entry */
 7481              		.loc 1 3492 0
 7482 30f8 07F13003 		add	r3, r7, #48
 7483 30fc 1846     		mov	r0, r3
 7484 30fe FDF787FF 		bl	dir_remove
 7485 3102 0346     		mov	r3, r0
 7486 3104 87F85730 		strb	r3, [r7, #87]
3493:../Sources/ff10b/src/ff.c **** 				if (res == FR_OK) {
 7487              		.loc 1 3493 0
 7488 3108 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 7489 310c 002B     		cmp	r3, #0
 7490 310e 15D1     		bne	.L458
3494:../Sources/ff10b/src/ff.c **** 					if (dclst)				/* Remove the cluster chain if exist */
 7491              		.loc 1 3494 0
 7492 3110 FB6C     		ldr	r3, [r7, #76]
 7493 3112 002B     		cmp	r3, #0
 7494 3114 07D0     		beq	.L464
3495:../Sources/ff10b/src/ff.c **** 						res = remove_chain(dj.fs, dclst);
 7495              		.loc 1 3495 0
 7496 3116 3B6B     		ldr	r3, [r7, #48]
 7497 3118 1846     		mov	r0, r3
 7498 311a F96C     		ldr	r1, [r7, #76]
 7499 311c FDF770FB 		bl	remove_chain
 7500 3120 0346     		mov	r3, r0
 7501 3122 87F85730 		strb	r3, [r7, #87]
 7502              	.L464:
3496:../Sources/ff10b/src/ff.c **** 					if (res == FR_OK) res = sync_fs(dj.fs);
 7503              		.loc 1 3496 0
 7504 3126 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
 7505 312a 002B     		cmp	r3, #0
 7506 312c 06D1     		bne	.L458
 7507              		.loc 1 3496 0 is_stmt 0 discriminator 1
 7508 312e 3B6B     		ldr	r3, [r7, #48]
 7509 3130 1846     		mov	r0, r3
 7510 3132 FDF77FF8 		bl	sync_fs
 7511 3136 0346     		mov	r3, r0
 7512 3138 87F85730 		strb	r3, [r7, #87]
 7513              	.L458:
3497:../Sources/ff10b/src/ff.c **** 				}
3498:../Sources/ff10b/src/ff.c **** 			}
3499:../Sources/ff10b/src/ff.c **** 		}
3500:../Sources/ff10b/src/ff.c **** 		FREE_BUF();
3501:../Sources/ff10b/src/ff.c **** 	}
3502:../Sources/ff10b/src/ff.c **** 
3503:../Sources/ff10b/src/ff.c **** 	LEAVE_FF(dj.fs, res);
 7514              		.loc 1 3503 0 is_stmt 1
 7515 313c 97F85730 		ldrb	r3, [r7, #87]	@ zero_extendqisi2
3504:../Sources/ff10b/src/ff.c **** }
 7516              		.loc 1 3504 0
 7517 3140 1846     		mov	r0, r3
 7518 3142 07F15807 		add	r7, r7, #88
 7519 3146 BD46     		mov	sp, r7
 7520 3148 80BD     		pop	{r7, pc}
 7521              		.cfi_endproc
 7522              	.LFE42:
 7524 314a 00BF     		.align	2
 7525              		.global	f_mkdir
 7526              		.thumb
 7527              		.thumb_func
 7529              	f_mkdir:
 7530              	.LFB43:
3505:../Sources/ff10b/src/ff.c **** 
3506:../Sources/ff10b/src/ff.c **** 
3507:../Sources/ff10b/src/ff.c **** 
3508:../Sources/ff10b/src/ff.c **** 
3509:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
3510:../Sources/ff10b/src/ff.c **** /* Create a Directory                                                    */
3511:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
3512:../Sources/ff10b/src/ff.c **** 
3513:../Sources/ff10b/src/ff.c **** FRESULT f_mkdir (
3514:../Sources/ff10b/src/ff.c **** 	const TCHAR* path		/* Pointer to the directory path */
3515:../Sources/ff10b/src/ff.c **** )
3516:../Sources/ff10b/src/ff.c **** {
 7531              		.loc 1 3516 0
 7532              		.cfi_startproc
 7533              		@ args = 0, pretend = 0, frame = 72
 7534              		@ frame_needed = 1, uses_anonymous_args = 0
 7535 314c 80B5     		push	{r7, lr}
 7536              	.LCFI128:
 7537              		.cfi_def_cfa_offset 8
 7538              		.cfi_offset 7, -8
 7539              		.cfi_offset 14, -4
 7540 314e 92B0     		sub	sp, sp, #72
 7541              	.LCFI129:
 7542              		.cfi_def_cfa_offset 80
 7543 3150 00AF     		add	r7, sp, #0
 7544              	.LCFI130:
 7545              		.cfi_def_cfa_register 7
 7546 3152 7860     		str	r0, [r7, #4]
3517:../Sources/ff10b/src/ff.c **** 	FRESULT res;
3518:../Sources/ff10b/src/ff.c **** 	DIR dj;
3519:../Sources/ff10b/src/ff.c **** 	BYTE *dir, n;
3520:../Sources/ff10b/src/ff.c **** 	DWORD dsc, dcl, pcl, tm = get_fattime();
 7547              		.loc 1 3520 0
 7548 3154 FFF7FEFF 		bl	get_fattime
 7549 3158 B863     		str	r0, [r7, #56]
3521:../Sources/ff10b/src/ff.c **** 	DEF_NAMEBUF;
3522:../Sources/ff10b/src/ff.c **** 
3523:../Sources/ff10b/src/ff.c **** 
3524:../Sources/ff10b/src/ff.c **** 	/* Get logical drive number */
3525:../Sources/ff10b/src/ff.c **** 	res = find_volume(&dj.fs, &path, 1);
 7550              		.loc 1 3525 0
 7551 315a 07F11402 		add	r2, r7, #20
 7552 315e 07F10403 		add	r3, r7, #4
 7553 3162 1046     		mov	r0, r2
 7554 3164 1946     		mov	r1, r3
 7555 3166 4FF00102 		mov	r2, #1
 7556 316a FEF777FA 		bl	find_volume
 7557 316e 0346     		mov	r3, r0
 7558 3170 87F84730 		strb	r3, [r7, #71]
3526:../Sources/ff10b/src/ff.c **** 	if (res == FR_OK) {
 7559              		.loc 1 3526 0
 7560 3174 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 7561 3178 002B     		cmp	r3, #0
 7562 317a 40F03081 		bne	.L467
3527:../Sources/ff10b/src/ff.c **** 		INIT_BUF(dj);
 7563              		.loc 1 3527 0
 7564 317e 07F10803 		add	r3, r7, #8
 7565 3182 FB62     		str	r3, [r7, #44]
3528:../Sources/ff10b/src/ff.c **** 		res = follow_path(&dj, path);			/* Follow the file path */
 7566              		.loc 1 3528 0
 7567 3184 7B68     		ldr	r3, [r7, #4]
 7568 3186 07F11402 		add	r2, r7, #20
 7569 318a 1046     		mov	r0, r2
 7570 318c 1946     		mov	r1, r3
 7571 318e FEF737F9 		bl	follow_path
 7572 3192 0346     		mov	r3, r0
 7573 3194 87F84730 		strb	r3, [r7, #71]
3529:../Sources/ff10b/src/ff.c **** 		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 7574              		.loc 1 3529 0
 7575 3198 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 7576 319c 002B     		cmp	r3, #0
 7577 319e 03D1     		bne	.L468
 7578              		.loc 1 3529 0 is_stmt 0 discriminator 1
 7579 31a0 4FF00803 		mov	r3, #8
 7580 31a4 87F84730 		strb	r3, [r7, #71]
 7581              	.L468:
3530:../Sources/ff10b/src/ff.c **** 		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
3531:../Sources/ff10b/src/ff.c **** 			res = FR_INVALID_NAME;
3532:../Sources/ff10b/src/ff.c **** 		if (res == FR_NO_FILE) {				/* Can create a new directory */
 7582              		.loc 1 3532 0 is_stmt 1
 7583 31a8 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 7584 31ac 042B     		cmp	r3, #4
 7585 31ae 40F01681 		bne	.L467
3533:../Sources/ff10b/src/ff.c **** 			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
 7586              		.loc 1 3533 0
 7587 31b2 7B69     		ldr	r3, [r7, #20]
 7588 31b4 1846     		mov	r0, r3
 7589 31b6 4FF00001 		mov	r1, #0
 7590 31ba FDF77BFB 		bl	create_chain
 7591 31be 7863     		str	r0, [r7, #52]
3534:../Sources/ff10b/src/ff.c **** 			res = FR_OK;
 7592              		.loc 1 3534 0
 7593 31c0 4FF00003 		mov	r3, #0
 7594 31c4 87F84730 		strb	r3, [r7, #71]
3535:../Sources/ff10b/src/ff.c **** 			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 7595              		.loc 1 3535 0
 7596 31c8 7B6B     		ldr	r3, [r7, #52]
 7597 31ca 002B     		cmp	r3, #0
 7598 31cc 03D1     		bne	.L469
 7599              		.loc 1 3535 0 is_stmt 0 discriminator 1
 7600 31ce 4FF00703 		mov	r3, #7
 7601 31d2 87F84730 		strb	r3, [r7, #71]
 7602              	.L469:
3536:../Sources/ff10b/src/ff.c **** 			if (dcl == 1) res = FR_INT_ERR;
 7603              		.loc 1 3536 0 is_stmt 1
 7604 31d6 7B6B     		ldr	r3, [r7, #52]
 7605 31d8 012B     		cmp	r3, #1
 7606 31da 03D1     		bne	.L470
 7607              		.loc 1 3536 0 is_stmt 0 discriminator 1
 7608 31dc 4FF00203 		mov	r3, #2
 7609 31e0 87F84730 		strb	r3, [r7, #71]
 7610              	.L470:
3537:../Sources/ff10b/src/ff.c **** 			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 7611              		.loc 1 3537 0 is_stmt 1
 7612 31e4 7B6B     		ldr	r3, [r7, #52]
 7613 31e6 B3F1FF3F 		cmp	r3, #-1
 7614 31ea 03D1     		bne	.L471
 7615              		.loc 1 3537 0 is_stmt 0 discriminator 1
 7616 31ec 4FF00103 		mov	r3, #1
 7617 31f0 87F84730 		strb	r3, [r7, #71]
 7618              	.L471:
3538:../Sources/ff10b/src/ff.c **** 			if (res == FR_OK)					/* Flush FAT */
 7619              		.loc 1 3538 0 is_stmt 1
 7620 31f4 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 7621 31f8 002B     		cmp	r3, #0
 7622 31fa 06D1     		bne	.L472
3539:../Sources/ff10b/src/ff.c **** 				res = sync_window(dj.fs);
 7623              		.loc 1 3539 0
 7624 31fc 7B69     		ldr	r3, [r7, #20]
 7625 31fe 1846     		mov	r0, r3
 7626 3200 FCF79CFF 		bl	sync_window
 7627 3204 0346     		mov	r3, r0
 7628 3206 87F84730 		strb	r3, [r7, #71]
 7629              	.L472:
3540:../Sources/ff10b/src/ff.c **** 			if (res == FR_OK) {					/* Initialize the new directory table */
 7630              		.loc 1 3540 0
 7631 320a 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 7632 320e 002B     		cmp	r3, #0
 7633 3210 40F09880 		bne	.L473
3541:../Sources/ff10b/src/ff.c **** 				dsc = clust2sect(dj.fs, dcl);
 7634              		.loc 1 3541 0
 7635 3214 7B69     		ldr	r3, [r7, #20]
 7636 3216 1846     		mov	r0, r3
 7637 3218 796B     		ldr	r1, [r7, #52]
 7638 321a FFF7FEFF 		bl	clust2sect
 7639 321e 3864     		str	r0, [r7, #64]
3542:../Sources/ff10b/src/ff.c **** 				dir = dj.fs->win;
 7640              		.loc 1 3542 0
 7641 3220 7B69     		ldr	r3, [r7, #20]
 7642 3222 03F13003 		add	r3, r3, #48
 7643 3226 3B63     		str	r3, [r7, #48]
3543:../Sources/ff10b/src/ff.c **** 				mem_set(dir, 0, SS(dj.fs));
 7644              		.loc 1 3543 0
 7645 3228 386B     		ldr	r0, [r7, #48]
 7646 322a 4FF00001 		mov	r1, #0
 7647 322e 4FF40072 		mov	r2, #512
 7648 3232 FCF70DFF 		bl	mem_set
3544:../Sources/ff10b/src/ff.c **** 				mem_set(dir+DIR_Name, ' ', 11);	/* Create "." entry */
 7649              		.loc 1 3544 0
 7650 3236 386B     		ldr	r0, [r7, #48]
 7651 3238 4FF02001 		mov	r1, #32
 7652 323c 4FF00B02 		mov	r2, #11
 7653 3240 FCF706FF 		bl	mem_set
3545:../Sources/ff10b/src/ff.c **** 				dir[DIR_Name] = '.';
 7654              		.loc 1 3545 0
 7655 3244 3B6B     		ldr	r3, [r7, #48]
 7656 3246 4FF02E02 		mov	r2, #46
 7657 324a 1A70     		strb	r2, [r3, #0]
3546:../Sources/ff10b/src/ff.c **** 				dir[DIR_Attr] = AM_DIR;
 7658              		.loc 1 3546 0
 7659 324c 3B6B     		ldr	r3, [r7, #48]
 7660 324e 03F10B03 		add	r3, r3, #11
 7661 3252 4FF01002 		mov	r2, #16
 7662 3256 1A70     		strb	r2, [r3, #0]
3547:../Sources/ff10b/src/ff.c **** 				ST_DWORD(dir+DIR_WrtTime, tm);
 7663              		.loc 1 3547 0
 7664 3258 3B6B     		ldr	r3, [r7, #48]
 7665 325a 03F11603 		add	r3, r3, #22
 7666 325e BA6B     		ldr	r2, [r7, #56]
 7667 3260 D2B2     		uxtb	r2, r2
 7668 3262 1A70     		strb	r2, [r3, #0]
 7669 3264 3B6B     		ldr	r3, [r7, #48]
 7670 3266 03F11703 		add	r3, r3, #23
 7671 326a BA6B     		ldr	r2, [r7, #56]
 7672 326c 92B2     		uxth	r2, r2
 7673 326e 4FEA1222 		lsr	r2, r2, #8
 7674 3272 92B2     		uxth	r2, r2
 7675 3274 D2B2     		uxtb	r2, r2
 7676 3276 1A70     		strb	r2, [r3, #0]
 7677 3278 3B6B     		ldr	r3, [r7, #48]
 7678 327a 03F11803 		add	r3, r3, #24
 7679 327e BA6B     		ldr	r2, [r7, #56]
 7680 3280 4FEA1242 		lsr	r2, r2, #16
 7681 3284 D2B2     		uxtb	r2, r2
 7682 3286 1A70     		strb	r2, [r3, #0]
 7683 3288 3B6B     		ldr	r3, [r7, #48]
 7684 328a 03F11903 		add	r3, r3, #25
 7685 328e BA6B     		ldr	r2, [r7, #56]
 7686 3290 4FEA1262 		lsr	r2, r2, #24
 7687 3294 D2B2     		uxtb	r2, r2
 7688 3296 1A70     		strb	r2, [r3, #0]
3548:../Sources/ff10b/src/ff.c **** 				st_clust(dir, dcl);
 7689              		.loc 1 3548 0
 7690 3298 386B     		ldr	r0, [r7, #48]
 7691 329a 796B     		ldr	r1, [r7, #52]
 7692 329c FDF7A0FD 		bl	st_clust
3549:../Sources/ff10b/src/ff.c **** 				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
 7693              		.loc 1 3549 0
 7694 32a0 3B6B     		ldr	r3, [r7, #48]
 7695 32a2 03F12003 		add	r3, r3, #32
 7696 32a6 1846     		mov	r0, r3
 7697 32a8 396B     		ldr	r1, [r7, #48]
 7698 32aa 4FF02002 		mov	r2, #32
 7699 32ae FCF7A7FE 		bl	mem_cpy
3550:../Sources/ff10b/src/ff.c **** 				dir[SZ_DIR+1] = '.'; pcl = dj.sclust;
 7700              		.loc 1 3550 0
 7701 32b2 3B6B     		ldr	r3, [r7, #48]
 7702 32b4 03F12103 		add	r3, r3, #33
 7703 32b8 4FF02E02 		mov	r2, #46
 7704 32bc 1A70     		strb	r2, [r3, #0]
 7705 32be FB69     		ldr	r3, [r7, #28]
 7706 32c0 FB63     		str	r3, [r7, #60]
3551:../Sources/ff10b/src/ff.c **** 				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
 7707              		.loc 1 3551 0
 7708 32c2 7B69     		ldr	r3, [r7, #20]
 7709 32c4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 7710 32c6 032B     		cmp	r3, #3
 7711 32c8 07D1     		bne	.L474
 7712              		.loc 1 3551 0 is_stmt 0 discriminator 1
 7713 32ca 7B69     		ldr	r3, [r7, #20]
 7714 32cc 5A6A     		ldr	r2, [r3, #36]
 7715 32ce FB6B     		ldr	r3, [r7, #60]
 7716 32d0 9A42     		cmp	r2, r3
 7717 32d2 02D1     		bne	.L474
3552:../Sources/ff10b/src/ff.c **** 					pcl = 0;
 7718              		.loc 1 3552 0 is_stmt 1
 7719 32d4 4FF00003 		mov	r3, #0
 7720 32d8 FB63     		str	r3, [r7, #60]
 7721              	.L474:
3553:../Sources/ff10b/src/ff.c **** 				st_clust(dir+SZ_DIR, pcl);
 7722              		.loc 1 3553 0
 7723 32da 3B6B     		ldr	r3, [r7, #48]
 7724 32dc 03F12003 		add	r3, r3, #32
 7725 32e0 1846     		mov	r0, r3
 7726 32e2 F96B     		ldr	r1, [r7, #60]
 7727 32e4 FDF77CFD 		bl	st_clust
3554:../Sources/ff10b/src/ff.c **** 				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 7728              		.loc 1 3554 0
 7729 32e8 7B69     		ldr	r3, [r7, #20]
 7730 32ea 9B78     		ldrb	r3, [r3, #2]
 7731 32ec 87F84630 		strb	r3, [r7, #70]
 7732 32f0 22E0     		b	.L475
 7733              	.L477:
3555:../Sources/ff10b/src/ff.c **** 					dj.fs->winsect = dsc++;
 7734              		.loc 1 3555 0
 7735 32f2 7B69     		ldr	r3, [r7, #20]
 7736 32f4 3A6C     		ldr	r2, [r7, #64]
 7737 32f6 DA62     		str	r2, [r3, #44]
 7738 32f8 3B6C     		ldr	r3, [r7, #64]
 7739 32fa 03F10103 		add	r3, r3, #1
 7740 32fe 3B64     		str	r3, [r7, #64]
3556:../Sources/ff10b/src/ff.c **** 					dj.fs->wflag = 1;
 7741              		.loc 1 3556 0
 7742 3300 7B69     		ldr	r3, [r7, #20]
 7743 3302 4FF00102 		mov	r2, #1
 7744 3306 1A71     		strb	r2, [r3, #4]
3557:../Sources/ff10b/src/ff.c **** 					res = sync_window(dj.fs);
 7745              		.loc 1 3557 0
 7746 3308 7B69     		ldr	r3, [r7, #20]
 7747 330a 1846     		mov	r0, r3
 7748 330c FCF716FF 		bl	sync_window
 7749 3310 0346     		mov	r3, r0
 7750 3312 87F84730 		strb	r3, [r7, #71]
3558:../Sources/ff10b/src/ff.c **** 					if (res != FR_OK) break;
 7751              		.loc 1 3558 0
 7752 3316 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 7753 331a 002B     		cmp	r3, #0
 7754 331c 11D1     		bne	.L481
 7755              	.L476:
3559:../Sources/ff10b/src/ff.c **** 					mem_set(dir, 0, SS(dj.fs));
 7756              		.loc 1 3559 0
 7757 331e 386B     		ldr	r0, [r7, #48]
 7758 3320 4FF00001 		mov	r1, #0
 7759 3324 4FF40072 		mov	r2, #512
 7760 3328 FCF792FE 		bl	mem_set
3554:../Sources/ff10b/src/ff.c **** 				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 7761              		.loc 1 3554 0
 7762 332c 97F84630 		ldrb	r3, [r7, #70]
 7763 3330 03F1FF33 		add	r3, r3, #-1
 7764 3334 87F84630 		strb	r3, [r7, #70]
 7765              	.L475:
3554:../Sources/ff10b/src/ff.c **** 				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 7766              		.loc 1 3554 0 is_stmt 0 discriminator 1
 7767 3338 97F84630 		ldrb	r3, [r7, #70]	@ zero_extendqisi2
 7768 333c 002B     		cmp	r3, #0
 7769 333e D8D1     		bne	.L477
 7770 3340 00E0     		b	.L473
 7771              	.L481:
3558:../Sources/ff10b/src/ff.c **** 					if (res != FR_OK) break;
 7772              		.loc 1 3558 0 is_stmt 1
 7773 3342 00BF     		nop
 7774              	.L473:
3560:../Sources/ff10b/src/ff.c **** 				}
3561:../Sources/ff10b/src/ff.c **** 			}
3562:../Sources/ff10b/src/ff.c **** 			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
 7775              		.loc 1 3562 0
 7776 3344 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 7777 3348 002B     		cmp	r3, #0
 7778 334a 07D1     		bne	.L478
 7779              		.loc 1 3562 0 is_stmt 0 discriminator 1
 7780 334c 07F11403 		add	r3, r7, #20
 7781 3350 1846     		mov	r0, r3
 7782 3352 FDF723FE 		bl	dir_register
 7783 3356 0346     		mov	r3, r0
 7784 3358 87F84730 		strb	r3, [r7, #71]
 7785              	.L478:
3563:../Sources/ff10b/src/ff.c **** 			if (res != FR_OK) {
 7786              		.loc 1 3563 0 is_stmt 1
 7787 335c 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
 7788 3360 002B     		cmp	r3, #0
 7789 3362 05D0     		beq	.L479
3564:../Sources/ff10b/src/ff.c **** 				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
 7790              		.loc 1 3564 0
 7791 3364 7B69     		ldr	r3, [r7, #20]
 7792 3366 1846     		mov	r0, r3
 7793 3368 796B     		ldr	r1, [r7, #52]
 7794 336a FDF749FA 		bl	remove_chain
 7795 336e 36E0     		b	.L467
 7796              	.L479:
3565:../Sources/ff10b/src/ff.c **** 			} else {
3566:../Sources/ff10b/src/ff.c **** 				dir = dj.dir;
 7797              		.loc 1 3566 0
 7798 3370 BB6A     		ldr	r3, [r7, #40]
 7799 3372 3B63     		str	r3, [r7, #48]
3567:../Sources/ff10b/src/ff.c **** 				dir[DIR_Attr] = AM_DIR;				/* Attribute */
 7800              		.loc 1 3567 0
 7801 3374 3B6B     		ldr	r3, [r7, #48]
 7802 3376 03F10B03 		add	r3, r3, #11
 7803 337a 4FF01002 		mov	r2, #16
 7804 337e 1A70     		strb	r2, [r3, #0]
3568:../Sources/ff10b/src/ff.c **** 				ST_DWORD(dir+DIR_WrtTime, tm);		/* Created time */
 7805              		.loc 1 3568 0
 7806 3380 3B6B     		ldr	r3, [r7, #48]
 7807 3382 03F11603 		add	r3, r3, #22
 7808 3386 BA6B     		ldr	r2, [r7, #56]
 7809 3388 D2B2     		uxtb	r2, r2
 7810 338a 1A70     		strb	r2, [r3, #0]
 7811 338c 3B6B     		ldr	r3, [r7, #48]
 7812 338e 03F11703 		add	r3, r3, #23
 7813 3392 BA6B     		ldr	r2, [r7, #56]
 7814 3394 92B2     		uxth	r2, r2
 7815 3396 4FEA1222 		lsr	r2, r2, #8
 7816 339a 92B2     		uxth	r2, r2
 7817 339c D2B2     		uxtb	r2, r2
 7818 339e 1A70     		strb	r2, [r3, #0]
 7819 33a0 3B6B     		ldr	r3, [r7, #48]
 7820 33a2 03F11803 		add	r3, r3, #24
 7821 33a6 BA6B     		ldr	r2, [r7, #56]
 7822 33a8 4FEA1242 		lsr	r2, r2, #16
 7823 33ac D2B2     		uxtb	r2, r2
 7824 33ae 1A70     		strb	r2, [r3, #0]
 7825 33b0 3B6B     		ldr	r3, [r7, #48]
 7826 33b2 03F11903 		add	r3, r3, #25
 7827 33b6 BA6B     		ldr	r2, [r7, #56]
 7828 33b8 4FEA1262 		lsr	r2, r2, #24
 7829 33bc D2B2     		uxtb	r2, r2
 7830 33be 1A70     		strb	r2, [r3, #0]
3569:../Sources/ff10b/src/ff.c **** 				st_clust(dir, dcl);					/* Table start cluster */
 7831              		.loc 1 3569 0
 7832 33c0 386B     		ldr	r0, [r7, #48]
 7833 33c2 796B     		ldr	r1, [r7, #52]
 7834 33c4 FDF70CFD 		bl	st_clust
3570:../Sources/ff10b/src/ff.c **** 				dj.fs->wflag = 1;
 7835              		.loc 1 3570 0
 7836 33c8 7B69     		ldr	r3, [r7, #20]
 7837 33ca 4FF00102 		mov	r2, #1
 7838 33ce 1A71     		strb	r2, [r3, #4]
3571:../Sources/ff10b/src/ff.c **** 				res = sync_fs(dj.fs);
 7839              		.loc 1 3571 0
 7840 33d0 7B69     		ldr	r3, [r7, #20]
 7841 33d2 1846     		mov	r0, r3
 7842 33d4 FCF72EFF 		bl	sync_fs
 7843 33d8 0346     		mov	r3, r0
 7844 33da 87F84730 		strb	r3, [r7, #71]
 7845              	.L467:
3572:../Sources/ff10b/src/ff.c **** 			}
3573:../Sources/ff10b/src/ff.c **** 		}
3574:../Sources/ff10b/src/ff.c **** 		FREE_BUF();
3575:../Sources/ff10b/src/ff.c **** 	}
3576:../Sources/ff10b/src/ff.c **** 
3577:../Sources/ff10b/src/ff.c **** 	LEAVE_FF(dj.fs, res);
 7846              		.loc 1 3577 0
 7847 33de 97F84730 		ldrb	r3, [r7, #71]	@ zero_extendqisi2
3578:../Sources/ff10b/src/ff.c **** }
 7848              		.loc 1 3578 0
 7849 33e2 1846     		mov	r0, r3
 7850 33e4 07F14807 		add	r7, r7, #72
 7851 33e8 BD46     		mov	sp, r7
 7852 33ea 80BD     		pop	{r7, pc}
 7853              		.cfi_endproc
 7854              	.LFE43:
 7856              		.align	2
 7857              		.global	f_chmod
 7858              		.thumb
 7859              		.thumb_func
 7861              	f_chmod:
 7862              	.LFB44:
3579:../Sources/ff10b/src/ff.c **** 
3580:../Sources/ff10b/src/ff.c **** 
3581:../Sources/ff10b/src/ff.c **** 
3582:../Sources/ff10b/src/ff.c **** 
3583:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
3584:../Sources/ff10b/src/ff.c **** /* Change Attribute                                                      */
3585:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
3586:../Sources/ff10b/src/ff.c **** 
3587:../Sources/ff10b/src/ff.c **** FRESULT f_chmod (
3588:../Sources/ff10b/src/ff.c **** 	const TCHAR* path,	/* Pointer to the file path */
3589:../Sources/ff10b/src/ff.c **** 	BYTE value,			/* Attribute bits */
3590:../Sources/ff10b/src/ff.c **** 	BYTE mask			/* Attribute mask to change */
3591:../Sources/ff10b/src/ff.c **** )
3592:../Sources/ff10b/src/ff.c **** {
 7863              		.loc 1 3592 0
 7864              		.cfi_startproc
 7865              		@ args = 0, pretend = 0, frame = 56
 7866              		@ frame_needed = 1, uses_anonymous_args = 0
 7867 33ec 80B5     		push	{r7, lr}
 7868              	.LCFI131:
 7869              		.cfi_def_cfa_offset 8
 7870              		.cfi_offset 7, -8
 7871              		.cfi_offset 14, -4
 7872 33ee 8EB0     		sub	sp, sp, #56
 7873              	.LCFI132:
 7874              		.cfi_def_cfa_offset 64
 7875 33f0 00AF     		add	r7, sp, #0
 7876              	.LCFI133:
 7877              		.cfi_def_cfa_register 7
 7878 33f2 7860     		str	r0, [r7, #4]
 7879 33f4 1346     		mov	r3, r2
 7880 33f6 0A46     		mov	r2, r1
 7881 33f8 FA70     		strb	r2, [r7, #3]
 7882 33fa BB70     		strb	r3, [r7, #2]
3593:../Sources/ff10b/src/ff.c **** 	FRESULT res;
3594:../Sources/ff10b/src/ff.c **** 	DIR dj;
3595:../Sources/ff10b/src/ff.c **** 	BYTE *dir;
3596:../Sources/ff10b/src/ff.c **** 	DEF_NAMEBUF;
3597:../Sources/ff10b/src/ff.c **** 
3598:../Sources/ff10b/src/ff.c **** 
3599:../Sources/ff10b/src/ff.c **** 	/* Get logical drive number */
3600:../Sources/ff10b/src/ff.c **** 	res = find_volume(&dj.fs, &path, 1);
 7883              		.loc 1 3600 0
 7884 33fc 07F11402 		add	r2, r7, #20
 7885 3400 07F10403 		add	r3, r7, #4
 7886 3404 1046     		mov	r0, r2
 7887 3406 1946     		mov	r1, r3
 7888 3408 4FF00102 		mov	r2, #1
 7889 340c FEF726F9 		bl	find_volume
 7890 3410 0346     		mov	r3, r0
 7891 3412 87F83730 		strb	r3, [r7, #55]
3601:../Sources/ff10b/src/ff.c **** 	if (res == FR_OK) {
 7892              		.loc 1 3601 0
 7893 3416 97F83730 		ldrb	r3, [r7, #55]	@ zero_extendqisi2
 7894 341a 002B     		cmp	r3, #0
 7895 341c 3DD1     		bne	.L483
3602:../Sources/ff10b/src/ff.c **** 		INIT_BUF(dj);
 7896              		.loc 1 3602 0
 7897 341e 07F10803 		add	r3, r7, #8
 7898 3422 FB62     		str	r3, [r7, #44]
3603:../Sources/ff10b/src/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
 7899              		.loc 1 3603 0
 7900 3424 7B68     		ldr	r3, [r7, #4]
 7901 3426 07F11402 		add	r2, r7, #20
 7902 342a 1046     		mov	r0, r2
 7903 342c 1946     		mov	r1, r3
 7904 342e FDF7E7FF 		bl	follow_path
 7905 3432 0346     		mov	r3, r0
 7906 3434 87F83730 		strb	r3, [r7, #55]
3604:../Sources/ff10b/src/ff.c **** 		FREE_BUF();
3605:../Sources/ff10b/src/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
3606:../Sources/ff10b/src/ff.c **** 			res = FR_INVALID_NAME;
3607:../Sources/ff10b/src/ff.c **** 		if (res == FR_OK) {
 7907              		.loc 1 3607 0
 7908 3438 97F83730 		ldrb	r3, [r7, #55]	@ zero_extendqisi2
 7909 343c 002B     		cmp	r3, #0
 7910 343e 2CD1     		bne	.L483
3608:../Sources/ff10b/src/ff.c **** 			dir = dj.dir;
 7911              		.loc 1 3608 0
 7912 3440 BB6A     		ldr	r3, [r7, #40]
 7913 3442 3B63     		str	r3, [r7, #48]
3609:../Sources/ff10b/src/ff.c **** 			if (!dir) {						/* Is it a root directory? */
 7914              		.loc 1 3609 0
 7915 3444 3B6B     		ldr	r3, [r7, #48]
 7916 3446 002B     		cmp	r3, #0
 7917 3448 04D1     		bne	.L484
3610:../Sources/ff10b/src/ff.c **** 				res = FR_INVALID_NAME;
 7918              		.loc 1 3610 0
 7919 344a 4FF00603 		mov	r3, #6
 7920 344e 87F83730 		strb	r3, [r7, #55]
 7921 3452 22E0     		b	.L483
 7922              	.L484:
3611:../Sources/ff10b/src/ff.c **** 			} else {						/* File or sub directory */
3612:../Sources/ff10b/src/ff.c **** 				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
 7923              		.loc 1 3612 0
 7924 3454 BB78     		ldrb	r3, [r7, #2]
 7925 3456 03F02703 		and	r3, r3, #39
 7926 345a BB70     		strb	r3, [r7, #2]
3613:../Sources/ff10b/src/ff.c **** 				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
 7927              		.loc 1 3613 0
 7928 345c 3B6B     		ldr	r3, [r7, #48]
 7929 345e 03F10B03 		add	r3, r3, #11
 7930 3462 F978     		ldrb	r1, [r7, #3]
 7931 3464 BA78     		ldrb	r2, [r7, #2]
 7932 3466 0A40     		ands	r2, r2, r1
 7933 3468 D1B2     		uxtb	r1, r2
 7934 346a 3A6B     		ldr	r2, [r7, #48]
 7935 346c 02F10B02 		add	r2, r2, #11
 7936 3470 1078     		ldrb	r0, [r2, #0]	@ zero_extendqisi2
 7937 3472 BA78     		ldrb	r2, [r7, #2]
 7938 3474 6FEA0202 		mvn	r2, r2
 7939 3478 D2B2     		uxtb	r2, r2
 7940 347a 0240     		ands	r2, r2, r0
 7941 347c D2B2     		uxtb	r2, r2
 7942 347e 0A43     		orrs	r2, r2, r1
 7943 3480 D2B2     		uxtb	r2, r2
 7944 3482 1A70     		strb	r2, [r3, #0]
3614:../Sources/ff10b/src/ff.c **** 				dj.fs->wflag = 1;
 7945              		.loc 1 3614 0
 7946 3484 7B69     		ldr	r3, [r7, #20]
 7947 3486 4FF00102 		mov	r2, #1
 7948 348a 1A71     		strb	r2, [r3, #4]
3615:../Sources/ff10b/src/ff.c **** 				res = sync_fs(dj.fs);
 7949              		.loc 1 3615 0
 7950 348c 7B69     		ldr	r3, [r7, #20]
 7951 348e 1846     		mov	r0, r3
 7952 3490 FCF7D0FE 		bl	sync_fs
 7953 3494 0346     		mov	r3, r0
 7954 3496 87F83730 		strb	r3, [r7, #55]
 7955              	.L483:
3616:../Sources/ff10b/src/ff.c **** 			}
3617:../Sources/ff10b/src/ff.c **** 		}
3618:../Sources/ff10b/src/ff.c **** 	}
3619:../Sources/ff10b/src/ff.c **** 
3620:../Sources/ff10b/src/ff.c **** 	LEAVE_FF(dj.fs, res);
 7956              		.loc 1 3620 0
 7957 349a 97F83730 		ldrb	r3, [r7, #55]	@ zero_extendqisi2
3621:../Sources/ff10b/src/ff.c **** }
 7958              		.loc 1 3621 0
 7959 349e 1846     		mov	r0, r3
 7960 34a0 07F13807 		add	r7, r7, #56
 7961 34a4 BD46     		mov	sp, r7
 7962 34a6 80BD     		pop	{r7, pc}
 7963              		.cfi_endproc
 7964              	.LFE44:
 7966              		.align	2
 7967              		.global	f_utime
 7968              		.thumb
 7969              		.thumb_func
 7971              	f_utime:
 7972              	.LFB45:
3622:../Sources/ff10b/src/ff.c **** 
3623:../Sources/ff10b/src/ff.c **** 
3624:../Sources/ff10b/src/ff.c **** 
3625:../Sources/ff10b/src/ff.c **** 
3626:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
3627:../Sources/ff10b/src/ff.c **** /* Change Timestamp                                                      */
3628:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
3629:../Sources/ff10b/src/ff.c **** 
3630:../Sources/ff10b/src/ff.c **** FRESULT f_utime (
3631:../Sources/ff10b/src/ff.c **** 	const TCHAR* path,	/* Pointer to the file/directory name */
3632:../Sources/ff10b/src/ff.c **** 	const FILINFO* fno	/* Pointer to the time stamp to be set */
3633:../Sources/ff10b/src/ff.c **** )
3634:../Sources/ff10b/src/ff.c **** {
 7973              		.loc 1 3634 0
 7974              		.cfi_startproc
 7975              		@ args = 0, pretend = 0, frame = 56
 7976              		@ frame_needed = 1, uses_anonymous_args = 0
 7977 34a8 80B5     		push	{r7, lr}
 7978              	.LCFI134:
 7979              		.cfi_def_cfa_offset 8
 7980              		.cfi_offset 7, -8
 7981              		.cfi_offset 14, -4
 7982 34aa 8EB0     		sub	sp, sp, #56
 7983              	.LCFI135:
 7984              		.cfi_def_cfa_offset 64
 7985 34ac 00AF     		add	r7, sp, #0
 7986              	.LCFI136:
 7987              		.cfi_def_cfa_register 7
 7988 34ae 7860     		str	r0, [r7, #4]
 7989 34b0 3960     		str	r1, [r7, #0]
3635:../Sources/ff10b/src/ff.c **** 	FRESULT res;
3636:../Sources/ff10b/src/ff.c **** 	DIR dj;
3637:../Sources/ff10b/src/ff.c **** 	BYTE *dir;
3638:../Sources/ff10b/src/ff.c **** 	DEF_NAMEBUF;
3639:../Sources/ff10b/src/ff.c **** 
3640:../Sources/ff10b/src/ff.c **** 
3641:../Sources/ff10b/src/ff.c **** 	/* Get logical drive number */
3642:../Sources/ff10b/src/ff.c **** 	res = find_volume(&dj.fs, &path, 1);
 7990              		.loc 1 3642 0
 7991 34b2 07F11402 		add	r2, r7, #20
 7992 34b6 07F10403 		add	r3, r7, #4
 7993 34ba 1046     		mov	r0, r2
 7994 34bc 1946     		mov	r1, r3
 7995 34be 4FF00102 		mov	r2, #1
 7996 34c2 FEF7CBF8 		bl	find_volume
 7997 34c6 0346     		mov	r3, r0
 7998 34c8 87F83730 		strb	r3, [r7, #55]
3643:../Sources/ff10b/src/ff.c **** 	if (res == FR_OK) {
 7999              		.loc 1 3643 0
 8000 34cc 97F83730 		ldrb	r3, [r7, #55]	@ zero_extendqisi2
 8001 34d0 002B     		cmp	r3, #0
 8002 34d2 47D1     		bne	.L487
3644:../Sources/ff10b/src/ff.c **** 		INIT_BUF(dj);
 8003              		.loc 1 3644 0
 8004 34d4 07F10803 		add	r3, r7, #8
 8005 34d8 FB62     		str	r3, [r7, #44]
3645:../Sources/ff10b/src/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 8006              		.loc 1 3645 0
 8007 34da 7B68     		ldr	r3, [r7, #4]
 8008 34dc 07F11402 		add	r2, r7, #20
 8009 34e0 1046     		mov	r0, r2
 8010 34e2 1946     		mov	r1, r3
 8011 34e4 FDF78CFF 		bl	follow_path
 8012 34e8 0346     		mov	r3, r0
 8013 34ea 87F83730 		strb	r3, [r7, #55]
3646:../Sources/ff10b/src/ff.c **** 		FREE_BUF();
3647:../Sources/ff10b/src/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
3648:../Sources/ff10b/src/ff.c **** 			res = FR_INVALID_NAME;
3649:../Sources/ff10b/src/ff.c **** 		if (res == FR_OK) {
 8014              		.loc 1 3649 0
 8015 34ee 97F83730 		ldrb	r3, [r7, #55]	@ zero_extendqisi2
 8016 34f2 002B     		cmp	r3, #0
 8017 34f4 36D1     		bne	.L487
3650:../Sources/ff10b/src/ff.c **** 			dir = dj.dir;
 8018              		.loc 1 3650 0
 8019 34f6 BB6A     		ldr	r3, [r7, #40]
 8020 34f8 3B63     		str	r3, [r7, #48]
3651:../Sources/ff10b/src/ff.c **** 			if (!dir) {					/* Root directory */
 8021              		.loc 1 3651 0
 8022 34fa 3B6B     		ldr	r3, [r7, #48]
 8023 34fc 002B     		cmp	r3, #0
 8024 34fe 04D1     		bne	.L488
3652:../Sources/ff10b/src/ff.c **** 				res = FR_INVALID_NAME;
 8025              		.loc 1 3652 0
 8026 3500 4FF00603 		mov	r3, #6
 8027 3504 87F83730 		strb	r3, [r7, #55]
 8028 3508 2CE0     		b	.L487
 8029              	.L488:
3653:../Sources/ff10b/src/ff.c **** 			} else {					/* File or sub-directory */
3654:../Sources/ff10b/src/ff.c **** 				ST_WORD(dir+DIR_WrtTime, fno->ftime);
 8030              		.loc 1 3654 0
 8031 350a 3B6B     		ldr	r3, [r7, #48]
 8032 350c 03F11603 		add	r3, r3, #22
 8033 3510 3A68     		ldr	r2, [r7, #0]
 8034 3512 D288     		ldrh	r2, [r2, #6]
 8035 3514 D2B2     		uxtb	r2, r2
 8036 3516 1A70     		strb	r2, [r3, #0]
 8037 3518 3B6B     		ldr	r3, [r7, #48]
 8038 351a 03F11703 		add	r3, r3, #23
 8039 351e 3A68     		ldr	r2, [r7, #0]
 8040 3520 D288     		ldrh	r2, [r2, #6]
 8041 3522 4FEA1222 		lsr	r2, r2, #8
 8042 3526 92B2     		uxth	r2, r2
 8043 3528 D2B2     		uxtb	r2, r2
 8044 352a 1A70     		strb	r2, [r3, #0]
3655:../Sources/ff10b/src/ff.c **** 				ST_WORD(dir+DIR_WrtDate, fno->fdate);
 8045              		.loc 1 3655 0
 8046 352c 3B6B     		ldr	r3, [r7, #48]
 8047 352e 03F11803 		add	r3, r3, #24
 8048 3532 3A68     		ldr	r2, [r7, #0]
 8049 3534 9288     		ldrh	r2, [r2, #4]
 8050 3536 D2B2     		uxtb	r2, r2
 8051 3538 1A70     		strb	r2, [r3, #0]
 8052 353a 3B6B     		ldr	r3, [r7, #48]
 8053 353c 03F11903 		add	r3, r3, #25
 8054 3540 3A68     		ldr	r2, [r7, #0]
 8055 3542 9288     		ldrh	r2, [r2, #4]
 8056 3544 4FEA1222 		lsr	r2, r2, #8
 8057 3548 92B2     		uxth	r2, r2
 8058 354a D2B2     		uxtb	r2, r2
 8059 354c 1A70     		strb	r2, [r3, #0]
3656:../Sources/ff10b/src/ff.c **** 				dj.fs->wflag = 1;
 8060              		.loc 1 3656 0
 8061 354e 7B69     		ldr	r3, [r7, #20]
 8062 3550 4FF00102 		mov	r2, #1
 8063 3554 1A71     		strb	r2, [r3, #4]
3657:../Sources/ff10b/src/ff.c **** 				res = sync_fs(dj.fs);
 8064              		.loc 1 3657 0
 8065 3556 7B69     		ldr	r3, [r7, #20]
 8066 3558 1846     		mov	r0, r3
 8067 355a FCF76BFE 		bl	sync_fs
 8068 355e 0346     		mov	r3, r0
 8069 3560 87F83730 		strb	r3, [r7, #55]
 8070              	.L487:
3658:../Sources/ff10b/src/ff.c **** 			}
3659:../Sources/ff10b/src/ff.c **** 		}
3660:../Sources/ff10b/src/ff.c **** 	}
3661:../Sources/ff10b/src/ff.c **** 
3662:../Sources/ff10b/src/ff.c **** 	LEAVE_FF(dj.fs, res);
 8071              		.loc 1 3662 0
 8072 3564 97F83730 		ldrb	r3, [r7, #55]	@ zero_extendqisi2
3663:../Sources/ff10b/src/ff.c **** }
 8073              		.loc 1 3663 0
 8074 3568 1846     		mov	r0, r3
 8075 356a 07F13807 		add	r7, r7, #56
 8076 356e BD46     		mov	sp, r7
 8077 3570 80BD     		pop	{r7, pc}
 8078              		.cfi_endproc
 8079              	.LFE45:
 8081 3572 00BF     		.align	2
 8082              		.global	f_rename
 8083              		.thumb
 8084              		.thumb_func
 8086              	f_rename:
 8087              	.LFB46:
3664:../Sources/ff10b/src/ff.c **** 
3665:../Sources/ff10b/src/ff.c **** 
3666:../Sources/ff10b/src/ff.c **** 
3667:../Sources/ff10b/src/ff.c **** 
3668:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
3669:../Sources/ff10b/src/ff.c **** /* Rename File/Directory                                                 */
3670:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
3671:../Sources/ff10b/src/ff.c **** 
3672:../Sources/ff10b/src/ff.c **** FRESULT f_rename (
3673:../Sources/ff10b/src/ff.c **** 	const TCHAR* path_old,	/* Pointer to the object to be renamed */
3674:../Sources/ff10b/src/ff.c **** 	const TCHAR* path_new	/* Pointer to the new name */
3675:../Sources/ff10b/src/ff.c **** )
3676:../Sources/ff10b/src/ff.c **** {
 8088              		.loc 1 3676 0
 8089              		.cfi_startproc
 8090              		@ args = 0, pretend = 0, frame = 112
 8091              		@ frame_needed = 1, uses_anonymous_args = 0
 8092 3574 90B5     		push	{r4, r7, lr}
 8093              	.LCFI137:
 8094              		.cfi_def_cfa_offset 12
 8095              		.cfi_offset 4, -12
 8096              		.cfi_offset 7, -8
 8097              		.cfi_offset 14, -4
 8098 3576 9DB0     		sub	sp, sp, #116
 8099              	.LCFI138:
 8100              		.cfi_def_cfa_offset 128
 8101 3578 00AF     		add	r7, sp, #0
 8102              	.LCFI139:
 8103              		.cfi_def_cfa_register 7
 8104 357a 7860     		str	r0, [r7, #4]
 8105 357c 3960     		str	r1, [r7, #0]
3677:../Sources/ff10b/src/ff.c **** 	FRESULT res;
3678:../Sources/ff10b/src/ff.c **** 	DIR djo, djn;
3679:../Sources/ff10b/src/ff.c **** 	BYTE buf[21], *dir;
3680:../Sources/ff10b/src/ff.c **** 	DWORD dw;
3681:../Sources/ff10b/src/ff.c **** 	DEF_NAMEBUF;
3682:../Sources/ff10b/src/ff.c **** 
3683:../Sources/ff10b/src/ff.c **** 
3684:../Sources/ff10b/src/ff.c **** 	/* Get logical drive number of the source object */
3685:../Sources/ff10b/src/ff.c **** 	res = find_volume(&djo.fs, &path_old, 1);
 8106              		.loc 1 3685 0
 8107 357e 07F14802 		add	r2, r7, #72
 8108 3582 07F10403 		add	r3, r7, #4
 8109 3586 1046     		mov	r0, r2
 8110 3588 1946     		mov	r1, r3
 8111 358a 4FF00102 		mov	r2, #1
 8112 358e FEF765F8 		bl	find_volume
 8113 3592 0346     		mov	r3, r0
 8114 3594 87F86F30 		strb	r3, [r7, #111]
3686:../Sources/ff10b/src/ff.c **** 	if (res == FR_OK) {
 8115              		.loc 1 3686 0
 8116 3598 97F86F30 		ldrb	r3, [r7, #111]	@ zero_extendqisi2
 8117 359c 002B     		cmp	r3, #0
 8118 359e 40F0DE80 		bne	.L491
3687:../Sources/ff10b/src/ff.c **** 		djn.fs = djo.fs;
 8119              		.loc 1 3687 0
 8120 35a2 BB6C     		ldr	r3, [r7, #72]
 8121 35a4 FB62     		str	r3, [r7, #44]
3688:../Sources/ff10b/src/ff.c **** 		INIT_BUF(djo);
 8122              		.loc 1 3688 0
 8123 35a6 07F10803 		add	r3, r7, #8
 8124 35aa 3B66     		str	r3, [r7, #96]
3689:../Sources/ff10b/src/ff.c **** 		res = follow_path(&djo, path_old);		/* Check old object */
 8125              		.loc 1 3689 0
 8126 35ac 7B68     		ldr	r3, [r7, #4]
 8127 35ae 07F14802 		add	r2, r7, #72
 8128 35b2 1046     		mov	r0, r2
 8129 35b4 1946     		mov	r1, r3
 8130 35b6 FDF723FF 		bl	follow_path
 8131 35ba 0346     		mov	r3, r0
 8132 35bc 87F86F30 		strb	r3, [r7, #111]
3690:../Sources/ff10b/src/ff.c **** 		if (_FS_RPATH && res == FR_OK && (djo.fn[NS] & NS_DOT))
3691:../Sources/ff10b/src/ff.c **** 			res = FR_INVALID_NAME;
3692:../Sources/ff10b/src/ff.c **** #if _FS_LOCK
3693:../Sources/ff10b/src/ff.c **** 		if (res == FR_OK) res = chk_lock(&djo, 2);
3694:../Sources/ff10b/src/ff.c **** #endif
3695:../Sources/ff10b/src/ff.c **** 		if (res == FR_OK) {						/* Old object is found */
 8133              		.loc 1 3695 0
 8134 35c0 97F86F30 		ldrb	r3, [r7, #111]	@ zero_extendqisi2
 8135 35c4 002B     		cmp	r3, #0
 8136 35c6 40F0CA80 		bne	.L491
3696:../Sources/ff10b/src/ff.c **** 			if (!djo.dir) {						/* Is root dir? */
 8137              		.loc 1 3696 0
 8138 35ca FB6D     		ldr	r3, [r7, #92]
 8139 35cc 002B     		cmp	r3, #0
 8140 35ce 04D1     		bne	.L492
3697:../Sources/ff10b/src/ff.c **** 				res = FR_NO_FILE;
 8141              		.loc 1 3697 0
 8142 35d0 4FF00403 		mov	r3, #4
 8143 35d4 87F86F30 		strb	r3, [r7, #111]
 8144 35d8 C1E0     		b	.L491
 8145              	.L492:
3698:../Sources/ff10b/src/ff.c **** 			} else {
3699:../Sources/ff10b/src/ff.c **** 				mem_cpy(buf, djo.dir+DIR_Attr, 21);		/* Save the object information except name */
 8146              		.loc 1 3699 0
 8147 35da FB6D     		ldr	r3, [r7, #92]
 8148 35dc 03F10B03 		add	r3, r3, #11
 8149 35e0 07F11402 		add	r2, r7, #20
 8150 35e4 1046     		mov	r0, r2
 8151 35e6 1946     		mov	r1, r3
 8152 35e8 4FF01502 		mov	r2, #21
 8153 35ec FCF708FD 		bl	mem_cpy
3700:../Sources/ff10b/src/ff.c **** 				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 8154              		.loc 1 3700 0
 8155 35f0 07F12C02 		add	r2, r7, #44
 8156 35f4 07F14803 		add	r3, r7, #72
 8157 35f8 1046     		mov	r0, r2
 8158 35fa 1946     		mov	r1, r3
 8159 35fc 4FF01C02 		mov	r2, #28
 8160 3600 FCF7FEFC 		bl	mem_cpy
3701:../Sources/ff10b/src/ff.c **** 				if (get_ldnumber(&path_new) >= 0)		/* Snip drive number off and ignore it */
 8161              		.loc 1 3701 0
 8162 3604 3B46     		mov	r3, r7
 8163 3606 1846     		mov	r0, r3
 8164 3608 FDF76AFF 		bl	get_ldnumber
 8165 360c 0346     		mov	r3, r0
 8166 360e 002B     		cmp	r3, #0
 8167 3610 0ADB     		blt	.L493
3702:../Sources/ff10b/src/ff.c **** 					res = follow_path(&djn, path_new);	/* and check if new object is exist */
 8168              		.loc 1 3702 0
 8169 3612 3B68     		ldr	r3, [r7, #0]
 8170 3614 07F12C02 		add	r2, r7, #44
 8171 3618 1046     		mov	r0, r2
 8172 361a 1946     		mov	r1, r3
 8173 361c FDF7F0FE 		bl	follow_path
 8174 3620 0346     		mov	r3, r0
 8175 3622 87F86F30 		strb	r3, [r7, #111]
 8176 3626 03E0     		b	.L494
 8177              	.L493:
3703:../Sources/ff10b/src/ff.c **** 				else
3704:../Sources/ff10b/src/ff.c **** 					res = FR_INVALID_DRIVE;
 8178              		.loc 1 3704 0
 8179 3628 4FF00B03 		mov	r3, #11
 8180 362c 87F86F30 		strb	r3, [r7, #111]
 8181              	.L494:
3705:../Sources/ff10b/src/ff.c **** 				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
 8182              		.loc 1 3705 0
 8183 3630 97F86F30 		ldrb	r3, [r7, #111]	@ zero_extendqisi2
 8184 3634 002B     		cmp	r3, #0
 8185 3636 03D1     		bne	.L495
 8186              		.loc 1 3705 0 is_stmt 0 discriminator 1
 8187 3638 4FF00803 		mov	r3, #8
 8188 363c 87F86F30 		strb	r3, [r7, #111]
 8189              	.L495:
3706:../Sources/ff10b/src/ff.c **** 				if (res == FR_NO_FILE) { 				/* Is it a valid path and no name collision? */
 8190              		.loc 1 3706 0 is_stmt 1
 8191 3640 97F86F30 		ldrb	r3, [r7, #111]	@ zero_extendqisi2
 8192 3644 042B     		cmp	r3, #4
 8193 3646 40F08A80 		bne	.L491
3707:../Sources/ff10b/src/ff.c **** /* Start critical section that any interruption can cause a cross-link */
3708:../Sources/ff10b/src/ff.c **** 					res = dir_register(&djn);			/* Register the new entry */
 8194              		.loc 1 3708 0
 8195 364a 07F12C03 		add	r3, r7, #44
 8196 364e 1846     		mov	r0, r3
 8197 3650 FDF7A4FC 		bl	dir_register
 8198 3654 0346     		mov	r3, r0
 8199 3656 87F86F30 		strb	r3, [r7, #111]
3709:../Sources/ff10b/src/ff.c **** 					if (res == FR_OK) {
 8200              		.loc 1 3709 0
 8201 365a 97F86F30 		ldrb	r3, [r7, #111]	@ zero_extendqisi2
 8202 365e 002B     		cmp	r3, #0
 8203 3660 7DD1     		bne	.L491
3710:../Sources/ff10b/src/ff.c **** 						dir = djn.dir;					/* Copy object information except name */
 8204              		.loc 1 3710 0
 8205 3662 3B6C     		ldr	r3, [r7, #64]
 8206 3664 BB66     		str	r3, [r7, #104]
3711:../Sources/ff10b/src/ff.c **** 						mem_cpy(dir+13, buf+2, 19);
 8207              		.loc 1 3711 0
 8208 3666 BB6E     		ldr	r3, [r7, #104]
 8209 3668 03F10D02 		add	r2, r3, #13
 8210 366c 07F11403 		add	r3, r7, #20
 8211 3670 03F10203 		add	r3, r3, #2
 8212 3674 1046     		mov	r0, r2
 8213 3676 1946     		mov	r1, r3
 8214 3678 4FF01302 		mov	r2, #19
 8215 367c FCF7C0FC 		bl	mem_cpy
3712:../Sources/ff10b/src/ff.c **** 						dir[DIR_Attr] = buf[0] | AM_ARC;
 8216              		.loc 1 3712 0
 8217 3680 BB6E     		ldr	r3, [r7, #104]
 8218 3682 03F10B03 		add	r3, r3, #11
 8219 3686 3A7D     		ldrb	r2, [r7, #20]	@ zero_extendqisi2
 8220 3688 42F02002 		orr	r2, r2, #32
 8221 368c D2B2     		uxtb	r2, r2
 8222 368e 1A70     		strb	r2, [r3, #0]
3713:../Sources/ff10b/src/ff.c **** 						djo.fs->wflag = 1;
 8223              		.loc 1 3713 0
 8224 3690 BB6C     		ldr	r3, [r7, #72]
 8225 3692 4FF00102 		mov	r2, #1
 8226 3696 1A71     		strb	r2, [r3, #4]
3714:../Sources/ff10b/src/ff.c **** 						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the direct
 8227              		.loc 1 3714 0
 8228 3698 3A6D     		ldr	r2, [r7, #80]
 8229 369a 7B6B     		ldr	r3, [r7, #52]
 8230 369c 9A42     		cmp	r2, r3
 8231 369e 47D0     		beq	.L496
 8232              		.loc 1 3714 0 is_stmt 0 discriminator 1
 8233 36a0 BB6E     		ldr	r3, [r7, #104]
 8234 36a2 03F10B03 		add	r3, r3, #11
 8235 36a6 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 8236 36a8 03F01003 		and	r3, r3, #16
 8237 36ac 002B     		cmp	r3, #0
 8238 36ae 3FD0     		beq	.L496
3715:../Sources/ff10b/src/ff.c **** 							dw = clust2sect(djo.fs, ld_clust(djo.fs, dir));
 8239              		.loc 1 3715 0 is_stmt 1
 8240 36b0 BC6C     		ldr	r4, [r7, #72]
 8241 36b2 BB6C     		ldr	r3, [r7, #72]
 8242 36b4 1846     		mov	r0, r3
 8243 36b6 B96E     		ldr	r1, [r7, #104]
 8244 36b8 FDF760FB 		bl	ld_clust
 8245 36bc 0346     		mov	r3, r0
 8246 36be 2046     		mov	r0, r4
 8247 36c0 1946     		mov	r1, r3
 8248 36c2 FFF7FEFF 		bl	clust2sect
 8249 36c6 7866     		str	r0, [r7, #100]
3716:../Sources/ff10b/src/ff.c **** 							if (!dw) {
 8250              		.loc 1 3716 0
 8251 36c8 7B6E     		ldr	r3, [r7, #100]
 8252 36ca 002B     		cmp	r3, #0
 8253 36cc 04D1     		bne	.L497
3717:../Sources/ff10b/src/ff.c **** 								res = FR_INT_ERR;
 8254              		.loc 1 3717 0
 8255 36ce 4FF00203 		mov	r3, #2
 8256 36d2 87F86F30 		strb	r3, [r7, #111]
 8257 36d6 2BE0     		b	.L496
 8258              	.L497:
3718:../Sources/ff10b/src/ff.c **** 							} else {
3719:../Sources/ff10b/src/ff.c **** 								res = move_window(djo.fs, dw);
 8259              		.loc 1 3719 0
 8260 36d8 BB6C     		ldr	r3, [r7, #72]
 8261 36da 1846     		mov	r0, r3
 8262 36dc 796E     		ldr	r1, [r7, #100]
 8263 36de FCF779FD 		bl	move_window
 8264 36e2 0346     		mov	r3, r0
 8265 36e4 87F86F30 		strb	r3, [r7, #111]
3720:../Sources/ff10b/src/ff.c **** 								dir = djo.fs->win+SZ_DIR;	/* .. entry */
 8266              		.loc 1 3720 0
 8267 36e8 BB6C     		ldr	r3, [r7, #72]
 8268 36ea 03F15003 		add	r3, r3, #80
 8269 36ee BB66     		str	r3, [r7, #104]
3721:../Sources/ff10b/src/ff.c **** 								if (res == FR_OK && dir[1] == '.') {
 8270              		.loc 1 3721 0
 8271 36f0 97F86F30 		ldrb	r3, [r7, #111]	@ zero_extendqisi2
 8272 36f4 002B     		cmp	r3, #0
 8273 36f6 1BD1     		bne	.L496
 8274              		.loc 1 3721 0 is_stmt 0 discriminator 1
 8275 36f8 BB6E     		ldr	r3, [r7, #104]
 8276 36fa 03F10103 		add	r3, r3, #1
 8277 36fe 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 8278 3700 2E2B     		cmp	r3, #46
 8279 3702 15D1     		bne	.L496
3722:../Sources/ff10b/src/ff.c **** 									dw = (djo.fs->fs_type == FS_FAT32 && djn.sclust == djo.fs->dirbase) ? 0 : djn.sclust;
 8280              		.loc 1 3722 0 is_stmt 1
 8281 3704 BB6C     		ldr	r3, [r7, #72]
 8282 3706 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 8283 3708 032B     		cmp	r3, #3
 8284 370a 04D1     		bne	.L498
 8285              		.loc 1 3722 0 is_stmt 0 discriminator 2
 8286 370c 7A6B     		ldr	r2, [r7, #52]
 8287 370e BB6C     		ldr	r3, [r7, #72]
 8288 3710 5B6A     		ldr	r3, [r3, #36]
 8289 3712 9A42     		cmp	r2, r3
 8290 3714 01D0     		beq	.L499
 8291              	.L498:
 8292              		.loc 1 3722 0 discriminator 1
 8293 3716 7B6B     		ldr	r3, [r7, #52]
 8294 3718 01E0     		b	.L500
 8295              	.L499:
 8296 371a 4FF00003 		mov	r3, #0
 8297              	.L500:
 8298              		.loc 1 3722 0 discriminator 3
 8299 371e 7B66     		str	r3, [r7, #100]
3723:../Sources/ff10b/src/ff.c **** 									st_clust(dir, dw);
 8300              		.loc 1 3723 0 is_stmt 1 discriminator 3
 8301 3720 B86E     		ldr	r0, [r7, #104]
 8302 3722 796E     		ldr	r1, [r7, #100]
 8303 3724 FDF75CFB 		bl	st_clust
3724:../Sources/ff10b/src/ff.c **** 									djo.fs->wflag = 1;
 8304              		.loc 1 3724 0 discriminator 3
 8305 3728 BB6C     		ldr	r3, [r7, #72]
 8306 372a 4FF00102 		mov	r2, #1
 8307 372e 1A71     		strb	r2, [r3, #4]
 8308              	.L496:
3725:../Sources/ff10b/src/ff.c **** 								}
3726:../Sources/ff10b/src/ff.c **** 							}
3727:../Sources/ff10b/src/ff.c **** 						}
3728:../Sources/ff10b/src/ff.c **** 						if (res == FR_OK) {
 8309              		.loc 1 3728 0
 8310 3730 97F86F30 		ldrb	r3, [r7, #111]	@ zero_extendqisi2
 8311 3734 002B     		cmp	r3, #0
 8312 3736 12D1     		bne	.L491
3729:../Sources/ff10b/src/ff.c **** 							res = dir_remove(&djo);		/* Remove old entry */
 8313              		.loc 1 3729 0
 8314 3738 07F14803 		add	r3, r7, #72
 8315 373c 1846     		mov	r0, r3
 8316 373e FDF767FC 		bl	dir_remove
 8317 3742 0346     		mov	r3, r0
 8318 3744 87F86F30 		strb	r3, [r7, #111]
3730:../Sources/ff10b/src/ff.c **** 							if (res == FR_OK)
 8319              		.loc 1 3730 0
 8320 3748 97F86F30 		ldrb	r3, [r7, #111]	@ zero_extendqisi2
 8321 374c 002B     		cmp	r3, #0
 8322 374e 06D1     		bne	.L491
3731:../Sources/ff10b/src/ff.c **** 								res = sync_fs(djo.fs);
 8323              		.loc 1 3731 0
 8324 3750 BB6C     		ldr	r3, [r7, #72]
 8325 3752 1846     		mov	r0, r3
 8326 3754 FCF76EFD 		bl	sync_fs
 8327 3758 0346     		mov	r3, r0
 8328 375a 87F86F30 		strb	r3, [r7, #111]
 8329              	.L491:
3732:../Sources/ff10b/src/ff.c **** 						}
3733:../Sources/ff10b/src/ff.c **** 					}
3734:../Sources/ff10b/src/ff.c **** /* End critical section */
3735:../Sources/ff10b/src/ff.c **** 				}
3736:../Sources/ff10b/src/ff.c **** 			}
3737:../Sources/ff10b/src/ff.c **** 		}
3738:../Sources/ff10b/src/ff.c **** 		FREE_BUF();
3739:../Sources/ff10b/src/ff.c **** 	}
3740:../Sources/ff10b/src/ff.c **** 
3741:../Sources/ff10b/src/ff.c **** 	LEAVE_FF(djo.fs, res);
 8330              		.loc 1 3741 0
 8331 375e 97F86F30 		ldrb	r3, [r7, #111]	@ zero_extendqisi2
3742:../Sources/ff10b/src/ff.c **** }
 8332              		.loc 1 3742 0
 8333 3762 1846     		mov	r0, r3
 8334 3764 07F17407 		add	r7, r7, #116
 8335 3768 BD46     		mov	sp, r7
 8336 376a 90BD     		pop	{r4, r7, pc}
 8337              		.cfi_endproc
 8338              	.LFE46:
 8340              		.align	2
 8341              		.global	f_gets
 8342              		.thumb
 8343              		.thumb_func
 8345              	f_gets:
 8346              	.LFB47:
3743:../Sources/ff10b/src/ff.c **** 
3744:../Sources/ff10b/src/ff.c **** #endif /* !_FS_READONLY */
3745:../Sources/ff10b/src/ff.c **** #endif /* _FS_MINIMIZE == 0 */
3746:../Sources/ff10b/src/ff.c **** #endif /* _FS_MINIMIZE <= 1 */
3747:../Sources/ff10b/src/ff.c **** #endif /* _FS_MINIMIZE <= 2 */
3748:../Sources/ff10b/src/ff.c **** 
3749:../Sources/ff10b/src/ff.c **** 
3750:../Sources/ff10b/src/ff.c **** 
3751:../Sources/ff10b/src/ff.c **** #if _USE_LABEL
3752:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
3753:../Sources/ff10b/src/ff.c **** /* Get volume label                                                      */
3754:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
3755:../Sources/ff10b/src/ff.c **** 
3756:../Sources/ff10b/src/ff.c **** FRESULT f_getlabel (
3757:../Sources/ff10b/src/ff.c **** 	const TCHAR* path,	/* Path name of the logical drive number */
3758:../Sources/ff10b/src/ff.c **** 	TCHAR* label,		/* Pointer to a buffer to return the volume label */
3759:../Sources/ff10b/src/ff.c **** 	DWORD* vsn			/* Pointer to a variable to return the volume serial number */
3760:../Sources/ff10b/src/ff.c **** )
3761:../Sources/ff10b/src/ff.c **** {
3762:../Sources/ff10b/src/ff.c **** 	FRESULT res;
3763:../Sources/ff10b/src/ff.c **** 	DIR dj;
3764:../Sources/ff10b/src/ff.c **** 	UINT i, j;
3765:../Sources/ff10b/src/ff.c **** 
3766:../Sources/ff10b/src/ff.c **** 
3767:../Sources/ff10b/src/ff.c **** 	/* Get logical drive number */
3768:../Sources/ff10b/src/ff.c **** 	res = find_volume(&dj.fs, &path, 0);
3769:../Sources/ff10b/src/ff.c **** 
3770:../Sources/ff10b/src/ff.c **** 	/* Get volume label */
3771:../Sources/ff10b/src/ff.c **** 	if (res == FR_OK && label) {
3772:../Sources/ff10b/src/ff.c **** 		dj.sclust = 0;					/* Open root directory */
3773:../Sources/ff10b/src/ff.c **** 		res = dir_sdi(&dj, 0);
3774:../Sources/ff10b/src/ff.c **** 		if (res == FR_OK) {
3775:../Sources/ff10b/src/ff.c **** 			res = dir_read(&dj, 1);		/* Get an entry with AM_VOL */
3776:../Sources/ff10b/src/ff.c **** 			if (res == FR_OK) {			/* A volume label is exist */
3777:../Sources/ff10b/src/ff.c **** #if _USE_LFN && _LFN_UNICODE
3778:../Sources/ff10b/src/ff.c **** 				WCHAR w;
3779:../Sources/ff10b/src/ff.c **** 				i = j = 0;
3780:../Sources/ff10b/src/ff.c **** 				do {
3781:../Sources/ff10b/src/ff.c **** 					w = (i < 11) ? dj.dir[i++] : ' ';
3782:../Sources/ff10b/src/ff.c **** 					if (IsDBCS1(w) && i < 11 && IsDBCS2(dj.dir[i]))
3783:../Sources/ff10b/src/ff.c **** 						w = w << 8 | dj.dir[i++];
3784:../Sources/ff10b/src/ff.c **** 					label[j++] = ff_convert(w, 1);	/* OEM -> Unicode */
3785:../Sources/ff10b/src/ff.c **** 				} while (j < 11);
3786:../Sources/ff10b/src/ff.c **** #else
3787:../Sources/ff10b/src/ff.c **** 				mem_cpy(label, dj.dir, 11);
3788:../Sources/ff10b/src/ff.c **** #endif
3789:../Sources/ff10b/src/ff.c **** 				j = 11;
3790:../Sources/ff10b/src/ff.c **** 				do {
3791:../Sources/ff10b/src/ff.c **** 					label[j] = 0;
3792:../Sources/ff10b/src/ff.c **** 					if (!j) break;
3793:../Sources/ff10b/src/ff.c **** 				} while (label[--j] == ' ');
3794:../Sources/ff10b/src/ff.c **** 			}
3795:../Sources/ff10b/src/ff.c **** 			if (res == FR_NO_FILE) {	/* No label, return nul string */
3796:../Sources/ff10b/src/ff.c **** 				label[0] = 0;
3797:../Sources/ff10b/src/ff.c **** 				res = FR_OK;
3798:../Sources/ff10b/src/ff.c **** 			}
3799:../Sources/ff10b/src/ff.c **** 		}
3800:../Sources/ff10b/src/ff.c **** 	}
3801:../Sources/ff10b/src/ff.c **** 
3802:../Sources/ff10b/src/ff.c **** 	/* Get volume serial number */
3803:../Sources/ff10b/src/ff.c **** 	if (res == FR_OK && vsn) {
3804:../Sources/ff10b/src/ff.c **** 		res = move_window(dj.fs, dj.fs->volbase);
3805:../Sources/ff10b/src/ff.c **** 		if (res == FR_OK) {
3806:../Sources/ff10b/src/ff.c **** 			i = dj.fs->fs_type == FS_FAT32 ? BS_VolID32 : BS_VolID;
3807:../Sources/ff10b/src/ff.c **** 			*vsn = LD_DWORD(&dj.fs->win[i]);
3808:../Sources/ff10b/src/ff.c **** 		}
3809:../Sources/ff10b/src/ff.c **** 	}
3810:../Sources/ff10b/src/ff.c **** 
3811:../Sources/ff10b/src/ff.c **** 	LEAVE_FF(dj.fs, res);
3812:../Sources/ff10b/src/ff.c **** }
3813:../Sources/ff10b/src/ff.c **** 
3814:../Sources/ff10b/src/ff.c **** 
3815:../Sources/ff10b/src/ff.c **** 
3816:../Sources/ff10b/src/ff.c **** #if !_FS_READONLY
3817:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
3818:../Sources/ff10b/src/ff.c **** /* Set volume label                                                      */
3819:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
3820:../Sources/ff10b/src/ff.c **** 
3821:../Sources/ff10b/src/ff.c **** FRESULT f_setlabel (
3822:../Sources/ff10b/src/ff.c **** 	const TCHAR* label	/* Pointer to the volume label to set */
3823:../Sources/ff10b/src/ff.c **** )
3824:../Sources/ff10b/src/ff.c **** {
3825:../Sources/ff10b/src/ff.c **** 	FRESULT res;
3826:../Sources/ff10b/src/ff.c **** 	DIR dj;
3827:../Sources/ff10b/src/ff.c **** 	BYTE vn[11];
3828:../Sources/ff10b/src/ff.c **** 	UINT i, j, sl;
3829:../Sources/ff10b/src/ff.c **** 	WCHAR w;
3830:../Sources/ff10b/src/ff.c **** 	DWORD tm;
3831:../Sources/ff10b/src/ff.c **** 
3832:../Sources/ff10b/src/ff.c **** 
3833:../Sources/ff10b/src/ff.c **** 	/* Get logical drive number */
3834:../Sources/ff10b/src/ff.c **** 	res = find_volume(&dj.fs, &label, 1);
3835:../Sources/ff10b/src/ff.c **** 	if (res) LEAVE_FF(dj.fs, res);
3836:../Sources/ff10b/src/ff.c **** 
3837:../Sources/ff10b/src/ff.c **** 	/* Create a volume label in directory form */
3838:../Sources/ff10b/src/ff.c **** 	vn[0] = 0;
3839:../Sources/ff10b/src/ff.c **** 	for (sl = 0; label[sl]; sl++) ;				/* Get name length */
3840:../Sources/ff10b/src/ff.c **** 	for ( ; sl && label[sl-1] == ' '; sl--) ;	/* Remove trailing spaces */
3841:../Sources/ff10b/src/ff.c **** 	if (sl) {	/* Create volume label in directory form */
3842:../Sources/ff10b/src/ff.c **** 		i = j = 0;
3843:../Sources/ff10b/src/ff.c **** 		do {
3844:../Sources/ff10b/src/ff.c **** #if _USE_LFN && _LFN_UNICODE
3845:../Sources/ff10b/src/ff.c **** 			w = ff_convert(ff_wtoupper(label[i++]), 0);
3846:../Sources/ff10b/src/ff.c **** #else
3847:../Sources/ff10b/src/ff.c **** 			w = (BYTE)label[i++];
3848:../Sources/ff10b/src/ff.c **** 			if (IsDBCS1(w))
3849:../Sources/ff10b/src/ff.c **** 				w = (j < 10 && i < sl && IsDBCS2(label[i])) ? w << 8 | (BYTE)label[i++] : 0;
3850:../Sources/ff10b/src/ff.c **** #if _USE_LFN
3851:../Sources/ff10b/src/ff.c **** 			w = ff_convert(ff_wtoupper(ff_convert(w, 1)), 0);
3852:../Sources/ff10b/src/ff.c **** #else
3853:../Sources/ff10b/src/ff.c **** 			if (IsLower(w)) w -= 0x20;			/* To upper ASCII characters */
3854:../Sources/ff10b/src/ff.c **** #ifdef _EXCVT
3855:../Sources/ff10b/src/ff.c **** 			if (w >= 0x80) w = ExCvt[w - 0x80];	/* To upper extended characters (SBCS cfg) */
3856:../Sources/ff10b/src/ff.c **** #else
3857:../Sources/ff10b/src/ff.c **** 			if (!_DF1S && w >= 0x80) w = 0;		/* Reject extended characters (ASCII cfg) */
3858:../Sources/ff10b/src/ff.c **** #endif
3859:../Sources/ff10b/src/ff.c **** #endif
3860:../Sources/ff10b/src/ff.c **** #endif
3861:../Sources/ff10b/src/ff.c **** 			if (!w || chk_chr("\"*+,.:;<=>\?[]|\x7F", w) || j >= (UINT)((w >= 0x100) ? 10 : 11)) /* Reject i
3862:../Sources/ff10b/src/ff.c **** 				LEAVE_FF(dj.fs, FR_INVALID_NAME);
3863:../Sources/ff10b/src/ff.c **** 			if (w >= 0x100) vn[j++] = (BYTE)(w >> 8);
3864:../Sources/ff10b/src/ff.c **** 			vn[j++] = (BYTE)w;
3865:../Sources/ff10b/src/ff.c **** 		} while (i < sl);
3866:../Sources/ff10b/src/ff.c **** 		while (j < 11) vn[j++] = ' ';
3867:../Sources/ff10b/src/ff.c **** 	}
3868:../Sources/ff10b/src/ff.c **** 
3869:../Sources/ff10b/src/ff.c **** 	/* Set volume label */
3870:../Sources/ff10b/src/ff.c **** 	dj.sclust = 0;					/* Open root directory */
3871:../Sources/ff10b/src/ff.c **** 	res = dir_sdi(&dj, 0);
3872:../Sources/ff10b/src/ff.c **** 	if (res == FR_OK) {
3873:../Sources/ff10b/src/ff.c **** 		res = dir_read(&dj, 1);		/* Get an entry with AM_VOL */
3874:../Sources/ff10b/src/ff.c **** 		if (res == FR_OK) {			/* A volume label is found */
3875:../Sources/ff10b/src/ff.c **** 			if (vn[0]) {
3876:../Sources/ff10b/src/ff.c **** 				mem_cpy(dj.dir, vn, 11);	/* Change the volume label name */
3877:../Sources/ff10b/src/ff.c **** 				tm = get_fattime();
3878:../Sources/ff10b/src/ff.c **** 				ST_DWORD(dj.dir+DIR_WrtTime, tm);
3879:../Sources/ff10b/src/ff.c **** 			} else {
3880:../Sources/ff10b/src/ff.c **** 				dj.dir[0] = DDE;			/* Remove the volume label */
3881:../Sources/ff10b/src/ff.c **** 			}
3882:../Sources/ff10b/src/ff.c **** 			dj.fs->wflag = 1;
3883:../Sources/ff10b/src/ff.c **** 			res = sync_fs(dj.fs);
3884:../Sources/ff10b/src/ff.c **** 		} else {					/* No volume label is found or error */
3885:../Sources/ff10b/src/ff.c **** 			if (res == FR_NO_FILE) {
3886:../Sources/ff10b/src/ff.c **** 				res = FR_OK;
3887:../Sources/ff10b/src/ff.c **** 				if (vn[0]) {				/* Create volume label as new */
3888:../Sources/ff10b/src/ff.c **** 					res = dir_alloc(&dj, 1);	/* Allocate an entry for volume label */
3889:../Sources/ff10b/src/ff.c **** 					if (res == FR_OK) {
3890:../Sources/ff10b/src/ff.c **** 						mem_set(dj.dir, 0, SZ_DIR);	/* Set volume label */
3891:../Sources/ff10b/src/ff.c **** 						mem_cpy(dj.dir, vn, 11);
3892:../Sources/ff10b/src/ff.c **** 						dj.dir[DIR_Attr] = AM_VOL;
3893:../Sources/ff10b/src/ff.c **** 						tm = get_fattime();
3894:../Sources/ff10b/src/ff.c **** 						ST_DWORD(dj.dir+DIR_WrtTime, tm);
3895:../Sources/ff10b/src/ff.c **** 						dj.fs->wflag = 1;
3896:../Sources/ff10b/src/ff.c **** 						res = sync_fs(dj.fs);
3897:../Sources/ff10b/src/ff.c **** 					}
3898:../Sources/ff10b/src/ff.c **** 				}
3899:../Sources/ff10b/src/ff.c **** 			}
3900:../Sources/ff10b/src/ff.c **** 		}
3901:../Sources/ff10b/src/ff.c **** 	}
3902:../Sources/ff10b/src/ff.c **** 
3903:../Sources/ff10b/src/ff.c **** 	LEAVE_FF(dj.fs, res);
3904:../Sources/ff10b/src/ff.c **** }
3905:../Sources/ff10b/src/ff.c **** 
3906:../Sources/ff10b/src/ff.c **** #endif /* !_FS_READONLY */
3907:../Sources/ff10b/src/ff.c **** #endif /* _USE_LABEL */
3908:../Sources/ff10b/src/ff.c **** 
3909:../Sources/ff10b/src/ff.c **** 
3910:../Sources/ff10b/src/ff.c **** 
3911:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
3912:../Sources/ff10b/src/ff.c **** /* Forward data to the stream directly (available on only tiny cfg)      */
3913:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
3914:../Sources/ff10b/src/ff.c **** #if _USE_FORWARD && _FS_TINY
3915:../Sources/ff10b/src/ff.c **** 
3916:../Sources/ff10b/src/ff.c **** FRESULT f_forward (
3917:../Sources/ff10b/src/ff.c **** 	FIL* fp, 						/* Pointer to the file object */
3918:../Sources/ff10b/src/ff.c **** 	UINT (*func)(const BYTE*,UINT),	/* Pointer to the streaming function */
3919:../Sources/ff10b/src/ff.c **** 	UINT btf,						/* Number of bytes to forward */
3920:../Sources/ff10b/src/ff.c **** 	UINT* bf						/* Pointer to number of bytes forwarded */
3921:../Sources/ff10b/src/ff.c **** )
3922:../Sources/ff10b/src/ff.c **** {
3923:../Sources/ff10b/src/ff.c **** 	FRESULT res;
3924:../Sources/ff10b/src/ff.c **** 	DWORD remain, clst, sect;
3925:../Sources/ff10b/src/ff.c **** 	UINT rcnt;
3926:../Sources/ff10b/src/ff.c **** 	BYTE csect;
3927:../Sources/ff10b/src/ff.c **** 
3928:../Sources/ff10b/src/ff.c **** 
3929:../Sources/ff10b/src/ff.c **** 	*bf = 0;	/* Clear transfer byte counter */
3930:../Sources/ff10b/src/ff.c **** 
3931:../Sources/ff10b/src/ff.c **** 	res = validate(fp);								/* Check validity of the object */
3932:../Sources/ff10b/src/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
3933:../Sources/ff10b/src/ff.c **** 	if (fp->err)									/* Check error */
3934:../Sources/ff10b/src/ff.c **** 		LEAVE_FF(fp->fs, (FRESULT)fp->err);
3935:../Sources/ff10b/src/ff.c **** 	if (!(fp->flag & FA_READ))						/* Check access mode */
3936:../Sources/ff10b/src/ff.c **** 		LEAVE_FF(fp->fs, FR_DENIED);
3937:../Sources/ff10b/src/ff.c **** 
3938:../Sources/ff10b/src/ff.c **** 	remain = fp->fsize - fp->fptr;
3939:../Sources/ff10b/src/ff.c **** 	if (btf > remain) btf = (UINT)remain;			/* Truncate btf by remaining bytes */
3940:../Sources/ff10b/src/ff.c **** 
3941:../Sources/ff10b/src/ff.c **** 	for ( ;  btf && (*func)(0, 0);					/* Repeat until all data transferred or stream becomes busy */
3942:../Sources/ff10b/src/ff.c **** 		fp->fptr += rcnt, *bf += rcnt, btf -= rcnt) {
3943:../Sources/ff10b/src/ff.c **** 		csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
3944:../Sources/ff10b/src/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
3945:../Sources/ff10b/src/ff.c **** 			if (!csect) {							/* On the cluster boundary? */
3946:../Sources/ff10b/src/ff.c **** 				clst = (fp->fptr == 0) ?			/* On the top of the file? */
3947:../Sources/ff10b/src/ff.c **** 					fp->sclust : get_fat(fp->fs, fp->clust);
3948:../Sources/ff10b/src/ff.c **** 				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
3949:../Sources/ff10b/src/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
3950:../Sources/ff10b/src/ff.c **** 				fp->clust = clst;					/* Update current cluster */
3951:../Sources/ff10b/src/ff.c **** 			}
3952:../Sources/ff10b/src/ff.c **** 		}
3953:../Sources/ff10b/src/ff.c **** 		sect = clust2sect(fp->fs, fp->clust);		/* Get current data sector */
3954:../Sources/ff10b/src/ff.c **** 		if (!sect) ABORT(fp->fs, FR_INT_ERR);
3955:../Sources/ff10b/src/ff.c **** 		sect += csect;
3956:../Sources/ff10b/src/ff.c **** 		if (move_window(fp->fs, sect))				/* Move sector window */
3957:../Sources/ff10b/src/ff.c **** 			ABORT(fp->fs, FR_DISK_ERR);
3958:../Sources/ff10b/src/ff.c **** 		fp->dsect = sect;
3959:../Sources/ff10b/src/ff.c **** 		rcnt = SS(fp->fs) - (WORD)(fp->fptr % SS(fp->fs));	/* Forward data from sector window */
3960:../Sources/ff10b/src/ff.c **** 		if (rcnt > btf) rcnt = btf;
3961:../Sources/ff10b/src/ff.c **** 		rcnt = (*func)(&fp->fs->win[(WORD)fp->fptr % SS(fp->fs)], rcnt);
3962:../Sources/ff10b/src/ff.c **** 		if (!rcnt) ABORT(fp->fs, FR_INT_ERR);
3963:../Sources/ff10b/src/ff.c **** 	}
3964:../Sources/ff10b/src/ff.c **** 
3965:../Sources/ff10b/src/ff.c **** 	LEAVE_FF(fp->fs, FR_OK);
3966:../Sources/ff10b/src/ff.c **** }
3967:../Sources/ff10b/src/ff.c **** #endif /* _USE_FORWARD */
3968:../Sources/ff10b/src/ff.c **** 
3969:../Sources/ff10b/src/ff.c **** 
3970:../Sources/ff10b/src/ff.c **** 
3971:../Sources/ff10b/src/ff.c **** #if _USE_MKFS && !_FS_READONLY
3972:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
3973:../Sources/ff10b/src/ff.c **** /* Create File System on the Drive                                       */
3974:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
3975:../Sources/ff10b/src/ff.c **** #define N_ROOTDIR	512		/* Number of root directory entries for FAT12/16 */
3976:../Sources/ff10b/src/ff.c **** #define N_FATS		1		/* Number of FAT copies (1 or 2) */
3977:../Sources/ff10b/src/ff.c **** 
3978:../Sources/ff10b/src/ff.c **** 
3979:../Sources/ff10b/src/ff.c **** FRESULT f_mkfs (
3980:../Sources/ff10b/src/ff.c **** 	const TCHAR* path,	/* Logical drive number */
3981:../Sources/ff10b/src/ff.c **** 	BYTE sfd,			/* Partitioning rule 0:FDISK, 1:SFD */
3982:../Sources/ff10b/src/ff.c **** 	UINT au				/* Allocation unit [bytes] */
3983:../Sources/ff10b/src/ff.c **** )
3984:../Sources/ff10b/src/ff.c **** {
3985:../Sources/ff10b/src/ff.c **** 	static const WORD vst[] = { 1024,   512,  256,  128,   64,    32,   16,    8,    4,    2,   0};
3986:../Sources/ff10b/src/ff.c **** 	static const WORD cst[] = {32768, 16384, 8192, 4096, 2048, 16384, 8192, 4096, 2048, 1024, 512};
3987:../Sources/ff10b/src/ff.c **** 	int vol;
3988:../Sources/ff10b/src/ff.c **** 	BYTE fmt, md, sys, *tbl, pdrv, part;
3989:../Sources/ff10b/src/ff.c **** 	DWORD n_clst, vs, n, wsect;
3990:../Sources/ff10b/src/ff.c **** 	UINT i;
3991:../Sources/ff10b/src/ff.c **** 	DWORD b_vol, b_fat, b_dir, b_data;	/* LBA */
3992:../Sources/ff10b/src/ff.c **** 	DWORD n_vol, n_rsv, n_fat, n_dir;	/* Size */
3993:../Sources/ff10b/src/ff.c **** 	FATFS *fs;
3994:../Sources/ff10b/src/ff.c **** 	DSTATUS stat;
3995:../Sources/ff10b/src/ff.c **** 
3996:../Sources/ff10b/src/ff.c **** 
3997:../Sources/ff10b/src/ff.c **** 	/* Check mounted drive and clear work area */
3998:../Sources/ff10b/src/ff.c **** 	vol = get_ldnumber(&path);
3999:../Sources/ff10b/src/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
4000:../Sources/ff10b/src/ff.c **** 	if (sfd > 1) return FR_INVALID_PARAMETER;
4001:../Sources/ff10b/src/ff.c **** 	if (au & (au - 1)) return FR_INVALID_PARAMETER;
4002:../Sources/ff10b/src/ff.c **** 	fs = FatFs[vol];
4003:../Sources/ff10b/src/ff.c **** 	if (!fs) return FR_NOT_ENABLED;
4004:../Sources/ff10b/src/ff.c **** 	fs->fs_type = 0;
4005:../Sources/ff10b/src/ff.c **** 	pdrv = LD2PD(vol);	/* Physical drive */
4006:../Sources/ff10b/src/ff.c **** 	part = LD2PT(vol);	/* Partition (0:auto detect, 1-4:get from partition table)*/
4007:../Sources/ff10b/src/ff.c **** 
4008:../Sources/ff10b/src/ff.c **** 	/* Get disk statics */
4009:../Sources/ff10b/src/ff.c **** 	stat = disk_initialize(pdrv);
4010:../Sources/ff10b/src/ff.c **** 	if (stat & STA_NOINIT) return FR_NOT_READY;
4011:../Sources/ff10b/src/ff.c **** 	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
4012:../Sources/ff10b/src/ff.c **** #if _MAX_SS != _MIN_SS		/* Get disk sector size */
4013:../Sources/ff10b/src/ff.c **** 	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS || SS(fs) < _MIN_SS)
4014:../Sources/ff10b/src/ff.c **** 		return FR_DISK_ERR;
4015:../Sources/ff10b/src/ff.c **** #endif
4016:../Sources/ff10b/src/ff.c **** 	if (_MULTI_PARTITION && part) {
4017:../Sources/ff10b/src/ff.c **** 		/* Get partition information from partition table in the MBR */
4018:../Sources/ff10b/src/ff.c **** 		if (disk_read(pdrv, fs->win, 0, 1)) return FR_DISK_ERR;
4019:../Sources/ff10b/src/ff.c **** 		if (LD_WORD(fs->win+BS_55AA) != 0xAA55) return FR_MKFS_ABORTED;
4020:../Sources/ff10b/src/ff.c **** 		tbl = &fs->win[MBR_Table + (part - 1) * SZ_PTE];
4021:../Sources/ff10b/src/ff.c **** 		if (!tbl[4]) return FR_MKFS_ABORTED;	/* No partition? */
4022:../Sources/ff10b/src/ff.c **** 		b_vol = LD_DWORD(tbl+8);	/* Volume start sector */
4023:../Sources/ff10b/src/ff.c **** 		n_vol = LD_DWORD(tbl+12);	/* Volume size */
4024:../Sources/ff10b/src/ff.c **** 	} else {
4025:../Sources/ff10b/src/ff.c **** 		/* Create a partition in this function */
4026:../Sources/ff10b/src/ff.c **** 		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &n_vol) != RES_OK || n_vol < 128)
4027:../Sources/ff10b/src/ff.c **** 			return FR_DISK_ERR;
4028:../Sources/ff10b/src/ff.c **** 		b_vol = (sfd) ? 0 : 63;		/* Volume start sector */
4029:../Sources/ff10b/src/ff.c **** 		n_vol -= b_vol;				/* Volume size */
4030:../Sources/ff10b/src/ff.c **** 	}
4031:../Sources/ff10b/src/ff.c **** 
4032:../Sources/ff10b/src/ff.c **** 	if (!au) {				/* AU auto selection */
4033:../Sources/ff10b/src/ff.c **** 		vs = n_vol / (2000 / (SS(fs) / 512));
4034:../Sources/ff10b/src/ff.c **** 		for (i = 0; vs < vst[i]; i++) ;
4035:../Sources/ff10b/src/ff.c **** 		au = cst[i];
4036:../Sources/ff10b/src/ff.c **** 	}
4037:../Sources/ff10b/src/ff.c **** 	au /= SS(fs);		/* Number of sectors per cluster */
4038:../Sources/ff10b/src/ff.c **** 	if (au == 0) au = 1;
4039:../Sources/ff10b/src/ff.c **** 	if (au > 128) au = 128;
4040:../Sources/ff10b/src/ff.c **** 
4041:../Sources/ff10b/src/ff.c **** 	/* Pre-compute number of clusters and FAT sub-type */
4042:../Sources/ff10b/src/ff.c **** 	n_clst = n_vol / au;
4043:../Sources/ff10b/src/ff.c **** 	fmt = FS_FAT12;
4044:../Sources/ff10b/src/ff.c **** 	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
4045:../Sources/ff10b/src/ff.c **** 	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
4046:../Sources/ff10b/src/ff.c **** 
4047:../Sources/ff10b/src/ff.c **** 	/* Determine offset and size of FAT structure */
4048:../Sources/ff10b/src/ff.c **** 	if (fmt == FS_FAT32) {
4049:../Sources/ff10b/src/ff.c **** 		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
4050:../Sources/ff10b/src/ff.c **** 		n_rsv = 32;
4051:../Sources/ff10b/src/ff.c **** 		n_dir = 0;
4052:../Sources/ff10b/src/ff.c **** 	} else {
4053:../Sources/ff10b/src/ff.c **** 		n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
4054:../Sources/ff10b/src/ff.c **** 		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
4055:../Sources/ff10b/src/ff.c **** 		n_rsv = 1;
4056:../Sources/ff10b/src/ff.c **** 		n_dir = (DWORD)N_ROOTDIR * SZ_DIR / SS(fs);
4057:../Sources/ff10b/src/ff.c **** 	}
4058:../Sources/ff10b/src/ff.c **** 	b_fat = b_vol + n_rsv;				/* FAT area start sector */
4059:../Sources/ff10b/src/ff.c **** 	b_dir = b_fat + n_fat * N_FATS;		/* Directory area start sector */
4060:../Sources/ff10b/src/ff.c **** 	b_data = b_dir + n_dir;				/* Data area start sector */
4061:../Sources/ff10b/src/ff.c **** 	if (n_vol < b_data + au - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
4062:../Sources/ff10b/src/ff.c **** 
4063:../Sources/ff10b/src/ff.c **** 	/* Align data start sector to erase block boundary (for flash memory media) */
4064:../Sources/ff10b/src/ff.c **** 	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &n) != RES_OK || !n || n > 32768) n = 1;
4065:../Sources/ff10b/src/ff.c **** 	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
4066:../Sources/ff10b/src/ff.c **** 	n = (n - b_data) / N_FATS;
4067:../Sources/ff10b/src/ff.c **** 	if (fmt == FS_FAT32) {		/* FAT32: Move FAT offset */
4068:../Sources/ff10b/src/ff.c **** 		n_rsv += n;
4069:../Sources/ff10b/src/ff.c **** 		b_fat += n;
4070:../Sources/ff10b/src/ff.c **** 	} else {					/* FAT12/16: Expand FAT size */
4071:../Sources/ff10b/src/ff.c **** 		n_fat += n;
4072:../Sources/ff10b/src/ff.c **** 	}
4073:../Sources/ff10b/src/ff.c **** 
4074:../Sources/ff10b/src/ff.c **** 	/* Determine number of clusters and final check of validity of the FAT sub-type */
4075:../Sources/ff10b/src/ff.c **** 	n_clst = (n_vol - n_rsv - n_fat * N_FATS - n_dir) / au;
4076:../Sources/ff10b/src/ff.c **** 	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
4077:../Sources/ff10b/src/ff.c **** 		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
4078:../Sources/ff10b/src/ff.c **** 		return FR_MKFS_ABORTED;
4079:../Sources/ff10b/src/ff.c **** 
4080:../Sources/ff10b/src/ff.c **** 	/* Determine system ID in the partition table */
4081:../Sources/ff10b/src/ff.c **** 	if (fmt == FS_FAT32) {
4082:../Sources/ff10b/src/ff.c **** 		sys = 0x0C;		/* FAT32X */
4083:../Sources/ff10b/src/ff.c **** 	} else {
4084:../Sources/ff10b/src/ff.c **** 		if (fmt == FS_FAT12 && n_vol < 0x10000) {
4085:../Sources/ff10b/src/ff.c **** 			sys = 0x01;	/* FAT12(<65536) */
4086:../Sources/ff10b/src/ff.c **** 		} else {
4087:../Sources/ff10b/src/ff.c **** 			sys = (n_vol < 0x10000) ? 0x04 : 0x06;	/* FAT16(<65536) : FAT12/16(>=65536) */
4088:../Sources/ff10b/src/ff.c **** 		}
4089:../Sources/ff10b/src/ff.c **** 	}
4090:../Sources/ff10b/src/ff.c **** 
4091:../Sources/ff10b/src/ff.c **** 	if (_MULTI_PARTITION && part) {
4092:../Sources/ff10b/src/ff.c **** 		/* Update system ID in the partition table */
4093:../Sources/ff10b/src/ff.c **** 		tbl = &fs->win[MBR_Table + (part - 1) * SZ_PTE];
4094:../Sources/ff10b/src/ff.c **** 		tbl[4] = sys;
4095:../Sources/ff10b/src/ff.c **** 		if (disk_write(pdrv, fs->win, 0, 1))	/* Write it to teh MBR */
4096:../Sources/ff10b/src/ff.c **** 			return FR_DISK_ERR;
4097:../Sources/ff10b/src/ff.c **** 		md = 0xF8;
4098:../Sources/ff10b/src/ff.c **** 	} else {
4099:../Sources/ff10b/src/ff.c **** 		if (sfd) {	/* No partition table (SFD) */
4100:../Sources/ff10b/src/ff.c **** 			md = 0xF0;
4101:../Sources/ff10b/src/ff.c **** 		} else {	/* Create partition table (FDISK) */
4102:../Sources/ff10b/src/ff.c **** 			mem_set(fs->win, 0, SS(fs));
4103:../Sources/ff10b/src/ff.c **** 			tbl = fs->win+MBR_Table;	/* Create partition table for single partition in the drive */
4104:../Sources/ff10b/src/ff.c **** 			tbl[1] = 1;						/* Partition start head */
4105:../Sources/ff10b/src/ff.c **** 			tbl[2] = 1;						/* Partition start sector */
4106:../Sources/ff10b/src/ff.c **** 			tbl[3] = 0;						/* Partition start cylinder */
4107:../Sources/ff10b/src/ff.c **** 			tbl[4] = sys;					/* System type */
4108:../Sources/ff10b/src/ff.c **** 			tbl[5] = 254;					/* Partition end head */
4109:../Sources/ff10b/src/ff.c **** 			n = (b_vol + n_vol) / 63 / 255;
4110:../Sources/ff10b/src/ff.c **** 			tbl[6] = (BYTE)(n >> 2 | 63);	/* Partition end sector */
4111:../Sources/ff10b/src/ff.c **** 			tbl[7] = (BYTE)n;				/* End cylinder */
4112:../Sources/ff10b/src/ff.c **** 			ST_DWORD(tbl+8, 63);			/* Partition start in LBA */
4113:../Sources/ff10b/src/ff.c **** 			ST_DWORD(tbl+12, n_vol);		/* Partition size in LBA */
4114:../Sources/ff10b/src/ff.c **** 			ST_WORD(fs->win+BS_55AA, 0xAA55);	/* MBR signature */
4115:../Sources/ff10b/src/ff.c **** 			if (disk_write(pdrv, fs->win, 0, 1))	/* Write it to the MBR */
4116:../Sources/ff10b/src/ff.c **** 				return FR_DISK_ERR;
4117:../Sources/ff10b/src/ff.c **** 			md = 0xF8;
4118:../Sources/ff10b/src/ff.c **** 		}
4119:../Sources/ff10b/src/ff.c **** 	}
4120:../Sources/ff10b/src/ff.c **** 
4121:../Sources/ff10b/src/ff.c **** 	/* Create BPB in the VBR */
4122:../Sources/ff10b/src/ff.c **** 	tbl = fs->win;							/* Clear sector */
4123:../Sources/ff10b/src/ff.c **** 	mem_set(tbl, 0, SS(fs));
4124:../Sources/ff10b/src/ff.c **** 	mem_cpy(tbl, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code, OEM name */
4125:../Sources/ff10b/src/ff.c **** 	i = SS(fs);								/* Sector size */
4126:../Sources/ff10b/src/ff.c **** 	ST_WORD(tbl+BPB_BytsPerSec, i);
4127:../Sources/ff10b/src/ff.c **** 	tbl[BPB_SecPerClus] = (BYTE)au;			/* Sectors per cluster */
4128:../Sources/ff10b/src/ff.c **** 	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);		/* Reserved sectors */
4129:../Sources/ff10b/src/ff.c **** 	tbl[BPB_NumFATs] = N_FATS;				/* Number of FATs */
4130:../Sources/ff10b/src/ff.c **** 	i = (fmt == FS_FAT32) ? 0 : N_ROOTDIR;	/* Number of root directory entries */
4131:../Sources/ff10b/src/ff.c **** 	ST_WORD(tbl+BPB_RootEntCnt, i);
4132:../Sources/ff10b/src/ff.c **** 	if (n_vol < 0x10000) {					/* Number of total sectors */
4133:../Sources/ff10b/src/ff.c **** 		ST_WORD(tbl+BPB_TotSec16, n_vol);
4134:../Sources/ff10b/src/ff.c **** 	} else {
4135:../Sources/ff10b/src/ff.c **** 		ST_DWORD(tbl+BPB_TotSec32, n_vol);
4136:../Sources/ff10b/src/ff.c **** 	}
4137:../Sources/ff10b/src/ff.c **** 	tbl[BPB_Media] = md;					/* Media descriptor */
4138:../Sources/ff10b/src/ff.c **** 	ST_WORD(tbl+BPB_SecPerTrk, 63);			/* Number of sectors per track */
4139:../Sources/ff10b/src/ff.c **** 	ST_WORD(tbl+BPB_NumHeads, 255);			/* Number of heads */
4140:../Sources/ff10b/src/ff.c **** 	ST_DWORD(tbl+BPB_HiddSec, b_vol);		/* Hidden sectors */
4141:../Sources/ff10b/src/ff.c **** 	n = get_fattime();						/* Use current time as VSN */
4142:../Sources/ff10b/src/ff.c **** 	if (fmt == FS_FAT32) {
4143:../Sources/ff10b/src/ff.c **** 		ST_DWORD(tbl+BS_VolID32, n);		/* VSN */
4144:../Sources/ff10b/src/ff.c **** 		ST_DWORD(tbl+BPB_FATSz32, n_fat);	/* Number of sectors per FAT */
4145:../Sources/ff10b/src/ff.c **** 		ST_DWORD(tbl+BPB_RootClus, 2);		/* Root directory start cluster (2) */
4146:../Sources/ff10b/src/ff.c **** 		ST_WORD(tbl+BPB_FSInfo, 1);			/* FSINFO record offset (VBR+1) */
4147:../Sources/ff10b/src/ff.c **** 		ST_WORD(tbl+BPB_BkBootSec, 6);		/* Backup boot record offset (VBR+6) */
4148:../Sources/ff10b/src/ff.c **** 		tbl[BS_DrvNum32] = 0x80;			/* Drive number */
4149:../Sources/ff10b/src/ff.c **** 		tbl[BS_BootSig32] = 0x29;			/* Extended boot signature */
4150:../Sources/ff10b/src/ff.c **** 		mem_cpy(tbl+BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
4151:../Sources/ff10b/src/ff.c **** 	} else {
4152:../Sources/ff10b/src/ff.c **** 		ST_DWORD(tbl+BS_VolID, n);			/* VSN */
4153:../Sources/ff10b/src/ff.c **** 		ST_WORD(tbl+BPB_FATSz16, n_fat);	/* Number of sectors per FAT */
4154:../Sources/ff10b/src/ff.c **** 		tbl[BS_DrvNum] = 0x80;				/* Drive number */
4155:../Sources/ff10b/src/ff.c **** 		tbl[BS_BootSig] = 0x29;				/* Extended boot signature */
4156:../Sources/ff10b/src/ff.c **** 		mem_cpy(tbl+BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
4157:../Sources/ff10b/src/ff.c **** 	}
4158:../Sources/ff10b/src/ff.c **** 	ST_WORD(tbl+BS_55AA, 0xAA55);			/* Signature (Offset is fixed here regardless of sector size) */
4159:../Sources/ff10b/src/ff.c **** 	if (disk_write(pdrv, tbl, b_vol, 1))	/* Write it to the VBR sector */
4160:../Sources/ff10b/src/ff.c **** 		return FR_DISK_ERR;
4161:../Sources/ff10b/src/ff.c **** 	if (fmt == FS_FAT32)					/* Write backup VBR if needed (VBR+6) */
4162:../Sources/ff10b/src/ff.c **** 		disk_write(pdrv, tbl, b_vol + 6, 1);
4163:../Sources/ff10b/src/ff.c **** 
4164:../Sources/ff10b/src/ff.c **** 	/* Initialize FAT area */
4165:../Sources/ff10b/src/ff.c **** 	wsect = b_fat;
4166:../Sources/ff10b/src/ff.c **** 	for (i = 0; i < N_FATS; i++) {		/* Initialize each FAT copy */
4167:../Sources/ff10b/src/ff.c **** 		mem_set(tbl, 0, SS(fs));			/* 1st sector of the FAT  */
4168:../Sources/ff10b/src/ff.c **** 		n = md;								/* Media descriptor byte */
4169:../Sources/ff10b/src/ff.c **** 		if (fmt != FS_FAT32) {
4170:../Sources/ff10b/src/ff.c **** 			n |= (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
4171:../Sources/ff10b/src/ff.c **** 			ST_DWORD(tbl+0, n);				/* Reserve cluster #0-1 (FAT12/16) */
4172:../Sources/ff10b/src/ff.c **** 		} else {
4173:../Sources/ff10b/src/ff.c **** 			n |= 0xFFFFFF00;
4174:../Sources/ff10b/src/ff.c **** 			ST_DWORD(tbl+0, n);				/* Reserve cluster #0-1 (FAT32) */
4175:../Sources/ff10b/src/ff.c **** 			ST_DWORD(tbl+4, 0xFFFFFFFF);
4176:../Sources/ff10b/src/ff.c **** 			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root directory */
4177:../Sources/ff10b/src/ff.c **** 		}
4178:../Sources/ff10b/src/ff.c **** 		if (disk_write(pdrv, tbl, wsect++, 1))
4179:../Sources/ff10b/src/ff.c **** 			return FR_DISK_ERR;
4180:../Sources/ff10b/src/ff.c **** 		mem_set(tbl, 0, SS(fs));			/* Fill following FAT entries with zero */
4181:../Sources/ff10b/src/ff.c **** 		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single se
4182:../Sources/ff10b/src/ff.c **** 			if (disk_write(pdrv, tbl, wsect++, 1))
4183:../Sources/ff10b/src/ff.c **** 				return FR_DISK_ERR;
4184:../Sources/ff10b/src/ff.c **** 		}
4185:../Sources/ff10b/src/ff.c **** 	}
4186:../Sources/ff10b/src/ff.c **** 
4187:../Sources/ff10b/src/ff.c **** 	/* Initialize root directory */
4188:../Sources/ff10b/src/ff.c **** 	i = (fmt == FS_FAT32) ? au : (UINT)n_dir;
4189:../Sources/ff10b/src/ff.c **** 	do {
4190:../Sources/ff10b/src/ff.c **** 		if (disk_write(pdrv, tbl, wsect++, 1))
4191:../Sources/ff10b/src/ff.c **** 			return FR_DISK_ERR;
4192:../Sources/ff10b/src/ff.c **** 	} while (--i);
4193:../Sources/ff10b/src/ff.c **** 
4194:../Sources/ff10b/src/ff.c **** #if _USE_ERASE	/* Erase data area if needed */
4195:../Sources/ff10b/src/ff.c **** 	{
4196:../Sources/ff10b/src/ff.c **** 		DWORD eb[2];
4197:../Sources/ff10b/src/ff.c **** 
4198:../Sources/ff10b/src/ff.c **** 		eb[0] = wsect; eb[1] = wsect + (n_clst - ((fmt == FS_FAT32) ? 1 : 0)) * au - 1;
4199:../Sources/ff10b/src/ff.c **** 		disk_ioctl(pdrv, CTRL_ERASE_SECTOR, eb);
4200:../Sources/ff10b/src/ff.c **** 	}
4201:../Sources/ff10b/src/ff.c **** #endif
4202:../Sources/ff10b/src/ff.c **** 
4203:../Sources/ff10b/src/ff.c **** 	/* Create FSINFO if needed */
4204:../Sources/ff10b/src/ff.c **** 	if (fmt == FS_FAT32) {
4205:../Sources/ff10b/src/ff.c **** 		ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
4206:../Sources/ff10b/src/ff.c **** 		ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
4207:../Sources/ff10b/src/ff.c **** 		ST_DWORD(tbl+FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
4208:../Sources/ff10b/src/ff.c **** 		ST_DWORD(tbl+FSI_Nxt_Free, 2);				/* Last allocated cluster# */
4209:../Sources/ff10b/src/ff.c **** 		ST_WORD(tbl+BS_55AA, 0xAA55);
4210:../Sources/ff10b/src/ff.c **** 		disk_write(pdrv, tbl, b_vol + 1, 1);	/* Write original (VBR+1) */
4211:../Sources/ff10b/src/ff.c **** 		disk_write(pdrv, tbl, b_vol + 7, 1);	/* Write backup (VBR+7) */
4212:../Sources/ff10b/src/ff.c **** 	}
4213:../Sources/ff10b/src/ff.c **** 
4214:../Sources/ff10b/src/ff.c **** 	return (disk_ioctl(pdrv, CTRL_SYNC, 0) == RES_OK) ? FR_OK : FR_DISK_ERR;
4215:../Sources/ff10b/src/ff.c **** }
4216:../Sources/ff10b/src/ff.c **** 
4217:../Sources/ff10b/src/ff.c **** 
4218:../Sources/ff10b/src/ff.c **** 
4219:../Sources/ff10b/src/ff.c **** #if _MULTI_PARTITION
4220:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
4221:../Sources/ff10b/src/ff.c **** /* Divide Physical Drive                                                 */
4222:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
4223:../Sources/ff10b/src/ff.c **** 
4224:../Sources/ff10b/src/ff.c **** FRESULT f_fdisk (
4225:../Sources/ff10b/src/ff.c **** 	BYTE pdrv,			/* Physical drive number */
4226:../Sources/ff10b/src/ff.c **** 	const DWORD szt[],	/* Pointer to the size table for each partitions */
4227:../Sources/ff10b/src/ff.c **** 	void* work			/* Pointer to the working buffer */
4228:../Sources/ff10b/src/ff.c **** )
4229:../Sources/ff10b/src/ff.c **** {
4230:../Sources/ff10b/src/ff.c **** 	UINT i, n, sz_cyl, tot_cyl, b_cyl, e_cyl, p_cyl;
4231:../Sources/ff10b/src/ff.c **** 	BYTE s_hd, e_hd, *p, *buf = (BYTE*)work;
4232:../Sources/ff10b/src/ff.c **** 	DSTATUS stat;
4233:../Sources/ff10b/src/ff.c **** 	DWORD sz_disk, sz_part, s_part;
4234:../Sources/ff10b/src/ff.c **** 
4235:../Sources/ff10b/src/ff.c **** 
4236:../Sources/ff10b/src/ff.c **** 	stat = disk_initialize(pdrv);
4237:../Sources/ff10b/src/ff.c **** 	if (stat & STA_NOINIT) return FR_NOT_READY;
4238:../Sources/ff10b/src/ff.c **** 	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
4239:../Sources/ff10b/src/ff.c **** 	if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_disk)) return FR_DISK_ERR;
4240:../Sources/ff10b/src/ff.c **** 
4241:../Sources/ff10b/src/ff.c **** 	/* Determine CHS in the table regardless of the drive geometry */
4242:../Sources/ff10b/src/ff.c **** 	for (n = 16; n < 256 && sz_disk / n / 63 > 1024; n *= 2) ;
4243:../Sources/ff10b/src/ff.c **** 	if (n == 256) n--;
4244:../Sources/ff10b/src/ff.c **** 	e_hd = n - 1;
4245:../Sources/ff10b/src/ff.c **** 	sz_cyl = 63 * n;
4246:../Sources/ff10b/src/ff.c **** 	tot_cyl = sz_disk / sz_cyl;
4247:../Sources/ff10b/src/ff.c **** 
4248:../Sources/ff10b/src/ff.c **** 	/* Create partition table */
4249:../Sources/ff10b/src/ff.c **** 	mem_set(buf, 0, _MAX_SS);
4250:../Sources/ff10b/src/ff.c **** 	p = buf + MBR_Table; b_cyl = 0;
4251:../Sources/ff10b/src/ff.c **** 	for (i = 0; i < 4; i++, p += SZ_PTE) {
4252:../Sources/ff10b/src/ff.c **** 		p_cyl = (szt[i] <= 100U) ? (DWORD)tot_cyl * szt[i] / 100 : szt[i] / sz_cyl;
4253:../Sources/ff10b/src/ff.c **** 		if (!p_cyl) continue;
4254:../Sources/ff10b/src/ff.c **** 		s_part = (DWORD)sz_cyl * b_cyl;
4255:../Sources/ff10b/src/ff.c **** 		sz_part = (DWORD)sz_cyl * p_cyl;
4256:../Sources/ff10b/src/ff.c **** 		if (i == 0) {	/* Exclude first track of cylinder 0 */
4257:../Sources/ff10b/src/ff.c **** 			s_hd = 1;
4258:../Sources/ff10b/src/ff.c **** 			s_part += 63; sz_part -= 63;
4259:../Sources/ff10b/src/ff.c **** 		} else {
4260:../Sources/ff10b/src/ff.c **** 			s_hd = 0;
4261:../Sources/ff10b/src/ff.c **** 		}
4262:../Sources/ff10b/src/ff.c **** 		e_cyl = b_cyl + p_cyl - 1;
4263:../Sources/ff10b/src/ff.c **** 		if (e_cyl >= tot_cyl) return FR_INVALID_PARAMETER;
4264:../Sources/ff10b/src/ff.c **** 
4265:../Sources/ff10b/src/ff.c **** 		/* Set partition table */
4266:../Sources/ff10b/src/ff.c **** 		p[1] = s_hd;						/* Start head */
4267:../Sources/ff10b/src/ff.c **** 		p[2] = (BYTE)((b_cyl >> 2) + 1);	/* Start sector */
4268:../Sources/ff10b/src/ff.c **** 		p[3] = (BYTE)b_cyl;					/* Start cylinder */
4269:../Sources/ff10b/src/ff.c **** 		p[4] = 0x06;						/* System type (temporary setting) */
4270:../Sources/ff10b/src/ff.c **** 		p[5] = e_hd;						/* End head */
4271:../Sources/ff10b/src/ff.c **** 		p[6] = (BYTE)((e_cyl >> 2) + 63);	/* End sector */
4272:../Sources/ff10b/src/ff.c **** 		p[7] = (BYTE)e_cyl;					/* End cylinder */
4273:../Sources/ff10b/src/ff.c **** 		ST_DWORD(p + 8, s_part);			/* Start sector in LBA */
4274:../Sources/ff10b/src/ff.c **** 		ST_DWORD(p + 12, sz_part);			/* Partition size */
4275:../Sources/ff10b/src/ff.c **** 
4276:../Sources/ff10b/src/ff.c **** 		/* Next partition */
4277:../Sources/ff10b/src/ff.c **** 		b_cyl += p_cyl;
4278:../Sources/ff10b/src/ff.c **** 	}
4279:../Sources/ff10b/src/ff.c **** 	ST_WORD(p, 0xAA55);
4280:../Sources/ff10b/src/ff.c **** 
4281:../Sources/ff10b/src/ff.c **** 	/* Write it to the MBR */
4282:../Sources/ff10b/src/ff.c **** 	return (disk_write(pdrv, buf, 0, 1) || disk_ioctl(pdrv, CTRL_SYNC, 0)) ? FR_DISK_ERR : FR_OK;
4283:../Sources/ff10b/src/ff.c **** }
4284:../Sources/ff10b/src/ff.c **** 
4285:../Sources/ff10b/src/ff.c **** 
4286:../Sources/ff10b/src/ff.c **** #endif /* _MULTI_PARTITION */
4287:../Sources/ff10b/src/ff.c **** #endif /* _USE_MKFS && !_FS_READONLY */
4288:../Sources/ff10b/src/ff.c **** 
4289:../Sources/ff10b/src/ff.c **** 
4290:../Sources/ff10b/src/ff.c **** 
4291:../Sources/ff10b/src/ff.c **** 
4292:../Sources/ff10b/src/ff.c **** #if _USE_STRFUNC
4293:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
4294:../Sources/ff10b/src/ff.c **** /* Get a string from the file                                            */
4295:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
4296:../Sources/ff10b/src/ff.c **** 
4297:../Sources/ff10b/src/ff.c **** TCHAR* f_gets (
4298:../Sources/ff10b/src/ff.c **** 	TCHAR* buff,	/* Pointer to the string buffer to read */
4299:../Sources/ff10b/src/ff.c **** 	int len,		/* Size of string buffer (characters) */
4300:../Sources/ff10b/src/ff.c **** 	FIL* fp			/* Pointer to the file object */
4301:../Sources/ff10b/src/ff.c **** )
4302:../Sources/ff10b/src/ff.c **** {
 8347              		.loc 1 4302 0
 8348              		.cfi_startproc
 8349              		@ args = 0, pretend = 0, frame = 32
 8350              		@ frame_needed = 1, uses_anonymous_args = 0
 8351 376c 80B5     		push	{r7, lr}
 8352              	.LCFI140:
 8353              		.cfi_def_cfa_offset 8
 8354              		.cfi_offset 7, -8
 8355              		.cfi_offset 14, -4
 8356 376e 88B0     		sub	sp, sp, #32
 8357              	.LCFI141:
 8358              		.cfi_def_cfa_offset 40
 8359 3770 00AF     		add	r7, sp, #0
 8360              	.LCFI142:
 8361              		.cfi_def_cfa_register 7
 8362 3772 F860     		str	r0, [r7, #12]
 8363 3774 B960     		str	r1, [r7, #8]
 8364 3776 7A60     		str	r2, [r7, #4]
4303:../Sources/ff10b/src/ff.c **** 	int n = 0;
 8365              		.loc 1 4303 0
 8366 3778 4FF00003 		mov	r3, #0
 8367 377c FB61     		str	r3, [r7, #28]
4304:../Sources/ff10b/src/ff.c **** 	TCHAR c, *p = buff;
 8368              		.loc 1 4304 0
 8369 377e FB68     		ldr	r3, [r7, #12]
 8370 3780 BB61     		str	r3, [r7, #24]
4305:../Sources/ff10b/src/ff.c **** 	BYTE s[2];
4306:../Sources/ff10b/src/ff.c **** 	UINT rc;
4307:../Sources/ff10b/src/ff.c **** 
4308:../Sources/ff10b/src/ff.c **** 
4309:../Sources/ff10b/src/ff.c **** 	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8371              		.loc 1 4309 0
 8372 3782 1CE0     		b	.L503
 8373              	.L506:
4310:../Sources/ff10b/src/ff.c **** #if _USE_LFN && _LFN_UNICODE
4311:../Sources/ff10b/src/ff.c **** #if _STRF_ENCODE == 3		/* Read a character in UTF-8 */
4312:../Sources/ff10b/src/ff.c **** 		f_read(fp, s, 1, &rc);
4313:../Sources/ff10b/src/ff.c **** 		if (rc != 1) break;
4314:../Sources/ff10b/src/ff.c **** 		c = s[0];
4315:../Sources/ff10b/src/ff.c **** 		if (c >= 0x80) {
4316:../Sources/ff10b/src/ff.c **** 			if (c < 0xC0) continue;	/* Skip stray trailer */
4317:../Sources/ff10b/src/ff.c **** 			if (c < 0xE0) {			/* Two-byte sequence */
4318:../Sources/ff10b/src/ff.c **** 				f_read(fp, s, 1, &rc);
4319:../Sources/ff10b/src/ff.c **** 				if (rc != 1) break;
4320:../Sources/ff10b/src/ff.c **** 				c = (c & 0x1F) << 6 | (s[0] & 0x3F);
4321:../Sources/ff10b/src/ff.c **** 				if (c < 0x80) c = '?';
4322:../Sources/ff10b/src/ff.c **** 			} else {
4323:../Sources/ff10b/src/ff.c **** 				if (c < 0xF0) {		/* Three-byte sequence */
4324:../Sources/ff10b/src/ff.c **** 					f_read(fp, s, 2, &rc);
4325:../Sources/ff10b/src/ff.c **** 					if (rc != 2) break;
4326:../Sources/ff10b/src/ff.c **** 					c = c << 12 | (s[0] & 0x3F) << 6 | (s[1] & 0x3F);
4327:../Sources/ff10b/src/ff.c **** 					if (c < 0x800) c = '?';
4328:../Sources/ff10b/src/ff.c **** 				} else {			/* Reject four-byte sequence */
4329:../Sources/ff10b/src/ff.c **** 					c = '?';
4330:../Sources/ff10b/src/ff.c **** 				}
4331:../Sources/ff10b/src/ff.c **** 			}
4332:../Sources/ff10b/src/ff.c **** 		}
4333:../Sources/ff10b/src/ff.c **** #elif _STRF_ENCODE == 2		/* Read a character in UTF-16BE */
4334:../Sources/ff10b/src/ff.c **** 		f_read(fp, s, 2, &rc);
4335:../Sources/ff10b/src/ff.c **** 		if (rc != 2) break;
4336:../Sources/ff10b/src/ff.c **** 		c = s[1] + (s[0] << 8);
4337:../Sources/ff10b/src/ff.c **** #elif _STRF_ENCODE == 1		/* Read a character in UTF-16LE */
4338:../Sources/ff10b/src/ff.c **** 		f_read(fp, s, 2, &rc);
4339:../Sources/ff10b/src/ff.c **** 		if (rc != 2) break;
4340:../Sources/ff10b/src/ff.c **** 		c = s[0] + (s[1] << 8);
4341:../Sources/ff10b/src/ff.c **** #else						/* Read a character in ANSI/OEM */
4342:../Sources/ff10b/src/ff.c **** 		f_read(fp, s, 1, &rc);
4343:../Sources/ff10b/src/ff.c **** 		if (rc != 1) break;
4344:../Sources/ff10b/src/ff.c **** 		c = s[0];
4345:../Sources/ff10b/src/ff.c **** 		if (IsDBCS1(c)) {
4346:../Sources/ff10b/src/ff.c **** 			f_read(fp, s, 1, &rc);
4347:../Sources/ff10b/src/ff.c **** 			if (rc != 1) break;
4348:../Sources/ff10b/src/ff.c **** 			c = (c << 8) + s[0];
4349:../Sources/ff10b/src/ff.c **** 		}
4350:../Sources/ff10b/src/ff.c **** 		c = ff_convert(c, 1);	/* OEM -> Unicode */
4351:../Sources/ff10b/src/ff.c **** 		if (!c) c = '?';
4352:../Sources/ff10b/src/ff.c **** #endif
4353:../Sources/ff10b/src/ff.c **** #else						/* Read a character without conversion */
4354:../Sources/ff10b/src/ff.c **** 		f_read(fp, s, 1, &rc);
 8374              		.loc 1 4354 0
 8375 3784 07F11402 		add	r2, r7, #20
 8376 3788 07F11003 		add	r3, r7, #16
 8377 378c 7868     		ldr	r0, [r7, #4]
 8378 378e 1146     		mov	r1, r2
 8379 3790 4FF00102 		mov	r2, #1
 8380 3794 FFF7FEFF 		bl	f_read
4355:../Sources/ff10b/src/ff.c **** 		if (rc != 1) break;
 8381              		.loc 1 4355 0
 8382 3798 3B69     		ldr	r3, [r7, #16]
 8383 379a 012B     		cmp	r3, #1
 8384 379c 16D1     		bne	.L510
 8385              	.L504:
4356:../Sources/ff10b/src/ff.c **** 		c = s[0];
 8386              		.loc 1 4356 0
 8387 379e 3B7D     		ldrb	r3, [r7, #20]
 8388 37a0 FB75     		strb	r3, [r7, #23]
4357:../Sources/ff10b/src/ff.c **** #endif
4358:../Sources/ff10b/src/ff.c **** 		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
4359:../Sources/ff10b/src/ff.c **** 		*p++ = c;
 8389              		.loc 1 4359 0
 8390 37a2 BB69     		ldr	r3, [r7, #24]
 8391 37a4 FA7D     		ldrb	r2, [r7, #23]
 8392 37a6 1A70     		strb	r2, [r3, #0]
 8393 37a8 BB69     		ldr	r3, [r7, #24]
 8394 37aa 03F10103 		add	r3, r3, #1
 8395 37ae BB61     		str	r3, [r7, #24]
4360:../Sources/ff10b/src/ff.c **** 		n++;
 8396              		.loc 1 4360 0
 8397 37b0 FB69     		ldr	r3, [r7, #28]
 8398 37b2 03F10103 		add	r3, r3, #1
 8399 37b6 FB61     		str	r3, [r7, #28]
4361:../Sources/ff10b/src/ff.c **** 		if (c == '\n') break;		/* Break on EOL */
 8400              		.loc 1 4361 0
 8401 37b8 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 8402 37ba 0A2B     		cmp	r3, #10
 8403 37bc 08D0     		beq	.L511
 8404              	.L503:
4309:../Sources/ff10b/src/ff.c **** 	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8405              		.loc 1 4309 0 discriminator 1
 8406 37be BB68     		ldr	r3, [r7, #8]
 8407 37c0 03F1FF32 		add	r2, r3, #-1
 8408 37c4 FB69     		ldr	r3, [r7, #28]
 8409 37c6 9A42     		cmp	r2, r3
 8410 37c8 DCDC     		bgt	.L506
 8411 37ca 02E0     		b	.L505
 8412              	.L510:
4355:../Sources/ff10b/src/ff.c **** 		if (rc != 1) break;
 8413              		.loc 1 4355 0
 8414 37cc 00BF     		nop
 8415 37ce 00E0     		b	.L505
 8416              	.L511:
 8417              		.loc 1 4361 0
 8418 37d0 00BF     		nop
 8419              	.L505:
4362:../Sources/ff10b/src/ff.c **** 	}
4363:../Sources/ff10b/src/ff.c **** 	*p = 0;
 8420              		.loc 1 4363 0
 8421 37d2 BB69     		ldr	r3, [r7, #24]
 8422 37d4 4FF00002 		mov	r2, #0
 8423 37d8 1A70     		strb	r2, [r3, #0]
4364:../Sources/ff10b/src/ff.c **** 	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8424              		.loc 1 4364 0
 8425 37da FB69     		ldr	r3, [r7, #28]
 8426 37dc 002B     		cmp	r3, #0
 8427 37de 01D0     		beq	.L507
 8428              		.loc 1 4364 0 is_stmt 0 discriminator 1
 8429 37e0 FB68     		ldr	r3, [r7, #12]
 8430 37e2 01E0     		b	.L508
 8431              	.L507:
 8432              		.loc 1 4364 0 discriminator 2
 8433 37e4 4FF00003 		mov	r3, #0
 8434              	.L508:
4365:../Sources/ff10b/src/ff.c **** }
 8435              		.loc 1 4365 0 is_stmt 1 discriminator 3
 8436 37e8 1846     		mov	r0, r3
 8437 37ea 07F12007 		add	r7, r7, #32
 8438 37ee BD46     		mov	sp, r7
 8439 37f0 80BD     		pop	{r7, pc}
 8440              		.cfi_endproc
 8441              	.LFE47:
 8443 37f2 00BF     		.align	2
 8444              		.thumb
 8445              		.thumb_func
 8447              	putc_bfd:
 8448              	.LFB48:
4366:../Sources/ff10b/src/ff.c **** 
4367:../Sources/ff10b/src/ff.c **** 
4368:../Sources/ff10b/src/ff.c **** 
4369:../Sources/ff10b/src/ff.c **** #if !_FS_READONLY
4370:../Sources/ff10b/src/ff.c **** #include <stdarg.h>
4371:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
4372:../Sources/ff10b/src/ff.c **** /* Put a character to the file                                           */
4373:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
4374:../Sources/ff10b/src/ff.c **** 
4375:../Sources/ff10b/src/ff.c **** typedef struct {
4376:../Sources/ff10b/src/ff.c **** 	FIL* fp;
4377:../Sources/ff10b/src/ff.c **** 	int idx, nchr;
4378:../Sources/ff10b/src/ff.c **** 	BYTE buf[64];
4379:../Sources/ff10b/src/ff.c **** } putbuff;
4380:../Sources/ff10b/src/ff.c **** 
4381:../Sources/ff10b/src/ff.c **** 
4382:../Sources/ff10b/src/ff.c **** static
4383:../Sources/ff10b/src/ff.c **** void putc_bfd (
4384:../Sources/ff10b/src/ff.c **** 	putbuff* pb,
4385:../Sources/ff10b/src/ff.c **** 	TCHAR c
4386:../Sources/ff10b/src/ff.c **** )
4387:../Sources/ff10b/src/ff.c **** {
 8449              		.loc 1 4387 0
 8450              		.cfi_startproc
 8451              		@ args = 0, pretend = 0, frame = 16
 8452              		@ frame_needed = 1, uses_anonymous_args = 0
 8453 37f4 80B5     		push	{r7, lr}
 8454              	.LCFI143:
 8455              		.cfi_def_cfa_offset 8
 8456              		.cfi_offset 7, -8
 8457              		.cfi_offset 14, -4
 8458 37f6 84B0     		sub	sp, sp, #16
 8459              	.LCFI144:
 8460              		.cfi_def_cfa_offset 24
 8461 37f8 00AF     		add	r7, sp, #0
 8462              	.LCFI145:
 8463              		.cfi_def_cfa_register 7
 8464 37fa 7860     		str	r0, [r7, #4]
 8465 37fc 0B46     		mov	r3, r1
 8466 37fe FB70     		strb	r3, [r7, #3]
4388:../Sources/ff10b/src/ff.c **** 	UINT bw;
4389:../Sources/ff10b/src/ff.c **** 	int i;
4390:../Sources/ff10b/src/ff.c **** 
4391:../Sources/ff10b/src/ff.c **** 
4392:../Sources/ff10b/src/ff.c **** 	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
4393:../Sources/ff10b/src/ff.c **** 		putc_bfd(pb, '\r');
4394:../Sources/ff10b/src/ff.c **** 
4395:../Sources/ff10b/src/ff.c **** 	i = pb->idx;	/* Buffer write index (-1:error) */
 8467              		.loc 1 4395 0
 8468 3800 7B68     		ldr	r3, [r7, #4]
 8469 3802 5B68     		ldr	r3, [r3, #4]
 8470 3804 FB60     		str	r3, [r7, #12]
4396:../Sources/ff10b/src/ff.c **** 	if (i < 0) return;
 8471              		.loc 1 4396 0
 8472 3806 FB68     		ldr	r3, [r7, #12]
 8473 3808 002B     		cmp	r3, #0
 8474 380a 2ADB     		blt	.L512
4397:../Sources/ff10b/src/ff.c **** 
4398:../Sources/ff10b/src/ff.c **** #if _USE_LFN && _LFN_UNICODE
4399:../Sources/ff10b/src/ff.c **** #if _STRF_ENCODE == 3			/* Write a character in UTF-8 */
4400:../Sources/ff10b/src/ff.c **** 	if (c < 0x80) {				/* 7-bit */
4401:../Sources/ff10b/src/ff.c **** 		pb->buf[i++] = (BYTE)c;
4402:../Sources/ff10b/src/ff.c **** 	} else {
4403:../Sources/ff10b/src/ff.c **** 		if (c < 0x800) {		/* 11-bit */
4404:../Sources/ff10b/src/ff.c **** 			pb->buf[i++] = (BYTE)(0xC0 | c >> 6);
4405:../Sources/ff10b/src/ff.c **** 		} else {				/* 16-bit */
4406:../Sources/ff10b/src/ff.c **** 			pb->buf[i++] = (BYTE)(0xE0 | c >> 12);
4407:../Sources/ff10b/src/ff.c **** 			pb->buf[i++] = (BYTE)(0x80 | (c >> 6 & 0x3F));
4408:../Sources/ff10b/src/ff.c **** 		}
4409:../Sources/ff10b/src/ff.c **** 		pb->buf[i++] = (BYTE)(0x80 | (c & 0x3F));
4410:../Sources/ff10b/src/ff.c **** 	}
4411:../Sources/ff10b/src/ff.c **** #elif _STRF_ENCODE == 2			/* Write a character in UTF-16BE */
4412:../Sources/ff10b/src/ff.c **** 	pb->buf[i++] = (BYTE)(c >> 8);
4413:../Sources/ff10b/src/ff.c **** 	pb->buf[i++] = (BYTE)c;
4414:../Sources/ff10b/src/ff.c **** #elif _STRF_ENCODE == 1			/* Write a character in UTF-16LE */
4415:../Sources/ff10b/src/ff.c **** 	pb->buf[i++] = (BYTE)c;
4416:../Sources/ff10b/src/ff.c **** 	pb->buf[i++] = (BYTE)(c >> 8);
4417:../Sources/ff10b/src/ff.c **** #else							/* Write a character in ANSI/OEM */
4418:../Sources/ff10b/src/ff.c **** 	c = ff_convert(c, 0);	/* Unicode -> OEM */
4419:../Sources/ff10b/src/ff.c **** 	if (!c) c = '?';
4420:../Sources/ff10b/src/ff.c **** 	if (c >= 0x100)
4421:../Sources/ff10b/src/ff.c **** 		pb->buf[i++] = (BYTE)(c >> 8);
4422:../Sources/ff10b/src/ff.c **** 	pb->buf[i++] = (BYTE)c;
4423:../Sources/ff10b/src/ff.c **** #endif
4424:../Sources/ff10b/src/ff.c **** #else							/* Write a character without conversion */
4425:../Sources/ff10b/src/ff.c **** 	pb->buf[i++] = (BYTE)c;
 8475              		.loc 1 4425 0
 8476 380c 7A68     		ldr	r2, [r7, #4]
 8477 380e FB68     		ldr	r3, [r7, #12]
 8478 3810 D318     		adds	r3, r2, r3
 8479 3812 03F10803 		add	r3, r3, #8
 8480 3816 FA78     		ldrb	r2, [r7, #3]
 8481 3818 1A71     		strb	r2, [r3, #4]
 8482 381a FB68     		ldr	r3, [r7, #12]
 8483 381c 03F10103 		add	r3, r3, #1
 8484 3820 FB60     		str	r3, [r7, #12]
4426:../Sources/ff10b/src/ff.c **** #endif
4427:../Sources/ff10b/src/ff.c **** 
4428:../Sources/ff10b/src/ff.c **** 	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8485              		.loc 1 4428 0
 8486 3822 FB68     		ldr	r3, [r7, #12]
 8487 3824 3C2B     		cmp	r3, #60
 8488 3826 13DD     		ble	.L514
4429:../Sources/ff10b/src/ff.c **** 		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8489              		.loc 1 4429 0
 8490 3828 7B68     		ldr	r3, [r7, #4]
 8491 382a 1868     		ldr	r0, [r3, #0]
 8492 382c 7B68     		ldr	r3, [r7, #4]
 8493 382e 03F10C01 		add	r1, r3, #12
 8494 3832 FA68     		ldr	r2, [r7, #12]
 8495 3834 07F10803 		add	r3, r7, #8
 8496 3838 FFF7FEFF 		bl	f_write
4430:../Sources/ff10b/src/ff.c **** 		i = (bw == (UINT)i) ? 0 : -1;
 8497              		.loc 1 4430 0
 8498 383c FA68     		ldr	r2, [r7, #12]
 8499 383e BB68     		ldr	r3, [r7, #8]
 8500 3840 9A42     		cmp	r2, r3
 8501 3842 02D1     		bne	.L515
 8502              		.loc 1 4430 0 is_stmt 0 discriminator 1
 8503 3844 4FF00003 		mov	r3, #0
 8504 3848 01E0     		b	.L516
 8505              	.L515:
 8506              		.loc 1 4430 0 discriminator 2
 8507 384a 4FF0FF33 		mov	r3, #-1
 8508              	.L516:
 8509              		.loc 1 4430 0 discriminator 3
 8510 384e FB60     		str	r3, [r7, #12]
 8511              	.L514:
4431:../Sources/ff10b/src/ff.c **** 	}
4432:../Sources/ff10b/src/ff.c **** 	pb->idx = i;
 8512              		.loc 1 4432 0 is_stmt 1
 8513 3850 7B68     		ldr	r3, [r7, #4]
 8514 3852 FA68     		ldr	r2, [r7, #12]
 8515 3854 5A60     		str	r2, [r3, #4]
4433:../Sources/ff10b/src/ff.c **** 	pb->nchr++;
 8516              		.loc 1 4433 0
 8517 3856 7B68     		ldr	r3, [r7, #4]
 8518 3858 9B68     		ldr	r3, [r3, #8]
 8519 385a 03F10102 		add	r2, r3, #1
 8520 385e 7B68     		ldr	r3, [r7, #4]
 8521 3860 9A60     		str	r2, [r3, #8]
 8522              	.L512:
4434:../Sources/ff10b/src/ff.c **** }
 8523              		.loc 1 4434 0
 8524 3862 07F11007 		add	r7, r7, #16
 8525 3866 BD46     		mov	sp, r7
 8526 3868 80BD     		pop	{r7, pc}
 8527              		.cfi_endproc
 8528              	.LFE48:
 8530 386a 00BF     		.align	2
 8531              		.global	f_putc
 8532              		.thumb
 8533              		.thumb_func
 8535              	f_putc:
 8536              	.LFB49:
4435:../Sources/ff10b/src/ff.c **** 
4436:../Sources/ff10b/src/ff.c **** 
4437:../Sources/ff10b/src/ff.c **** 
4438:../Sources/ff10b/src/ff.c **** int f_putc (
4439:../Sources/ff10b/src/ff.c **** 	TCHAR c,	/* A character to be output */
4440:../Sources/ff10b/src/ff.c **** 	FIL* fp		/* Pointer to the file object */
4441:../Sources/ff10b/src/ff.c **** )
4442:../Sources/ff10b/src/ff.c **** {
 8537              		.loc 1 4442 0
 8538              		.cfi_startproc
 8539              		@ args = 0, pretend = 0, frame = 88
 8540              		@ frame_needed = 1, uses_anonymous_args = 0
 8541 386c 80B5     		push	{r7, lr}
 8542              	.LCFI146:
 8543              		.cfi_def_cfa_offset 8
 8544              		.cfi_offset 7, -8
 8545              		.cfi_offset 14, -4
 8546 386e 96B0     		sub	sp, sp, #88
 8547              	.LCFI147:
 8548              		.cfi_def_cfa_offset 96
 8549 3870 00AF     		add	r7, sp, #0
 8550              	.LCFI148:
 8551              		.cfi_def_cfa_register 7
 8552 3872 0346     		mov	r3, r0
 8553 3874 3960     		str	r1, [r7, #0]
 8554 3876 FB71     		strb	r3, [r7, #7]
4443:../Sources/ff10b/src/ff.c **** 	putbuff pb;
4444:../Sources/ff10b/src/ff.c **** 	UINT nw;
4445:../Sources/ff10b/src/ff.c **** 
4446:../Sources/ff10b/src/ff.c **** 
4447:../Sources/ff10b/src/ff.c **** 	pb.fp = fp;			/* Initialize output buffer */
 8555              		.loc 1 4447 0
 8556 3878 3B68     		ldr	r3, [r7, #0]
 8557 387a FB60     		str	r3, [r7, #12]
4448:../Sources/ff10b/src/ff.c **** 	pb.nchr = pb.idx = 0;
 8558              		.loc 1 4448 0
 8559 387c 4FF00003 		mov	r3, #0
 8560 3880 3B61     		str	r3, [r7, #16]
 8561 3882 3B69     		ldr	r3, [r7, #16]
 8562 3884 7B61     		str	r3, [r7, #20]
4449:../Sources/ff10b/src/ff.c **** 
4450:../Sources/ff10b/src/ff.c **** 	putc_bfd(&pb, c);	/* Put a character */
 8563              		.loc 1 4450 0
 8564 3886 07F10C02 		add	r2, r7, #12
 8565 388a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8566 388c 1046     		mov	r0, r2
 8567 388e 1946     		mov	r1, r3
 8568 3890 FFF7B0FF 		bl	putc_bfd
4451:../Sources/ff10b/src/ff.c **** 
4452:../Sources/ff10b/src/ff.c **** 	if (   pb.idx >= 0	/* Flush buffered characters to the file */
 8569              		.loc 1 4452 0
 8570 3894 3B69     		ldr	r3, [r7, #16]
 8571 3896 002B     		cmp	r3, #0
 8572 3898 14DB     		blt	.L519
4453:../Sources/ff10b/src/ff.c **** 		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8573              		.loc 1 4453 0
 8574 389a F868     		ldr	r0, [r7, #12]
 8575 389c 3B69     		ldr	r3, [r7, #16]
 8576 389e 1A46     		mov	r2, r3
 8577 38a0 07F10C03 		add	r3, r7, #12
 8578 38a4 03F10C01 		add	r1, r3, #12
 8579 38a8 07F10803 		add	r3, r7, #8
 8580 38ac FFF7FEFF 		bl	f_write
 8581 38b0 0346     		mov	r3, r0
 8582 38b2 002B     		cmp	r3, #0
 8583 38b4 06D1     		bne	.L519
4454:../Sources/ff10b/src/ff.c **** 		&& (UINT)pb.idx == nw) return pb.nchr;
 8584              		.loc 1 4454 0
 8585 38b6 3B69     		ldr	r3, [r7, #16]
 8586 38b8 1A46     		mov	r2, r3
 8587 38ba BB68     		ldr	r3, [r7, #8]
 8588 38bc 9A42     		cmp	r2, r3
 8589 38be 01D1     		bne	.L519
 8590              		.loc 1 4454 0 is_stmt 0 discriminator 1
 8591 38c0 7B69     		ldr	r3, [r7, #20]
 8592 38c2 01E0     		b	.L521
 8593              	.L519:
4455:../Sources/ff10b/src/ff.c **** 	return EOF;
 8594              		.loc 1 4455 0 is_stmt 1
 8595 38c4 4FF0FF33 		mov	r3, #-1
 8596              	.L521:
4456:../Sources/ff10b/src/ff.c **** }
 8597              		.loc 1 4456 0
 8598 38c8 1846     		mov	r0, r3
 8599 38ca 07F15807 		add	r7, r7, #88
 8600 38ce BD46     		mov	sp, r7
 8601 38d0 80BD     		pop	{r7, pc}
 8602              		.cfi_endproc
 8603              	.LFE49:
 8605 38d2 00BF     		.align	2
 8606              		.global	f_puts
 8607              		.thumb
 8608              		.thumb_func
 8610              	f_puts:
 8611              	.LFB50:
4457:../Sources/ff10b/src/ff.c **** 
4458:../Sources/ff10b/src/ff.c **** 
4459:../Sources/ff10b/src/ff.c **** 
4460:../Sources/ff10b/src/ff.c **** 
4461:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
4462:../Sources/ff10b/src/ff.c **** /* Put a string to the file                                              */
4463:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
4464:../Sources/ff10b/src/ff.c **** 
4465:../Sources/ff10b/src/ff.c **** int f_puts (
4466:../Sources/ff10b/src/ff.c **** 	const TCHAR* str,	/* Pointer to the string to be output */
4467:../Sources/ff10b/src/ff.c **** 	FIL* fp				/* Pointer to the file object */
4468:../Sources/ff10b/src/ff.c **** )
4469:../Sources/ff10b/src/ff.c **** {
 8612              		.loc 1 4469 0
 8613              		.cfi_startproc
 8614              		@ args = 0, pretend = 0, frame = 88
 8615              		@ frame_needed = 1, uses_anonymous_args = 0
 8616 38d4 80B5     		push	{r7, lr}
 8617              	.LCFI149:
 8618              		.cfi_def_cfa_offset 8
 8619              		.cfi_offset 7, -8
 8620              		.cfi_offset 14, -4
 8621 38d6 96B0     		sub	sp, sp, #88
 8622              	.LCFI150:
 8623              		.cfi_def_cfa_offset 96
 8624 38d8 00AF     		add	r7, sp, #0
 8625              	.LCFI151:
 8626              		.cfi_def_cfa_register 7
 8627 38da 7860     		str	r0, [r7, #4]
 8628 38dc 3960     		str	r1, [r7, #0]
4470:../Sources/ff10b/src/ff.c **** 	putbuff pb;
4471:../Sources/ff10b/src/ff.c **** 	UINT nw;
4472:../Sources/ff10b/src/ff.c **** 
4473:../Sources/ff10b/src/ff.c **** 
4474:../Sources/ff10b/src/ff.c **** 	pb.fp = fp;				/* Initialize output buffer */
 8629              		.loc 1 4474 0
 8630 38de 3B68     		ldr	r3, [r7, #0]
 8631 38e0 FB60     		str	r3, [r7, #12]
4475:../Sources/ff10b/src/ff.c **** 	pb.nchr = pb.idx = 0;
 8632              		.loc 1 4475 0
 8633 38e2 4FF00003 		mov	r3, #0
 8634 38e6 3B61     		str	r3, [r7, #16]
 8635 38e8 3B69     		ldr	r3, [r7, #16]
 8636 38ea 7B61     		str	r3, [r7, #20]
4476:../Sources/ff10b/src/ff.c **** 
4477:../Sources/ff10b/src/ff.c **** 	while (*str)			/* Put the string */
 8637              		.loc 1 4477 0
 8638 38ec 0BE0     		b	.L523
 8639              	.L524:
4478:../Sources/ff10b/src/ff.c **** 		putc_bfd(&pb, *str++);
 8640              		.loc 1 4478 0
 8641 38ee 7B68     		ldr	r3, [r7, #4]
 8642 38f0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 8643 38f2 7A68     		ldr	r2, [r7, #4]
 8644 38f4 02F10102 		add	r2, r2, #1
 8645 38f8 7A60     		str	r2, [r7, #4]
 8646 38fa 07F10C02 		add	r2, r7, #12
 8647 38fe 1046     		mov	r0, r2
 8648 3900 1946     		mov	r1, r3
 8649 3902 FFF777FF 		bl	putc_bfd
 8650              	.L523:
4477:../Sources/ff10b/src/ff.c **** 	while (*str)			/* Put the string */
 8651              		.loc 1 4477 0 discriminator 1
 8652 3906 7B68     		ldr	r3, [r7, #4]
 8653 3908 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 8654 390a 002B     		cmp	r3, #0
 8655 390c EFD1     		bne	.L524
4479:../Sources/ff10b/src/ff.c **** 
4480:../Sources/ff10b/src/ff.c **** 	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8656              		.loc 1 4480 0
 8657 390e 3B69     		ldr	r3, [r7, #16]
 8658 3910 002B     		cmp	r3, #0
 8659 3912 14DB     		blt	.L525
4481:../Sources/ff10b/src/ff.c **** 		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8660              		.loc 1 4481 0
 8661 3914 F868     		ldr	r0, [r7, #12]
 8662 3916 3B69     		ldr	r3, [r7, #16]
 8663 3918 1A46     		mov	r2, r3
 8664 391a 07F10C03 		add	r3, r7, #12
 8665 391e 03F10C01 		add	r1, r3, #12
 8666 3922 07F10803 		add	r3, r7, #8
 8667 3926 FFF7FEFF 		bl	f_write
 8668 392a 0346     		mov	r3, r0
 8669 392c 002B     		cmp	r3, #0
 8670 392e 06D1     		bne	.L525
4482:../Sources/ff10b/src/ff.c **** 		&& (UINT)pb.idx == nw) return pb.nchr;
 8671              		.loc 1 4482 0
 8672 3930 3B69     		ldr	r3, [r7, #16]
 8673 3932 1A46     		mov	r2, r3
 8674 3934 BB68     		ldr	r3, [r7, #8]
 8675 3936 9A42     		cmp	r2, r3
 8676 3938 01D1     		bne	.L525
 8677              		.loc 1 4482 0 is_stmt 0 discriminator 1
 8678 393a 7B69     		ldr	r3, [r7, #20]
 8679 393c 01E0     		b	.L527
 8680              	.L525:
4483:../Sources/ff10b/src/ff.c **** 	return EOF;
 8681              		.loc 1 4483 0 is_stmt 1
 8682 393e 4FF0FF33 		mov	r3, #-1
 8683              	.L527:
4484:../Sources/ff10b/src/ff.c **** }
 8684              		.loc 1 4484 0
 8685 3942 1846     		mov	r0, r3
 8686 3944 07F15807 		add	r7, r7, #88
 8687 3948 BD46     		mov	sp, r7
 8688 394a 80BD     		pop	{r7, pc}
 8689              		.cfi_endproc
 8690              	.LFE50:
 8692              		.align	2
 8693              		.global	f_printf
 8694              		.thumb
 8695              		.thumb_func
 8697              	f_printf:
 8698              	.LFB51:
4485:../Sources/ff10b/src/ff.c **** 
4486:../Sources/ff10b/src/ff.c **** 
4487:../Sources/ff10b/src/ff.c **** 
4488:../Sources/ff10b/src/ff.c **** 
4489:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
4490:../Sources/ff10b/src/ff.c **** /* Put a formatted string to the file                                    */
4491:../Sources/ff10b/src/ff.c **** /*-----------------------------------------------------------------------*/
4492:../Sources/ff10b/src/ff.c **** 
4493:../Sources/ff10b/src/ff.c **** int f_printf (
4494:../Sources/ff10b/src/ff.c **** 	FIL* fp,			/* Pointer to the file object */
4495:../Sources/ff10b/src/ff.c **** 	const TCHAR* fmt,	/* Pointer to the format string */
4496:../Sources/ff10b/src/ff.c **** 	...					/* Optional arguments... */
4497:../Sources/ff10b/src/ff.c **** )
4498:../Sources/ff10b/src/ff.c **** {
 8699              		.loc 1 4498 0
 8700              		.cfi_startproc
 8701              		@ args = 4, pretend = 12, frame = 136
 8702              		@ frame_needed = 1, uses_anonymous_args = 1
 8703 394c 0EB4     		push	{r1, r2, r3}
 8704              	.LCFI152:
 8705              		.cfi_def_cfa_offset 12
 8706              		.cfi_offset 1, -12
 8707              		.cfi_offset 2, -8
 8708              		.cfi_offset 3, -4
 8709 394e 80B5     		push	{r7, lr}
 8710              	.LCFI153:
 8711              		.cfi_def_cfa_offset 20
 8712              		.cfi_offset 7, -20
 8713              		.cfi_offset 14, -16
 8714 3950 A3B0     		sub	sp, sp, #140
 8715              	.LCFI154:
 8716              		.cfi_def_cfa_offset 160
 8717 3952 00AF     		add	r7, sp, #0
 8718              	.LCFI155:
 8719              		.cfi_def_cfa_register 7
 8720 3954 7860     		str	r0, [r7, #4]
4499:../Sources/ff10b/src/ff.c **** 	va_list arp;
4500:../Sources/ff10b/src/ff.c **** 	BYTE f, r;
4501:../Sources/ff10b/src/ff.c **** 	UINT nw, i, j, w;
4502:../Sources/ff10b/src/ff.c **** 	DWORD v;
4503:../Sources/ff10b/src/ff.c **** 	TCHAR c, d, s[16], *p;
4504:../Sources/ff10b/src/ff.c **** 	putbuff pb;
4505:../Sources/ff10b/src/ff.c **** 
4506:../Sources/ff10b/src/ff.c **** 
4507:../Sources/ff10b/src/ff.c **** 	pb.fp = fp;				/* Initialize output buffer */
 8721              		.loc 1 4507 0
 8722 3956 7B68     		ldr	r3, [r7, #4]
 8723 3958 BB60     		str	r3, [r7, #8]
4508:../Sources/ff10b/src/ff.c **** 	pb.nchr = pb.idx = 0;
 8724              		.loc 1 4508 0
 8725 395a 4FF00003 		mov	r3, #0
 8726 395e FB60     		str	r3, [r7, #12]
 8727 3960 FB68     		ldr	r3, [r7, #12]
 8728 3962 3B61     		str	r3, [r7, #16]
4509:../Sources/ff10b/src/ff.c **** 
4510:../Sources/ff10b/src/ff.c **** 	va_start(arp, fmt);
 8729              		.loc 1 4510 0
 8730 3964 07F19803 		add	r3, r7, #152
 8731 3968 BB66     		str	r3, [r7, #104]
 8732              	.L578:
4511:../Sources/ff10b/src/ff.c **** 
4512:../Sources/ff10b/src/ff.c **** 	for (;;) {
4513:../Sources/ff10b/src/ff.c **** 		c = *fmt++;
 8733              		.loc 1 4513 0
 8734 396a D7F89430 		ldr	r3, [r7, #148]
 8735 396e 1B78     		ldrb	r3, [r3, #0]
 8736 3970 87F87330 		strb	r3, [r7, #115]
 8737 3974 D7F89430 		ldr	r3, [r7, #148]
 8738 3978 03F10103 		add	r3, r3, #1
 8739 397c C7F89430 		str	r3, [r7, #148]
4514:../Sources/ff10b/src/ff.c **** 		if (c == 0) break;			/* End of string */
 8740              		.loc 1 4514 0
 8741 3980 97F87330 		ldrb	r3, [r7, #115]	@ zero_extendqisi2
 8742 3984 002B     		cmp	r3, #0
 8743 3986 00F02C82 		beq	.L582
 8744              	.L529:
4515:../Sources/ff10b/src/ff.c **** 		if (c != '%') {				/* Non escape character */
 8745              		.loc 1 4515 0
 8746 398a 97F87330 		ldrb	r3, [r7, #115]	@ zero_extendqisi2
 8747 398e 252B     		cmp	r3, #37
 8748 3990 08D0     		beq	.L531
4516:../Sources/ff10b/src/ff.c **** 			putc_bfd(&pb, c);
 8749              		.loc 1 4516 0
 8750 3992 07F10802 		add	r2, r7, #8
 8751 3996 97F87330 		ldrb	r3, [r7, #115]	@ zero_extendqisi2
 8752 399a 1046     		mov	r0, r2
 8753 399c 1946     		mov	r1, r3
 8754 399e FFF729FF 		bl	putc_bfd
4517:../Sources/ff10b/src/ff.c **** 			continue;
 8755              		.loc 1 4517 0
 8756 39a2 1DE2     		b	.L532
 8757              	.L531:
4518:../Sources/ff10b/src/ff.c **** 		}
4519:../Sources/ff10b/src/ff.c **** 		w = f = 0;
 8758              		.loc 1 4519 0
 8759 39a4 4FF00003 		mov	r3, #0
 8760 39a8 87F88730 		strb	r3, [r7, #135]
 8761 39ac 4FF00003 		mov	r3, #0
 8762 39b0 BB67     		str	r3, [r7, #120]
4520:../Sources/ff10b/src/ff.c **** 		c = *fmt++;
 8763              		.loc 1 4520 0
 8764 39b2 D7F89430 		ldr	r3, [r7, #148]
 8765 39b6 1B78     		ldrb	r3, [r3, #0]
 8766 39b8 87F87330 		strb	r3, [r7, #115]
 8767 39bc D7F89430 		ldr	r3, [r7, #148]
 8768 39c0 03F10103 		add	r3, r3, #1
 8769 39c4 C7F89430 		str	r3, [r7, #148]
4521:../Sources/ff10b/src/ff.c **** 		if (c == '0') {				/* Flag: '0' padding */
 8770              		.loc 1 4521 0
 8771 39c8 97F87330 		ldrb	r3, [r7, #115]	@ zero_extendqisi2
 8772 39cc 302B     		cmp	r3, #48
 8773 39ce 0FD1     		bne	.L533
4522:../Sources/ff10b/src/ff.c **** 			f = 1; c = *fmt++;
 8774              		.loc 1 4522 0
 8775 39d0 4FF00103 		mov	r3, #1
 8776 39d4 87F88730 		strb	r3, [r7, #135]
 8777 39d8 D7F89430 		ldr	r3, [r7, #148]
 8778 39dc 1B78     		ldrb	r3, [r3, #0]
 8779 39de 87F87330 		strb	r3, [r7, #115]
 8780 39e2 D7F89430 		ldr	r3, [r7, #148]
 8781 39e6 03F10103 		add	r3, r3, #1
 8782 39ea C7F89430 		str	r3, [r7, #148]
4523:../Sources/ff10b/src/ff.c **** 		} else {
4524:../Sources/ff10b/src/ff.c **** 			if (c == '-') {			/* Flag: left justified */
4525:../Sources/ff10b/src/ff.c **** 				f = 2; c = *fmt++;
4526:../Sources/ff10b/src/ff.c **** 			}
4527:../Sources/ff10b/src/ff.c **** 		}
4528:../Sources/ff10b/src/ff.c **** 		while (IsDigit(c)) {		/* Precision */
 8783              		.loc 1 4528 0
 8784 39ee 2CE0     		b	.L535
 8785              	.L533:
4524:../Sources/ff10b/src/ff.c **** 			if (c == '-') {			/* Flag: left justified */
 8786              		.loc 1 4524 0
 8787 39f0 97F87330 		ldrb	r3, [r7, #115]	@ zero_extendqisi2
 8788 39f4 2D2B     		cmp	r3, #45
 8789 39f6 28D1     		bne	.L535
4525:../Sources/ff10b/src/ff.c **** 				f = 2; c = *fmt++;
 8790              		.loc 1 4525 0
 8791 39f8 4FF00203 		mov	r3, #2
 8792 39fc 87F88730 		strb	r3, [r7, #135]
 8793 3a00 D7F89430 		ldr	r3, [r7, #148]
 8794 3a04 1B78     		ldrb	r3, [r3, #0]
 8795 3a06 87F87330 		strb	r3, [r7, #115]
 8796 3a0a D7F89430 		ldr	r3, [r7, #148]
 8797 3a0e 03F10103 		add	r3, r3, #1
 8798 3a12 C7F89430 		str	r3, [r7, #148]
 8799              		.loc 1 4528 0
 8800 3a16 18E0     		b	.L535
 8801              	.L537:
4529:../Sources/ff10b/src/ff.c **** 			w = w * 10 + c - '0';
 8802              		.loc 1 4529 0
 8803 3a18 BA6F     		ldr	r2, [r7, #120]
 8804 3a1a 1346     		mov	r3, r2
 8805 3a1c 4FEA8303 		lsl	r3, r3, #2
 8806 3a20 9B18     		adds	r3, r3, r2
 8807 3a22 4FEA4303 		lsl	r3, r3, #1
 8808 3a26 1A46     		mov	r2, r3
 8809 3a28 97F87330 		ldrb	r3, [r7, #115]	@ zero_extendqisi2
 8810 3a2c D318     		adds	r3, r2, r3
 8811 3a2e A3F13003 		sub	r3, r3, #48
 8812 3a32 BB67     		str	r3, [r7, #120]
4530:../Sources/ff10b/src/ff.c **** 			c = *fmt++;
 8813              		.loc 1 4530 0
 8814 3a34 D7F89430 		ldr	r3, [r7, #148]
 8815 3a38 1B78     		ldrb	r3, [r3, #0]
 8816 3a3a 87F87330 		strb	r3, [r7, #115]
 8817 3a3e D7F89430 		ldr	r3, [r7, #148]
 8818 3a42 03F10103 		add	r3, r3, #1
 8819 3a46 C7F89430 		str	r3, [r7, #148]
 8820              	.L535:
4528:../Sources/ff10b/src/ff.c **** 		while (IsDigit(c)) {		/* Precision */
 8821              		.loc 1 4528 0 discriminator 1
 8822 3a4a 97F87330 		ldrb	r3, [r7, #115]	@ zero_extendqisi2
 8823 3a4e 2F2B     		cmp	r3, #47
 8824 3a50 03D9     		bls	.L536
4528:../Sources/ff10b/src/ff.c **** 		while (IsDigit(c)) {		/* Precision */
 8825              		.loc 1 4528 0 is_stmt 0 discriminator 2
 8826 3a52 97F87330 		ldrb	r3, [r7, #115]	@ zero_extendqisi2
 8827 3a56 392B     		cmp	r3, #57
 8828 3a58 DED9     		bls	.L537
 8829              	.L536:
4531:../Sources/ff10b/src/ff.c **** 		}
4532:../Sources/ff10b/src/ff.c **** 		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8830              		.loc 1 4532 0 is_stmt 1
 8831 3a5a 97F87330 		ldrb	r3, [r7, #115]	@ zero_extendqisi2
 8832 3a5e 6C2B     		cmp	r3, #108
 8833 3a60 03D0     		beq	.L538
 8834              		.loc 1 4532 0 is_stmt 0 discriminator 1
 8835 3a62 97F87330 		ldrb	r3, [r7, #115]	@ zero_extendqisi2
 8836 3a66 4C2B     		cmp	r3, #76
 8837 3a68 10D1     		bne	.L539
 8838              	.L538:
4533:../Sources/ff10b/src/ff.c **** 			f |= 4; c = *fmt++;
 8839              		.loc 1 4533 0 is_stmt 1
 8840 3a6a 97F88730 		ldrb	r3, [r7, #135]
 8841 3a6e 43F00403 		orr	r3, r3, #4
 8842 3a72 87F88730 		strb	r3, [r7, #135]
 8843 3a76 D7F89430 		ldr	r3, [r7, #148]
 8844 3a7a 1B78     		ldrb	r3, [r3, #0]
 8845 3a7c 87F87330 		strb	r3, [r7, #115]
 8846 3a80 D7F89430 		ldr	r3, [r7, #148]
 8847 3a84 03F10103 		add	r3, r3, #1
 8848 3a88 C7F89430 		str	r3, [r7, #148]
 8849              	.L539:
4534:../Sources/ff10b/src/ff.c **** 		}
4535:../Sources/ff10b/src/ff.c **** 		if (!c) break;
 8850              		.loc 1 4535 0
 8851 3a8c 97F87330 		ldrb	r3, [r7, #115]	@ zero_extendqisi2
 8852 3a90 002B     		cmp	r3, #0
 8853 3a92 00F0A881 		beq	.L583
 8854              	.L540:
4536:../Sources/ff10b/src/ff.c **** 		d = c;
 8855              		.loc 1 4536 0
 8856 3a96 97F87330 		ldrb	r3, [r7, #115]
 8857 3a9a 87F87230 		strb	r3, [r7, #114]
4537:../Sources/ff10b/src/ff.c **** 		if (IsLower(d)) d -= 0x20;
 8858              		.loc 1 4537 0
 8859 3a9e 97F87230 		ldrb	r3, [r7, #114]	@ zero_extendqisi2
 8860 3aa2 602B     		cmp	r3, #96
 8861 3aa4 09D9     		bls	.L541
 8862              		.loc 1 4537 0 is_stmt 0 discriminator 1
 8863 3aa6 97F87230 		ldrb	r3, [r7, #114]	@ zero_extendqisi2
 8864 3aaa 7A2B     		cmp	r3, #122
 8865 3aac 05D8     		bhi	.L541
 8866 3aae 97F87230 		ldrb	r3, [r7, #114]
 8867 3ab2 A3F12003 		sub	r3, r3, #32
 8868 3ab6 87F87230 		strb	r3, [r7, #114]
 8869              	.L541:
4538:../Sources/ff10b/src/ff.c **** 		switch (d) {				/* Type is... */
 8870              		.loc 1 4538 0 is_stmt 1
 8871 3aba 97F87230 		ldrb	r3, [r7, #114]	@ zero_extendqisi2
 8872 3abe A3F14203 		sub	r3, r3, #66
 8873 3ac2 162B     		cmp	r3, #22
 8874 3ac4 00F2AB80 		bhi	.L542
 8875 3ac8 01A2     		adr	r2, .L549
 8876 3aca 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 8877 3ace 00BF     		.align	2
 8878              	.L549:
 8879 3ad0 F73B0000 		.word	.L543+1
 8880 3ad4 DD3B0000 		.word	.L544+1
 8881 3ad8 0B3C0000 		.word	.L545+1
 8882 3adc 1F3C0000 		.word	.L542+1
 8883 3ae0 1F3C0000 		.word	.L542+1
 8884 3ae4 1F3C0000 		.word	.L542+1
 8885 3ae8 1F3C0000 		.word	.L542+1
 8886 3aec 1F3C0000 		.word	.L542+1
 8887 3af0 1F3C0000 		.word	.L542+1
 8888 3af4 1F3C0000 		.word	.L542+1
 8889 3af8 1F3C0000 		.word	.L542+1
 8890 3afc 1F3C0000 		.word	.L542+1
 8891 3b00 1F3C0000 		.word	.L542+1
 8892 3b04 013C0000 		.word	.L546+1
 8893 3b08 1F3C0000 		.word	.L542+1
 8894 3b0c 1F3C0000 		.word	.L542+1
 8895 3b10 1F3C0000 		.word	.L542+1
 8896 3b14 2D3B0000 		.word	.L547+1
 8897 3b18 1F3C0000 		.word	.L542+1
 8898 3b1c 0B3C0000 		.word	.L545+1
 8899 3b20 1F3C0000 		.word	.L542+1
 8900 3b24 1F3C0000 		.word	.L542+1
 8901 3b28 153C0000 		.word	.L548+1
 8902              	.L547:
4539:../Sources/ff10b/src/ff.c **** 		case 'S' :					/* String */
4540:../Sources/ff10b/src/ff.c **** 			p = va_arg(arp, TCHAR*);
 8903              		.loc 1 4540 0
 8904 3b2c BB6E     		ldr	r3, [r7, #104]
 8905 3b2e 03F10402 		add	r2, r3, #4
 8906 3b32 BA66     		str	r2, [r7, #104]
 8907 3b34 1B68     		ldr	r3, [r3, #0]
 8908 3b36 FB66     		str	r3, [r7, #108]
4541:../Sources/ff10b/src/ff.c **** 			for (j = 0; p[j]; j++) ;
 8909              		.loc 1 4541 0
 8910 3b38 4FF00003 		mov	r3, #0
 8911 3b3c FB67     		str	r3, [r7, #124]
 8912 3b3e 03E0     		b	.L550
 8913              	.L551:
 8914              		.loc 1 4541 0 is_stmt 0 discriminator 2
 8915 3b40 FB6F     		ldr	r3, [r7, #124]
 8916 3b42 03F10103 		add	r3, r3, #1
 8917 3b46 FB67     		str	r3, [r7, #124]
 8918              	.L550:
 8919              		.loc 1 4541 0 discriminator 1
 8920 3b48 FA6E     		ldr	r2, [r7, #108]
 8921 3b4a FB6F     		ldr	r3, [r7, #124]
 8922 3b4c D318     		adds	r3, r2, r3
 8923 3b4e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 8924 3b50 002B     		cmp	r3, #0
 8925 3b52 F5D1     		bne	.L551
4542:../Sources/ff10b/src/ff.c **** 			if (!(f & 2)) {
 8926              		.loc 1 4542 0 is_stmt 1
 8927 3b54 97F88730 		ldrb	r3, [r7, #135]	@ zero_extendqisi2
 8928 3b58 03F00203 		and	r3, r3, #2
 8929 3b5c 002B     		cmp	r3, #0
 8930 3b5e 22D1     		bne	.L584
4543:../Sources/ff10b/src/ff.c **** 				while (j++ < w) putc_bfd(&pb, ' ');
 8931              		.loc 1 4543 0
 8932 3b60 06E0     		b	.L553
 8933              	.L554:
 8934              		.loc 1 4543 0 is_stmt 0 discriminator 2
 8935 3b62 07F10803 		add	r3, r7, #8
 8936 3b66 1846     		mov	r0, r3
 8937 3b68 4FF02001 		mov	r1, #32
 8938 3b6c FFF742FE 		bl	putc_bfd
 8939              	.L553:
 8940              		.loc 1 4543 0 discriminator 1
 8941 3b70 FA6F     		ldr	r2, [r7, #124]
 8942 3b72 BB6F     		ldr	r3, [r7, #120]
 8943 3b74 9A42     		cmp	r2, r3
 8944 3b76 2CBF     		ite	cs
 8945 3b78 0023     		movcs	r3, #0
 8946 3b7a 0123     		movcc	r3, #1
 8947 3b7c DBB2     		uxtb	r3, r3
 8948 3b7e FA6F     		ldr	r2, [r7, #124]
 8949 3b80 02F10102 		add	r2, r2, #1
 8950 3b84 FA67     		str	r2, [r7, #124]
 8951 3b86 002B     		cmp	r3, #0
 8952 3b88 EBD1     		bne	.L554
4544:../Sources/ff10b/src/ff.c **** 			}
4545:../Sources/ff10b/src/ff.c **** 			while (*p) putc_bfd(&pb, *p++);
 8953              		.loc 1 4545 0 is_stmt 1
 8954 3b8a 0CE0     		b	.L584
 8955              	.L556:
 8956              		.loc 1 4545 0 is_stmt 0 discriminator 2
 8957 3b8c FB6E     		ldr	r3, [r7, #108]
 8958 3b8e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 8959 3b90 FA6E     		ldr	r2, [r7, #108]
 8960 3b92 02F10102 		add	r2, r2, #1
 8961 3b96 FA66     		str	r2, [r7, #108]
 8962 3b98 07F10802 		add	r2, r7, #8
 8963 3b9c 1046     		mov	r0, r2
 8964 3b9e 1946     		mov	r1, r3
 8965 3ba0 FFF728FE 		bl	putc_bfd
 8966 3ba4 00E0     		b	.L555
 8967              	.L584:
 8968              		.loc 1 4545 0
 8969 3ba6 00BF     		nop
 8970              	.L555:
 8971              		.loc 1 4545 0 discriminator 1
 8972 3ba8 FB6E     		ldr	r3, [r7, #108]
 8973 3baa 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 8974 3bac 002B     		cmp	r3, #0
 8975 3bae EDD1     		bne	.L556
4546:../Sources/ff10b/src/ff.c **** 			while (j++ < w) putc_bfd(&pb, ' ');
 8976              		.loc 1 4546 0 is_stmt 1
 8977 3bb0 06E0     		b	.L557
 8978              	.L558:
 8979              		.loc 1 4546 0 is_stmt 0 discriminator 2
 8980 3bb2 07F10803 		add	r3, r7, #8
 8981 3bb6 1846     		mov	r0, r3
 8982 3bb8 4FF02001 		mov	r1, #32
 8983 3bbc FFF71AFE 		bl	putc_bfd
 8984              	.L557:
 8985              		.loc 1 4546 0 discriminator 1
 8986 3bc0 FA6F     		ldr	r2, [r7, #124]
 8987 3bc2 BB6F     		ldr	r3, [r7, #120]
 8988 3bc4 9A42     		cmp	r2, r3
 8989 3bc6 2CBF     		ite	cs
 8990 3bc8 0023     		movcs	r3, #0
 8991 3bca 0123     		movcc	r3, #1
 8992 3bcc DBB2     		uxtb	r3, r3
 8993 3bce FA6F     		ldr	r2, [r7, #124]
 8994 3bd0 02F10102 		add	r2, r2, #1
 8995 3bd4 FA67     		str	r2, [r7, #124]
 8996 3bd6 002B     		cmp	r3, #0
 8997 3bd8 EBD1     		bne	.L558
4547:../Sources/ff10b/src/ff.c **** 			continue;
 8998              		.loc 1 4547 0 is_stmt 1
 8999 3bda 01E1     		b	.L532
 9000              	.L544:
4548:../Sources/ff10b/src/ff.c **** 		case 'C' :					/* Character */
4549:../Sources/ff10b/src/ff.c **** 			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 9001              		.loc 1 4549 0
 9002 3bdc BB6E     		ldr	r3, [r7, #104]
 9003 3bde 03F10402 		add	r2, r3, #4
 9004 3be2 BA66     		str	r2, [r7, #104]
 9005 3be4 1B68     		ldr	r3, [r3, #0]
 9006 3be6 DBB2     		uxtb	r3, r3
 9007 3be8 07F10802 		add	r2, r7, #8
 9008 3bec 1046     		mov	r0, r2
 9009 3bee 1946     		mov	r1, r3
 9010 3bf0 FFF700FE 		bl	putc_bfd
 9011 3bf4 F4E0     		b	.L532
 9012              	.L543:
4550:../Sources/ff10b/src/ff.c **** 		case 'B' :					/* Binary */
4551:../Sources/ff10b/src/ff.c **** 			r = 2; break;
 9013              		.loc 1 4551 0
 9014 3bf6 4FF00203 		mov	r3, #2
 9015 3bfa 87F88630 		strb	r3, [r7, #134]
 9016 3bfe 17E0     		b	.L559
 9017              	.L546:
4552:../Sources/ff10b/src/ff.c **** 		case 'O' :					/* Octal */
4553:../Sources/ff10b/src/ff.c **** 			r = 8; break;
 9018              		.loc 1 4553 0
 9019 3c00 4FF00803 		mov	r3, #8
 9020 3c04 87F88630 		strb	r3, [r7, #134]
 9021 3c08 12E0     		b	.L559
 9022              	.L545:
4554:../Sources/ff10b/src/ff.c **** 		case 'D' :					/* Signed decimal */
4555:../Sources/ff10b/src/ff.c **** 		case 'U' :					/* Unsigned decimal */
4556:../Sources/ff10b/src/ff.c **** 			r = 10; break;
 9023              		.loc 1 4556 0
 9024 3c0a 4FF00A03 		mov	r3, #10
 9025 3c0e 87F88630 		strb	r3, [r7, #134]
 9026 3c12 0DE0     		b	.L559
 9027              	.L548:
4557:../Sources/ff10b/src/ff.c **** 		case 'X' :					/* Hexdecimal */
4558:../Sources/ff10b/src/ff.c **** 			r = 16; break;
 9028              		.loc 1 4558 0
 9029 3c14 4FF01003 		mov	r3, #16
 9030 3c18 87F88630 		strb	r3, [r7, #134]
 9031 3c1c 08E0     		b	.L559
 9032              	.L542:
4559:../Sources/ff10b/src/ff.c **** 		default:					/* Unknown type (pass-through) */
4560:../Sources/ff10b/src/ff.c **** 			putc_bfd(&pb, c); continue;
 9033              		.loc 1 4560 0
 9034 3c1e 07F10802 		add	r2, r7, #8
 9035 3c22 97F87330 		ldrb	r3, [r7, #115]	@ zero_extendqisi2
 9036 3c26 1046     		mov	r0, r2
 9037 3c28 1946     		mov	r1, r3
 9038 3c2a FFF7E3FD 		bl	putc_bfd
 9039 3c2e D7E0     		b	.L532
 9040              	.L559:
4561:../Sources/ff10b/src/ff.c **** 		}
4562:../Sources/ff10b/src/ff.c **** 
4563:../Sources/ff10b/src/ff.c **** 		/* Get an argument and put it in numeral */
4564:../Sources/ff10b/src/ff.c **** 		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_
 9041              		.loc 1 4564 0
 9042 3c30 97F88730 		ldrb	r3, [r7, #135]	@ zero_extendqisi2
 9043 3c34 03F00403 		and	r3, r3, #4
 9044 3c38 002B     		cmp	r3, #0
 9045 3c3a 05D0     		beq	.L560
 9046              		.loc 1 4564 0 is_stmt 0 discriminator 1
 9047 3c3c BB6E     		ldr	r3, [r7, #104]
 9048 3c3e 03F10402 		add	r2, r3, #4
 9049 3c42 BA66     		str	r2, [r7, #104]
 9050 3c44 1B68     		ldr	r3, [r3, #0]
 9051 3c46 0EE0     		b	.L561
 9052              	.L560:
 9053              		.loc 1 4564 0 discriminator 2
 9054 3c48 97F87230 		ldrb	r3, [r7, #114]	@ zero_extendqisi2
 9055 3c4c 442B     		cmp	r3, #68
 9056 3c4e 05D1     		bne	.L562
 9057              		.loc 1 4564 0 discriminator 1
 9058 3c50 BB6E     		ldr	r3, [r7, #104]
 9059 3c52 03F10402 		add	r2, r3, #4
 9060 3c56 BA66     		str	r2, [r7, #104]
 9061 3c58 1B68     		ldr	r3, [r3, #0]
 9062 3c5a 04E0     		b	.L563
 9063              	.L562:
 9064              		.loc 1 4564 0 discriminator 2
 9065 3c5c BB6E     		ldr	r3, [r7, #104]
 9066 3c5e 03F10402 		add	r2, r3, #4
 9067 3c62 BA66     		str	r2, [r7, #104]
 9068 3c64 1B68     		ldr	r3, [r3, #0]
 9069              	.L563:
 9070              	.L561:
 9071              		.loc 1 4564 0 discriminator 3
 9072 3c66 7B67     		str	r3, [r7, #116]
4565:../Sources/ff10b/src/ff.c **** 		if (d == 'D' && (v & 0x80000000)) {
 9073              		.loc 1 4565 0 is_stmt 1 discriminator 3
 9074 3c68 97F87230 		ldrb	r3, [r7, #114]	@ zero_extendqisi2
 9075 3c6c 442B     		cmp	r3, #68
 9076 3c6e 0CD1     		bne	.L564
 9077              		.loc 1 4565 0 is_stmt 0 discriminator 1
 9078 3c70 7B6F     		ldr	r3, [r7, #116]
 9079 3c72 002B     		cmp	r3, #0
 9080 3c74 09DA     		bge	.L564
4566:../Sources/ff10b/src/ff.c **** 			v = 0 - v;
 9081              		.loc 1 4566 0 is_stmt 1
 9082 3c76 7B6F     		ldr	r3, [r7, #116]
 9083 3c78 C3F10003 		rsb	r3, r3, #0
 9084 3c7c 7B67     		str	r3, [r7, #116]
4567:../Sources/ff10b/src/ff.c **** 			f |= 8;
 9085              		.loc 1 4567 0
 9086 3c7e 97F88730 		ldrb	r3, [r7, #135]
 9087 3c82 43F00803 		orr	r3, r3, #8
 9088 3c86 87F88730 		strb	r3, [r7, #135]
 9089              	.L564:
4568:../Sources/ff10b/src/ff.c **** 		}
4569:../Sources/ff10b/src/ff.c **** 		i = 0;
 9090              		.loc 1 4569 0
 9091 3c8a 4FF00003 		mov	r3, #0
 9092 3c8e C7F88030 		str	r3, [r7, #128]
 9093              	.L569:
4570:../Sources/ff10b/src/ff.c **** 		do {
4571:../Sources/ff10b/src/ff.c **** 			d = (TCHAR)(v % r); v /= r;
 9094              		.loc 1 4571 0
 9095 3c92 97F88620 		ldrb	r2, [r7, #134]	@ zero_extendqisi2
 9096 3c96 7B6F     		ldr	r3, [r7, #116]
 9097 3c98 B3FBF2F1 		udiv	r1, r3, r2
 9098 3c9c 02FB01F2 		mul	r2, r2, r1
 9099 3ca0 9B1A     		subs	r3, r3, r2
 9100 3ca2 87F87230 		strb	r3, [r7, #114]
 9101 3ca6 97F88630 		ldrb	r3, [r7, #134]	@ zero_extendqisi2
 9102 3caa 7A6F     		ldr	r2, [r7, #116]
 9103 3cac B2FBF3F3 		udiv	r3, r2, r3
 9104 3cb0 7B67     		str	r3, [r7, #116]
4572:../Sources/ff10b/src/ff.c **** 			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 9105              		.loc 1 4572 0
 9106 3cb2 97F87230 		ldrb	r3, [r7, #114]	@ zero_extendqisi2
 9107 3cb6 092B     		cmp	r3, #9
 9108 3cb8 0DD9     		bls	.L565
 9109              		.loc 1 4572 0 is_stmt 0 discriminator 1
 9110 3cba 97F87330 		ldrb	r3, [r7, #115]	@ zero_extendqisi2
 9111 3cbe 782B     		cmp	r3, #120
 9112 3cc0 02D1     		bne	.L566
 9113 3cc2 4FF02703 		mov	r3, #39
 9114 3cc6 01E0     		b	.L567
 9115              	.L566:
 9116              		.loc 1 4572 0 discriminator 2
 9117 3cc8 4FF00703 		mov	r3, #7
 9118              	.L567:
 9119              		.loc 1 4572 0 discriminator 3
 9120 3ccc 97F87220 		ldrb	r2, [r7, #114]
 9121 3cd0 9B18     		adds	r3, r3, r2
 9122 3cd2 87F87230 		strb	r3, [r7, #114]
 9123              	.L565:
4573:../Sources/ff10b/src/ff.c **** 			s[i++] = d + '0';
 9124              		.loc 1 4573 0 is_stmt 1
 9125 3cd6 97F87230 		ldrb	r3, [r7, #114]
 9126 3cda 03F13003 		add	r3, r3, #48
 9127 3cde DAB2     		uxtb	r2, r3
 9128 3ce0 07F15401 		add	r1, r7, #84
 9129 3ce4 D7F88030 		ldr	r3, [r7, #128]
 9130 3ce8 CB18     		adds	r3, r1, r3
 9131 3cea 1A70     		strb	r2, [r3, #0]
 9132 3cec D7F88030 		ldr	r3, [r7, #128]
 9133 3cf0 03F10103 		add	r3, r3, #1
 9134 3cf4 C7F88030 		str	r3, [r7, #128]
4574:../Sources/ff10b/src/ff.c **** 		} while (v && i < sizeof s / sizeof s[0]);
 9135              		.loc 1 4574 0
 9136 3cf8 7B6F     		ldr	r3, [r7, #116]
 9137 3cfa 002B     		cmp	r3, #0
 9138 3cfc 03D0     		beq	.L568
 9139              		.loc 1 4574 0 is_stmt 0 discriminator 1
 9140 3cfe D7F88030 		ldr	r3, [r7, #128]
 9141 3d02 0F2B     		cmp	r3, #15
 9142 3d04 C5D9     		bls	.L569
 9143              	.L568:
4575:../Sources/ff10b/src/ff.c **** 		if (f & 8) s[i++] = '-';
 9144              		.loc 1 4575 0 is_stmt 1
 9145 3d06 97F88730 		ldrb	r3, [r7, #135]	@ zero_extendqisi2
 9146 3d0a 03F00803 		and	r3, r3, #8
 9147 3d0e 002B     		cmp	r3, #0
 9148 3d10 0DD0     		beq	.L570
 9149              		.loc 1 4575 0 is_stmt 0 discriminator 1
 9150 3d12 07F15402 		add	r2, r7, #84
 9151 3d16 D7F88030 		ldr	r3, [r7, #128]
 9152 3d1a D318     		adds	r3, r2, r3
 9153 3d1c 4FF02D02 		mov	r2, #45
 9154 3d20 1A70     		strb	r2, [r3, #0]
 9155 3d22 D7F88030 		ldr	r3, [r7, #128]
 9156 3d26 03F10103 		add	r3, r3, #1
 9157 3d2a C7F88030 		str	r3, [r7, #128]
 9158              	.L570:
4576:../Sources/ff10b/src/ff.c **** 		j = i; d = (f & 1) ? '0' : ' ';
 9159              		.loc 1 4576 0 is_stmt 1
 9160 3d2e D7F88030 		ldr	r3, [r7, #128]
 9161 3d32 FB67     		str	r3, [r7, #124]
 9162 3d34 97F88730 		ldrb	r3, [r7, #135]	@ zero_extendqisi2
 9163 3d38 03F00103 		and	r3, r3, #1
 9164 3d3c 002B     		cmp	r3, #0
 9165 3d3e 02D0     		beq	.L571
 9166              		.loc 1 4576 0 is_stmt 0 discriminator 1
 9167 3d40 4FF03003 		mov	r3, #48
 9168 3d44 01E0     		b	.L572
 9169              	.L571:
 9170              		.loc 1 4576 0 discriminator 2
 9171 3d46 4FF02003 		mov	r3, #32
 9172              	.L572:
 9173              		.loc 1 4576 0 discriminator 3
 9174 3d4a 87F87230 		strb	r3, [r7, #114]
4577:../Sources/ff10b/src/ff.c **** 		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 9175              		.loc 1 4577 0 is_stmt 1 discriminator 3
 9176 3d4e 07E0     		b	.L573
 9177              	.L575:
 9178              		.loc 1 4577 0 is_stmt 0 discriminator 1
 9179 3d50 07F10802 		add	r2, r7, #8
 9180 3d54 97F87230 		ldrb	r3, [r7, #114]	@ zero_extendqisi2
 9181 3d58 1046     		mov	r0, r2
 9182 3d5a 1946     		mov	r1, r3
 9183 3d5c FFF74AFD 		bl	putc_bfd
 9184              	.L573:
 9185 3d60 97F88730 		ldrb	r3, [r7, #135]	@ zero_extendqisi2
 9186 3d64 03F00203 		and	r3, r3, #2
 9187 3d68 002B     		cmp	r3, #0
 9188 3d6a 0CD1     		bne	.L574
 9189              		.loc 1 4577 0 discriminator 2
 9190 3d6c FA6F     		ldr	r2, [r7, #124]
 9191 3d6e BB6F     		ldr	r3, [r7, #120]
 9192 3d70 9A42     		cmp	r2, r3
 9193 3d72 2CBF     		ite	cs
 9194 3d74 0023     		movcs	r3, #0
 9195 3d76 0123     		movcc	r3, #1
 9196 3d78 DBB2     		uxtb	r3, r3
 9197 3d7a FA6F     		ldr	r2, [r7, #124]
 9198 3d7c 02F10102 		add	r2, r2, #1
 9199 3d80 FA67     		str	r2, [r7, #124]
 9200 3d82 002B     		cmp	r3, #0
 9201 3d84 E4D1     		bne	.L575
 9202              	.L574:
4578:../Sources/ff10b/src/ff.c **** 		do putc_bfd(&pb, s[--i]); while (i);
 9203              		.loc 1 4578 0 is_stmt 1 discriminator 1
 9204 3d86 D7F88030 		ldr	r3, [r7, #128]
 9205 3d8a 03F1FF33 		add	r3, r3, #-1
 9206 3d8e C7F88030 		str	r3, [r7, #128]
 9207 3d92 07F15402 		add	r2, r7, #84
 9208 3d96 D7F88030 		ldr	r3, [r7, #128]
 9209 3d9a D318     		adds	r3, r2, r3
 9210 3d9c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 9211 3d9e 07F10802 		add	r2, r7, #8
 9212 3da2 1046     		mov	r0, r2
 9213 3da4 1946     		mov	r1, r3
 9214 3da6 FFF725FD 		bl	putc_bfd
 9215 3daa D7F88030 		ldr	r3, [r7, #128]
 9216 3dae 002B     		cmp	r3, #0
 9217 3db0 E9D1     		bne	.L574
4579:../Sources/ff10b/src/ff.c **** 		while (j++ < w) putc_bfd(&pb, d);
 9218              		.loc 1 4579 0
 9219 3db2 07E0     		b	.L576
 9220              	.L577:
 9221              		.loc 1 4579 0 is_stmt 0 discriminator 2
 9222 3db4 07F10802 		add	r2, r7, #8
 9223 3db8 97F87230 		ldrb	r3, [r7, #114]	@ zero_extendqisi2
 9224 3dbc 1046     		mov	r0, r2
 9225 3dbe 1946     		mov	r1, r3
 9226 3dc0 FFF718FD 		bl	putc_bfd
 9227              	.L576:
 9228              		.loc 1 4579 0 discriminator 1
 9229 3dc4 FA6F     		ldr	r2, [r7, #124]
 9230 3dc6 BB6F     		ldr	r3, [r7, #120]
 9231 3dc8 9A42     		cmp	r2, r3
 9232 3dca 2CBF     		ite	cs
 9233 3dcc 0023     		movcs	r3, #0
 9234 3dce 0123     		movcc	r3, #1
 9235 3dd0 DBB2     		uxtb	r3, r3
 9236 3dd2 FA6F     		ldr	r2, [r7, #124]
 9237 3dd4 02F10102 		add	r2, r2, #1
 9238 3dd8 FA67     		str	r2, [r7, #124]
 9239 3dda 002B     		cmp	r3, #0
 9240 3ddc EAD1     		bne	.L577
4580:../Sources/ff10b/src/ff.c **** 	}
 9241              		.loc 1 4580 0 is_stmt 1
 9242 3dde C4E5     		b	.L578
 9243              	.L532:
 9244 3de0 C3E5     		b	.L578
 9245              	.L582:
4514:../Sources/ff10b/src/ff.c **** 		if (c == 0) break;			/* End of string */
 9246              		.loc 1 4514 0
 9247 3de2 00BF     		nop
 9248 3de4 00E0     		b	.L530
 9249              	.L583:
4535:../Sources/ff10b/src/ff.c **** 		if (!c) break;
 9250              		.loc 1 4535 0
 9251 3de6 00BF     		nop
 9252              	.L530:
4581:../Sources/ff10b/src/ff.c **** 
4582:../Sources/ff10b/src/ff.c **** 	va_end(arp);
4583:../Sources/ff10b/src/ff.c **** 
4584:../Sources/ff10b/src/ff.c **** 	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 9253              		.loc 1 4584 0
 9254 3de8 FB68     		ldr	r3, [r7, #12]
 9255 3dea 002B     		cmp	r3, #0
 9256 3dec 14DB     		blt	.L579
4585:../Sources/ff10b/src/ff.c **** 		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 9257              		.loc 1 4585 0
 9258 3dee B868     		ldr	r0, [r7, #8]
 9259 3df0 FB68     		ldr	r3, [r7, #12]
 9260 3df2 1A46     		mov	r2, r3
 9261 3df4 07F10803 		add	r3, r7, #8
 9262 3df8 03F10C01 		add	r1, r3, #12
 9263 3dfc 07F16403 		add	r3, r7, #100
 9264 3e00 FFF7FEFF 		bl	f_write
 9265 3e04 0346     		mov	r3, r0
 9266 3e06 002B     		cmp	r3, #0
 9267 3e08 06D1     		bne	.L579
4586:../Sources/ff10b/src/ff.c **** 		&& (UINT)pb.idx == nw) return pb.nchr;
 9268              		.loc 1 4586 0
 9269 3e0a FB68     		ldr	r3, [r7, #12]
 9270 3e0c 1A46     		mov	r2, r3
 9271 3e0e 7B6E     		ldr	r3, [r7, #100]
 9272 3e10 9A42     		cmp	r2, r3
 9273 3e12 01D1     		bne	.L579
 9274              		.loc 1 4586 0 is_stmt 0 discriminator 1
 9275 3e14 3B69     		ldr	r3, [r7, #16]
 9276 3e16 01E0     		b	.L581
 9277              	.L579:
4587:../Sources/ff10b/src/ff.c **** 	return EOF;
 9278              		.loc 1 4587 0 is_stmt 1
 9279 3e18 4FF0FF33 		mov	r3, #-1
 9280              	.L581:
4588:../Sources/ff10b/src/ff.c **** }
 9281              		.loc 1 4588 0
 9282 3e1c 1846     		mov	r0, r3
 9283 3e1e 07F18C07 		add	r7, r7, #140
 9284 3e22 BD46     		mov	sp, r7
 9285 3e24 BDE88040 		pop	{r7, lr}
 9286 3e28 03B0     		add	sp, sp, #12
 9287 3e2a 7047     		bx	lr
 9288              		.cfi_endproc
 9289              	.LFE51:
 9291              	.Letext0:
 9292              		.file 2 "../Sources/ff10b/src/integer.h"
 9293              		.file 3 "../Sources/ff10b/src/ff.h"
 9294              		.file 4 "../Sources/ff10b/src/diskio.h"
 9295              		.file 5 "c:\\freescale\\cw mcu v10.6\\cross_tools\\arm-none-eabi-gcc-4_7_3\\bin\\../lib/gcc/arm-no
 9296              		.file 6 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:00000000 ff.c
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:19     .bss:00000000 $d
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:20     .bss:00000000 FatFs
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:23     .bss:00000004 Fsid
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:26     .text:00000000 $t
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:30     .text:00000000 mem_cpy
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:96     .text:00000050 mem_set
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:155    .text:00000094 mem_cmp
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:236    .text:00000104 chk_chr
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:291    .text:0000013c sync_window
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:395    .text:000001d4 move_window
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:467    .text:00000234 sync_fs
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:648    .text:000003b4 clust2sect
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:705    .text:000003f8 get_fat
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:936    .text:0000059c get_fattime
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:965    .text:000005ac put_fat
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:1289   .text:00000800 remove_chain
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:1422   .text:000008b4 create_chain
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:1645   .text:000009f0 dir_sdi
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:1831   .text:00000b04 dir_next
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:2110   .text:00000ce0 dir_alloc
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:2222   .text:00000d7c ld_clust
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:2291   .text:00000de0 st_clust
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:2352   .text:00000e3c dir_find
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:2468   .text:00000ee0 dir_read
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:2605   .text:00000f9c dir_register
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:2683   .text:00001010 dir_remove
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:2759   .text:0000107c get_fileinfo
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:2917   .rodata:00000000 $d
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:2918   .rodata:00000000 .LC0
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:2925   .text:00001188 create_name
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:3266   .text:00001400 follow_path
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:3422   .text:000014e0 get_ldnumber
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:3534   .text:00001574 check_fs
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:3652   .text:0000165c find_volume
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:4421   .text:00001c74 validate
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:4498   .text:00001cd8 f_mount
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:4603   .text:00001d74 f_open
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:4973   .text:00002050 f_read
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:5370   .text:0000230c f_write
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:5830   .text:00002634 f_sync
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:6034   .text:000027bc f_close
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:6090   .text:000027f8 f_lseek
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:6494   .text:00002aa4 f_opendir
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:6631   .text:00002b70 f_closedir
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:6678   .text:00002b9c f_readdir
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:6781   .text:00002c34 f_stat
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:6862   .text:00002cb4 f_getfree
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:7120   .text:00002e78 f_truncate
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:7338   .text:00002fd8 f_unlink
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:7529   .text:0000314c f_mkdir
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:7861   .text:000033ec f_chmod
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:7971   .text:000034a8 f_utime
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:8086   .text:00003574 f_rename
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:8345   .text:0000376c f_gets
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:8447   .text:000037f4 putc_bfd
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:8535   .text:0000386c f_putc
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:8610   .text:000038d4 f_puts
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:8697   .text:0000394c f_printf
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:8879   .text:00003ad0 $d
C:\Users\Norbert\AppData\Local\Temp\ccEc00u8.s:8904   .text:00003b2c $t
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.6111752e1bd0a440bd5209819217ec83
                           .group:00000000 wm4.ffconf.h.6.276819a3a49a7ae37f54890eecb94e63
                           .group:00000000 wm4.ff.h.45.ea4c0d95355c620cd99031e4d7e9656e
                           .group:00000000 wm4.diskio.h.6.da50361b93ad53e5f0de9110dc9ad28d
                           .group:00000000 wm4.stdarg.h.31.b70f21342353634f7b44d85f85f13832

UNDEFINED SYMBOLS
disk_write
disk_read
disk_ioctl
disk_status
disk_initialize
